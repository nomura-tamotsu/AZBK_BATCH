/*==========================================================================*/
/* Copyright　Information Services International-Dentsu, Ltd.   　          */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : BANK・R−CC                                           */
/*                                                                          */
/* PROGRAM NAME     : 全銀データ更新処理                                    */
/*                                                                          */
/* MODULE NAME      : UpdateJBData                                          */
/*                                                                          */
/* FUNCTION         : 全銀データ更新処理を行う                              */
/*                                                                          */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POint      : Main Module.                                          */
/*                                                                          */
/* INPUT            : argv[1]・・・全銀銀行ファイル                         */
/*                  : argv[2]・・・ログファイル                             */
/*                  : argv[3]・・・銀行テーブル名                           */
/*                  : argv[4]・・・支店テーブル名                           */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 14/03/26 | ISID        | First Edition.                            */
/*==========================================================================*/

/*---------------------------------------------------------------------------*/
/* Standard include specification                                            */
/*---------------------------------------------------------------------------*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <errno.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <time.h>

/*---------------------------------------------------------------------------*/
/* User defined include specification                                        */
/*---------------------------------------------------------------------------*/
#include "msg.h"
#include "common.h"
#include "batchcommon.h"
#include "apl_common.h"

EXEC SQL INCLUDE mbproc.h;

/*---------------------------------------------------------------------------*/
/* Internal macro definition                                                 */
/*---------------------------------------------------------------------------*/
typedef struct _DATE {
    char szYear            [  4];                    /* 年                   */
    char szMonth           [  2];                    /* 月                   */
    char szDay             [  2];                    /* 日                   */
} DATE;

typedef struct _COMMON_HEADER {
    char szDataClass       [  1];                    /* データ区分           */
    char szDataType        [  1];                    /* データ種別           */
} COMMON_HEADER;

typedef struct _BANK_DATA {
    char szDataClass       [  1];         /* データ区分                      */
    char szDataType        [  1];         /* データ種別                      */
    char szBankCode        [  4];         /* 銀行コード                      */
    char szBankCodeAdd     [  1];         /* 銀行付加コード                  */
    char szDaihyouBankCode [  4];         /* 代表銀行コード                  */
    char szBankNameKn      [ 15];         /* 銀行名                          */
    char szBankName        [ 30];         /* 銀行名（漢字）                  */
    char szShortBankNameKn [ 15];         /* 略銀行名                        */
    char szShortBankName   [ 30];         /* 略銀行名（漢字）                */
    char szJC1             [  1];         /* 地震強化地域内金融機関表示(JC1) */
    char szJC2             [  1];         /* 地震強化地域内金融機関表示(JC2) */
    char szJC3             [  1];         /* 地震強化地域内金融機関表示(JC3) */
    char szJC4             [  1];         /* 地震強化地域内金融機関表示(JC4) */
    char szJC5             [  1];         /* 地震強化地域内金融機関表示(JC5) */
    char szJC6             [  1];         /* 地震強化地域内金融機関表示(JC6) */
    char szJC7             [  1];         /* 地震強化地域内金融機関表示(JC7) */
    char szJC8             [  1];         /* 地震強化地域内金融機関表示(JC8) */
    char szJC9             [  1];         /* 地震強化地域内金融機関表示(JC9) */
    DATE szIdoDate8             ;         /* 異動年月日                      */
    char szIdoJiyu         [  2];         /* 異動事由コード                  */
    char szNewBankCode     [  4];         /* （新）銀行コード                */
    char szNewBankCodeAdd  [  1];         /* （新）銀行付加コード            */
    DATE szDelDate8             ;         /* 削除日                          */
    char szBankName2       [ 30];         /* 銀行名２（漢字）                */
    char szShortBankName2  [ 30];         /* 略銀行名２（漢字）              */
    char szFreeSpace       [187];         /* 余白                            */
    char szKaigyou         [  1];         /* 改行                            */
} BANK_DATA;

typedef struct _BRANCH_DATA {
    char szDataClass         [  1];              /* データ区分               */
    char szDataType          [  1];              /* データ種別               */
    char szBankCode          [  4];              /* 銀行コード               */
    char szBankCodeAdd       [  1];              /* 銀行付加コード           */
    char szBranchCode        [  3];              /* 支店コード               */
    char szBranchCodeAdd     [  2];              /* 付加コード               */
    char szBranchNameKn      [ 15];              /* 支店名（カナ）           */
    char szBranchName        [ 30];              /* 支店名（漢字）           */
    char szNameType          [  1];              /* 正読店名表示             */
    char szPostcode          [ 10];              /* 郵便番号                 */
    char szBranchAddressKn   [ 80];              /* 店舗所在地(カナ）        */
    char szBranchAddress     [110];              /* 店舗所在地（漢字）       */
    char szClearingHouseNo   [  4];              /* 所属手形交換所番号       */
    char szPhoneNo           [ 17];              /* 電話番号                 */
    char szBranchType        [  1];              /* 店舗属性表示             */
    char szBankCenterType    [  1];              /* 自行センター表示         */
    char szFurikomiCenter    [  1];              /* 振り込みセンター表示     */
    char szCollectCenter     [  1];              /* 集手センター表示         */
    char szExchangeCenter    [  1];              /* 為替センター表示         */
    char szNoCollection      [  1];              /* 代手対象外表示           */
    char szJC                [  1];              /* 地震強化地域内店舗表示   */
    char szJCNo              [  1];              /* JC番号                   */
    DATE szIdoDate8               ;              /* 異動年月日               */
    char szIdoJiyu           [  2];              /* 異動事由コード           */
    char szNewBankCode       [  4];              /* （新）銀行コード         */
    char szNewBankCodeAdd    [  1];              /* （新）銀行付加コード     */
    char szNewBranchCode     [  3];              /* （新）支店コード         */
    char szNewBranchCodeAdd  [  2];              /* （新）付加コード         */
    DATE szDelDate8               ;              /* 削除日                   */
    char szClearingHouseName [ 20];              /* 所属手形交換所名（漢字） */
    char szBranchName2       [ 30];              /* 支店名２（漢字）         */
    char szFreeSpace         [ 15];              /* 余白                     */
    char szKaigyou           [  1];              /* 改行                     */
} BRANCH_DATA;

typedef union _RECV_FILE_DATA {
    COMMON_HEADER szHeader;                      /* 共通ヘッダ部             */
    BANK_DATA szBankData;                        /* 金融機関データ           */
    BRANCH_DATA szBranchData;                    /* 店舗データ               */
} RECV_FILE_DATA;

/* カウンター定義 */
typedef struct _COUNT {
    int  iRecNum;                                    /* レコード件数         */
    int  iOkNum;                                     /* 更新件数             */
    int  iNgNum;                                     /* ＮＧ件数             */
} COUNT;


int inichigin = 0;                                 /* 日本銀行件数           */
int inotsei   = 0;                                 /* 正読以外件数           */
int inotfuri  = 0;                                 /* 振込以外件数           */
int ierrjiyu  = 0;                                 /* 異動事由コード不正件数 */
int icommit   = 0;                                 /* コミット件数           */

int jcount[11];                                    /* 異動事由コード別件数   */

/*---------------------------------------------------------------------------*/
/* Global variable specification                                             */
/*---------------------------------------------------------------------------*/
/* 設定ファイル項目（ホスト変数以外）*/
char g_szRecvFile       [AP_CONFIG_LINE];            /* 金融機関支店ファイル */
char g_szLogFile        [AP_CONFIG_LINE];            /* 取引ログファイル     */

FILE *g_pfRecvFile;                                  /* 金融機関支店ファイル */
FILE *g_pfLogFile;                                   /* ログファイル         */
char g_BankTBbName[33];								 /* 対象銀行テーブル名 */
char g_BranchTbName[33];							 /* 対象支店テーブル名 */

/* 業務設定値ファイル */
char g_szChange_Name    [AP_GYO_CONFIG_DATA_VALUE];  /* 更新者               */

char g_szDtlMsg           [AP_C_NOTE_LEN_H];         /* 事象詳細文字列       */

COUNT g_dCount;                                        /* カウンター         */

/*---------------------------------------------------------------------------*/
/* Host Variable                                                             */
/*---------------------------------------------------------------------------*/
EXEC SQL INCLUDE SQLCA;
EXEC SQL BEGIN DECLARE SECTION;
/* ＤＢ接続情報 */
    char      h_DB2DBNAME         [ 8];          /* ＤＢ名                   */

/* 銀行テーブルと支店テーブルの両方 */
    char      h_BANK_NO           [ 5];          /* 銀行番号                 */
    char      h_BANK_NAME_KN      [33];          /* 銀行名（カナ）           */
    char      h_START_DATE        [11];          /* 適用開始年月日           */
    char      h_END_DATE          [11];          /* 適用終了年月日           */
    char      h_CREATE_DATE       [11];          /* 作成年月日               */
    char      h_CREATE_TIME       [ 9];          /* 作成時間                 */
    char      h_CHANGE_NAME       [17];          /* 更新者                   */
    char      h_LAST_UPDATE_TS    [27];          /* 更新タイムスタンプ       */

/* 銀行テーブルのみ */
    char      h_BANK_NAME         [31];          /* 銀行名（漢字）           */
    char      h_BANK_TYPE         [ 3];          /* 銀行タイプ               */

/* 支店テーブルのみ */
    char      h_BANK_BRANCH_NO    [10];          /* 銀行番号&店番&付加コード */
    char      h_BRANCH_NO         [ 4];          /* 店番                     */
    char      h_BRANCH_NO_ADD     [ 3];          /* 店番付加コード           */
    char      h_BRANCH_NAME       [31];          /* 店名(漢字)               */
    char      h_BRANCH_NAME_KN    [33];          /* 店名(カナ)               */

/* カウンター */
    long h_GINKOCOUNTER;                         /* 銀行用のカウンター       */
    long h_SHITENCOUNTER;                        /* 支店用のカウンター       */

	int     tb_count;                            /* テーブル存在チェック用 */
	varchar ck_tbname[33];						 /* テーブル存在チェック用 */

	char        sqlcmd[1024];                    /* SQL Command */


EXEC SQL END DECLARE SECTION;

char    process_name[43];
char    g_work[1024];

/*---------------------------------------------------------------------------*/
/* Internal function prototype                                               */
/*---------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
/*  #5                       SUBROUTNE DEFINITION                           */
/*--------------------------------------------------------------------------*/
extern int send_err();
extern void errhandler();
extern int db_connect();


/* データの仮登録に関する関数 */
static void initialize( int ac, char *av[] );
static int readRecvData( RECV_FILE_DATA *pData );
static int tourokuGinkoRecvData( BANK_DATA *pData );
static int setGinkoRecvData( BANK_DATA *pData );
static int insertGinkoTables( VOID );
static int setShitenRecvData( BRANCH_DATA *pData );
static int insertShitenTables( VOID );

static int deleteTables( VOID );
static int tourokuRecvData( VOID );
static int tourokuShitenRecvData( BRANCH_DATA *pData );

/* 金融機関データのマージに関する関数 */
static int updateGinkoRecvData( VOID );
static int cursorGinkoDataOpen( VOID );
static int readGinkoData( VOID );
static int mergeGinkoData( VOID );
static int cursorAbolitionGinkoDataOpen( VOID );
static int readAbolitionGinkoData( VOID );
static int updateEndDateOfEntryGinkoData( VOID );
static int cursorEntryGinkoDataOpen( VOID );
static int readEntryGinkoData( VOID );
static int updateStartDateOfAbolitionGinkoData( VOID );
static int deleteDuplicatedGinkoData( VOID );

/* 支店データのマージに関する関数 */
static int updateShitenRecvData( VOID );
static int cursorShitenDataOpen( VOID );
static int readShitenData( VOID );
static int mergeShitenData( VOID );
static int cursorAbolitionShitenDataOpen( VOID );
static int readAbolitionShitenData( VOID );
static int updateEndDateOfEntryShitenData( VOID );
static int cursorEntryShitenDataOpen( VOID );
static int readEntryShitenData( VOID );
static int updateStartDateOfAbolitionShitenData( VOID );
static int deleteDuplicatedShitenData( VOID );

static int updateTables( VOID );


/* 共通 */
static void ConvAfter1Day( char *szAfter1Day, char *szDay );
static int convTime( char *cnvOld, char *cnvNew );
static int commit( VOID );
static int rollback( VOID );
static void finalize( int rc );
static int putExceptionAcctLogFile( RECV_FILE_DATA *pData, int rc );
static int putAcctLogFile( int rc );

/* 共通関数 */
unsigned long FcCheckNumber ( char * szString, int iLength  );
char * FcNumbertoString ( long lDigit, int  iLength );
long FcStringtoInteger( const char* buf, unsigned int len );



/*****************************************************************************/
/* Function Name:                                                            */
/*   int main( int argc, char *argv[] )                                      */
/*                                                                           */
/* Description:                                                              */
/*   メイン処理                                                              */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   argc          int          I    引数の数                                */
/*   argv[1]       char         I    金融機関支店ファイル                    */
/*   argv[2]       char         I    取引ログファイル名(フルパス)            */
/*   argv[3]       char         I    対象銀行テーブル名                      */
/*   argv[4]       char         I    対象支店テーブル名                      */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/*                                                                           */
/* Tables:                                                                   */
/*    None                                                                   */
/*                                                                           */
/* Return Code:                                                              */
/*     0 : NORMAL           : 正常終了                                       */
/*     9 : ERROR            : 異常終了                                       */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   金融機関支店ファイルの内容を、銀行テーブルと支店テーブルに反映し、      */
/*   反映結果を取引ログファイルに出力する。                                  */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*   1. 初期化処理                                                           */
/*   2. テーブル全件削除                                                     */
/*   3. データの仮登録                                                       */
/*   4. 金融機関データのマージ                                               */
/*   5. 店舗データのマージ                                                   */
/*   6. 後処理                                                               */
/*                                                                           */
/*****************************************************************************/
int main( int argc, char *argv[] )
{
/*--------------------------------------------------------------------------*/
/*                        LOCAL VARIABLE DECLARATIONS                       */
/*--------------------------------------------------------------------------*/
    /*int     return_code;*/
    int     exit_code = NORMAL;

#if 0
	RECV_FILE_DATA    dData;                         /* データ・レコード     */
    COUNT             dCount;                        /* カウンター           */
	int               i;
#endif

    int               rc;
	/*int               rc_fin=0;*/



/*--------------------------------------------------------------------------*/
/*                              MAIN ROUTINE                                */
/*--------------------------------------------------------------------------*/

/*==========================================================================*/
/*      INITIALIZATION                                                      */
/*==========================================================================*/


	
	/*-----------------------------*/
    /* Print process start message */
    /*-----------------------------*/

    strcpy( G_STATION, "UpdateJBData" );
	
	memset(process_name,0x00,sizeof(process_name));
    strcpy(process_name,"全銀データ更新処理");

    send_err( m$start_process, NORMAL, process_name, "", "", G_STATION );


    /*-------------------------------------------------------*/
    /* Setup error handler routine                           */
    /*-------------------------------------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

    G_POSITION = __LINE__;
    rc = db_connect() ;
    if ( rc != NORMAL ) {
        send_err( m$db_connect, rc, "", "", "", G_STATION );
        rc = ERROR ;
        goto ENDPROC ;
    }

	
    /* 事象詳細文字列の初期化 */
    memset ( g_szDtlMsg, '\0', sizeof( g_szDtlMsg ));
	
	/* 初期化処理 */
    initialize( argc, argv );

    /* テーブル全件削除 */
    rc = deleteTables();
    if (rc != NORMAL) {
        goto ENDPROC;
    }


    /* データの仮登録 */
    rc = tourokuRecvData();
    if (rc != NORMAL) {
        goto ENDPROC;
    }


    /* 金融機関データのマージ */
    rc = updateGinkoRecvData();
    if (rc != NORMAL) {
        goto ENDPROC;
    }

    /* 店舗データのマージ */
    rc = updateShitenRecvData();
    if (rc != NORMAL) {
        goto ENDPROC;
    }


	/* 銀行・支店テーブルに登録者を更新 */
	rc = updateTables();
	if (rc != NORMAL) {
		goto ENDPROC;
	}


ENDPROC:

	if ( rc == NORMAL ) {
        send_err( m$stop_process, NORMAL, process_name, "", "", G_STATION );
    } else {
        send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
    }

    /* 終了処理 */
    finalize( rc );



}

/*==========================================================================*/
/* FUNCTION NAME  : initialize                                              */
/*                                                                          */
/* FUNCTION       : 初期化処理                                              */
/*                                                                          */
/*                : 戻り値     無し                                         */
/*                                                                          */
/*==========================================================================*/
static void initialize( int ac, char *av[] )
{
        int exit_code=NORMAL;
		int i;


        /* 初期化処理 */

        memset( g_szRecvFile, 0x00, sizeof(g_szRecvFile) );
        memset( g_szLogFile, 0x00, sizeof(g_szLogFile) );
        memset( g_szDtlMsg, 0x00, sizeof(g_szDtlMsg) );

		memset( g_BankTBbName, 0x00, sizeof(g_BankTBbName) );
		memset( g_BranchTbName, 0x00, sizeof(g_BranchTbName) );

        /* 起動パラメータの設定がある場合、起動パラメータを使用する */
        if( ac == 5 ){
                strcpy(g_szRecvFile, av[1]); /* 全銀銀行ファイル        */
                strcpy(g_szLogFile,  av[2]); /* ログファイル            */
				strcpy(g_BankTBbName,   av[3]); /* 対象銀行テーブル名      */
				strcpy(g_BranchTbName,  av[4]); /* 対象支店テーブル名      */
        }
        else{
                sprintf (g_szDtlMsg,"全銀ファイル名 ログファイル名 対象銀行テーブル名 対象支店テーブル名");
                send_err (m$invalid_parameter, ERROR, g_szDtlMsg, NULL, NULL, G_STATION);

                exit_code = ERROR;
                goto initialize_end;
        }



		/* 銀行テーブル存在チェック */
		memset(ck_tbname.arr,0x0,sizeof(ck_tbname.arr));
		strcpy(ck_tbname.arr,g_BankTBbName);
		ck_tbname.len=(unsigned int)strlen(ck_tbname.arr);
		G_POSITION = __LINE__;
        EXEC SQL
			SELECT
				COUNT(*)
			INTO
				:tb_count
			FROM user_tables                            
			WHERE table_name = :ck_tbname;

		if (sqlca.sqlcode < 0) {
			send_err ( m$emb_error, sqlca.sqlcode, " 銀行テーブル存在チェック", NULL, NULL, G_STATION);
			exit_code = ERROR;
			goto initialize_end;
		}
		if ( tb_count == 0 ) {
			send_err (m$table_invalid, ERROR, ck_tbname.arr, NULL, NULL, G_STATION);
			exit_code = ERROR;
			goto initialize_end;
		}

		/* 支店テーブル存在チェック */
		memset(ck_tbname.arr,0x0,sizeof(ck_tbname.arr));
		strcpy(ck_tbname.arr,g_BranchTbName);
		ck_tbname.len=(unsigned int)strlen(ck_tbname.arr);
		G_POSITION = __LINE__;
        EXEC SQL
			SELECT
				COUNT(*)
			INTO
				:tb_count
			FROM user_tables                             
			WHERE table_name = :ck_tbname;

		if (sqlca.sqlcode < 0) {
			send_err ( m$emb_error, sqlca.sqlcode, " 支店テーブル存在チェック", NULL, NULL, G_STATION);
			exit_code = ERROR;
			goto initialize_end;
		}
		if ( tb_count == 0 ) {
			send_err (m$table_invalid, ERROR, ck_tbname.arr, NULL, NULL, G_STATION);
			exit_code = ERROR;
			goto initialize_end;
		}

        /* 全銀銀行ファイルのオープン */
        if(( g_pfRecvFile = fopen( g_szRecvFile, "r" )) == NULL ){
                sprintf( g_szDtlMsg, "ファイル%sのオープンに失敗しました。", g_szRecvFile );
                send_err( m$file_open, errno, g_szDtlMsg, NULL, NULL, G_STATION );

                exit_code = ERROR;
                goto initialize_end;
		}

        /* 全銀銀行ログファイルへのオープン */
        if(( g_pfLogFile = fopen( g_szLogFile, "w" )) == NULL ){
                sprintf( g_szDtlMsg, "ファイル%sのオープンに失敗しました。", g_szLogFile );
                send_err( m$file_open, errno, g_szDtlMsg, NULL, NULL, G_STATION );

                exit_code = ERROR;
                goto initialize_end;
        }

		/* 各件数の初期化 */
		inichigin = 0;  /* 日本銀行件数           */
		inotsei   = 0;  /* 正読以外件数           */
		inotfuri  = 0;  /* 振込以外件数           */
		ierrjiyu  = 0;  /* 異動事由コード不正件数 */
		icommit   = 0;  /* コミット件数           */

		for (i=0; i<=10; i++) {
			jcount[i] = 0;  /* 異動事由コード別件数 */
		}

initialize_end:
        if ( exit_code != NORMAL ) {
                send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
                exit ( exit_code );
        }


}


/*****************************************************************************/
/* Function Name:                                                            */
/*   static int readRecvData( RECV_FILE_DATA *pData )                        */
/*                                                                           */
/* Description:                                                              */
/*   金融機関支店ファイルの読込                                              */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length     I/O    Content                            */
/* --------------  -----------     ---  --------------------------------     */
/*   *pData        RECV_FILE_DATA  I    入力ファイルレコード                 */
/*                                                                           */
/* Files :                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL        : 正常終了                                                */
/*   ERROR         : 異常終了                                                */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 金融機関支店ファイルの読込み                                         */
/*                                                                           */
/* Considerations:                                                           */
/*   1. 下記のグローバル変数でファイル操作を実施する                         */
/*      ・g_szRecvFile                                                       */
/*      ・g_pfRecvFile                                                       */
/*   2. 下記のグローバル変数でエラーメッセージを設定する                     */
/*      ・g_szDtlMsg                                                         */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int readRecvData( RECV_FILE_DATA *pData )
{
    unsigned int RecvSt;


    RecvSt = NORMAL;

    RecvSt = (unsigned int)fread((char *)pData,
                   sizeof( RECV_FILE_DATA ),
                   1,
                   g_pfRecvFile);


/* データ表示
	printf("[%s]\n",pData);
	printf("len=%d\n",strlen(pData));

*/



    if (RecvSt != 1) {
        if (feof( g_pfRecvFile ) != 0) {
            RecvSt = NORMAL;
        }
        else{
            sprintf(g_szDtlMsg,
                    "金融機関支店ファイル(%s)の読込に失敗しました。",
                    g_szRecvFile);
            send_err ( m$file_read, -1, g_szDtlMsg, NULL, NULL, G_STATION);

            RecvSt = ERROR;
        }
    }
    else{
        RecvSt = NORMAL;
    }



    return RecvSt;
}



/*****************************************************************************/
/* Function Name:                                                            */
/*   static int deleteTables( VOID )                                         */
/*                                                                           */
/* Description:                                                              */
/*   銀行テーブル・支店テーブルの全件削除                                    */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files :                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL       : 正常終了                                                 */
/*   ERROR        : 異常終了                                                 */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 銀行テーブルのデータを全て削除する                                   */
/*   2. 支店テーブルのデータを全て削除する                                   */
/*                                                                           */
/* Considerations:                                                           */
/*   1. 下記のグローバル変数でエラーメッセージを設定                         */
/*      ・g_szDtlMsg                                                         */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int deleteTables( VOID )
{

	/* 銀行テーブル削除件数の取得 */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );
	strcpy ( sqlcmd, "begin ");
	strcat ( sqlcmd, "SELECT COUNT(*) ");
	strcat ( sqlcmd, "INTO  :h_GINKOCOUNTER from ");
	sprintf( g_work, "%s ;", g_BankTBbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "end; ");

	/* 動的SQL-SQL文の解析 */
	G_POSITION = __LINE__;
	EXEC SQL PREPARE my_stmt01 FROM :sqlcmd;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "銀行テーブルの削除に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt01", NULL, NULL, G_STATION);

		return ERROR;
	}

	/* 銀行テーブル削除件数の取得 */
	G_POSITION = __LINE__;
	EXEC SQL EXECUTE my_stmt01 USING :h_GINKOCOUNTER;

	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "銀行テーブルの削除に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION);

		return ERROR;
	}



    if (h_GINKOCOUNTER != 0) {

		memset ( sqlcmd, 0x0, sizeof(sqlcmd) );
		strcpy ( sqlcmd, "DELETE FROM ");
		sprintf( g_work, "%s ", g_BankTBbName );
        strcat ( sqlcmd, g_work);

		G_POSITION = __LINE__;
		EXEC SQL EXECUTE IMMEDIATE :sqlcmd;
		if( sqlca.sqlcode < 0 ){
            sprintf( g_szDtlMsg,
                    "銀行テーブルの削除に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
			send_err ( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION);

            return ERROR;
		}

    }
    else{
        sprintf( g_szDtlMsg,
                "銀行テーブルにデータが存在しません。" );
        send_err ( m$message1, NORMAL, g_szDtlMsg, NULL, NULL, G_STATION);
    }



	/* 支店テーブル削除件数の取得 */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );
	strcpy ( sqlcmd, "begin ");
	strcat ( sqlcmd, "SELECT COUNT(*) ");
	strcat ( sqlcmd, "INTO  :h_SHITENCOUNTER from ");
	sprintf( g_work, "%s ;", g_BranchTbName );
    strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "end; ");

	/* 動的SQL-SQL文の解析 */
	G_POSITION = __LINE__;
	EXEC SQL PREPARE my_stmt02 FROM :sqlcmd;
	if (sqlca.sqlcode < 0) {
        sprintf( g_szDtlMsg,
                "支店テーブルの削除に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt02", NULL, NULL, G_STATION);

        return ERROR;
    }

	/* 支店テーブル削除件数の取得 */
	G_POSITION = __LINE__;
	EXEC SQL EXECUTE my_stmt02 USING :h_SHITENCOUNTER;

    if (sqlca.sqlcode < 0) {
        sprintf( g_szDtlMsg,
                "支店テーブルの削除に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION);

        return ERROR;
    }


	if (h_SHITENCOUNTER != 0) {
		memset ( sqlcmd, 0x0, sizeof(sqlcmd) );
		strcpy ( sqlcmd, "DELETE FROM ");
		sprintf( g_work, "%s ", g_BranchTbName );
        strcat ( sqlcmd, g_work);

		G_POSITION = __LINE__;
		EXEC SQL EXECUTE IMMEDIATE :sqlcmd;

        if (sqlca.sqlcode < 0) {
            sprintf( g_szDtlMsg,
                    "支店テーブルの削除に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
			send_err ( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION);

            return ERROR;
        }
    }
    else{
        sprintf( g_szDtlMsg,
                "支店テーブルにデータが存在しません。");
       send_err ( m$message1, NORMAL, g_szDtlMsg, NULL, NULL, G_STATION);

    }



    return NORMAL;
}
/*****************************************************************************/
/* Function Name:                                                            */
/*   static int tourokuGinkoRecvData( BANK_DATA *pData )                     */
/*                                                                           */
/* Description:                                                              */
/*   金融機関データの仮登録                                                  */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length    I/O    Content                             */
/* --------------  -----------    ---  ---------------------------------     */
/*   *pData        BANK_DATA      I    入力ファイルレコード                  */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL         : 正常終了                                               */
/*   ERROR          : 異常終了                                               */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. データに対して、スキップチェックを実施する                           */
/*      ・日本銀行（銀行コード’0000’）                                     */
/*   2. 金融機関データの設定処理を実施する                                   */
/*   3. 銀行テーブルへの登録を実施する                                       */
/*                                                                           */
/* Considerations:                                                           */
/*   1. 下記のグローバル変数の値を設定する                                   */
/*      ・g_dCount                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int tourokuGinkoRecvData( BANK_DATA *pData )
{
    int rc = NORMAL;



    /* 日本銀行は除外する */
    if (memcmp( pData->szBankCode, "0000", 4 ) == 0) {
        inichigin++;
        return rc;
    }


    /* 金融機関データの設定処理 */
    rc = setGinkoRecvData( pData );
    if (rc != NORMAL) {

        return rc;
    }

    /* 銀行テーブル登録 */
    rc = insertGinkoTables();
    if (rc != NORMAL) {
        return rc;
    }
    g_dCount.iOkNum++;


    return rc;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*   static int insertGinkoTables( VOID )                                    */
/*                                                                           */
/* Description:                                                              */
/*   銀行テーブルへの挿入                                                    */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 金融機関データを銀行テーブルへ挿入する                               */
/*                                                                           */
/* Considerations:                                                           */
/*   1. データマージのために、「更新者」カラムにて、異動事由コードを         */
/*      臨時的に格納し、commit前に、更新者を正しい値に変更する               */
/*   2. 下記のグローバル変数でエラーメッセージを設定する                     */
/*      ・g_szDtlMsg                                                         */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int insertGinkoTables( void )
{

	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );

	strcpy ( sqlcmd , "begin ");
    strcat ( sqlcmd , "INSERT INTO ");
	sprintf( g_work, "%s ", g_BankTBbName );
    strcat ( sqlcmd, g_work);

    strcat ( sqlcmd , "(銀行番号, ");
    strcat ( sqlcmd , "銀行名漢字, ");
    strcat ( sqlcmd , "銀行名カナ, ");
    strcat ( sqlcmd , "業態ID, ");
    strcat ( sqlcmd , "適用開始年月日, ");
    strcat ( sqlcmd , "適用終了年月日, ");
    strcat ( sqlcmd , "登録日, ");
    strcat ( sqlcmd , "登録者) ");
    strcat ( sqlcmd , "VALUES ");
    strcat ( sqlcmd , "(:h_BANK_NO, ");
    strcat ( sqlcmd , ":h_BANK_NAME, ");
    strcat ( sqlcmd , ":h_BANK_NAME_KN, ");
    strcat ( sqlcmd , ":h_BANK_TYPE, ");
    strcat ( sqlcmd , "TO_DATE(:h_START_DATE,'YYYY-MM-DD'), ");
    strcat ( sqlcmd , "TO_DATE(:h_END_DATE,'YYYY-MM-DD'), ");
    strcat ( sqlcmd , "SYSDATE, ");
    strcat ( sqlcmd , ":h_CHANGE_NAME); ");
	strcat ( sqlcmd , "end; ");

	/*printf("sqlcmd=[%s]\n",sqlcmd);*/

	/* 動的SQL-SQL文の解析 */
	G_POSITION = __LINE__;
	EXEC SQL PREPARE my_stmt03 FROM :sqlcmd;
	if (sqlca.sqlcode < 0) {
        sprintf( g_szDtlMsg,
                "銀行テーブルの挿入に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt03", NULL, NULL, G_STATION);

        return ERROR;
    }

	/* 銀行データの挿入実行 */
	G_POSITION = __LINE__;
	EXEC SQL EXECUTE my_stmt03 
	USING	:h_BANK_NO,
			:h_BANK_NAME,
			:h_BANK_NAME_KN,
			:h_BANK_TYPE,
			:h_START_DATE,
			:h_END_DATE,
			:h_CHANGE_NAME;

    if (sqlca.sqlcode < 0) {
        sprintf(g_szDtlMsg,
                "[銀行コード=%s] 銀行テーブルの挿入に失敗しました。(CODE=%ld)",
                h_BANK_NO, sqlca.sqlcode);
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION);

        return ERROR;
    }


    return NORMAL;
}



/*****************************************************************************/
/* Function Name:                                                            */
/*   static int setGinkoRecvData( BANK_DATA *pData )                         */
/*                                                                           */
/* Description:                                                              */
/*   金融機関データの設定処理                                                */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length    I/O    Content                             */
/* --------------  -----------    ---  ---------------------------------     */
/*   *pData        BANK_DATA      I    入力ファイルレコード                  */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL         : 正常終了                                               */
/*   ERROR          : 異常終了                                               */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 金融機関データ入力チェック                                           */
/*    1.1. 単項目エラーチェック                                              */
/*    1.2. 相関エラーチェック                                                */
/*   2. 金融機関データ変換                                                   */
/*    2.1. 銀行タイプ設定                                                    */
/*    2.2. 下記項目に関して、全角変換                                        */
/*         ・銀行名                                                          */
/*    2.3. 適用期間設定                                                      */
/*   3. 銀行テーブルへの登録を実施する                                       */
/*                                                                           */
/* Considerations:                                                           */
/*   1. データマージのために、変数「更新者」にて、異動事由コードを           */
/*      臨時的に格納し、テーブルへ仮登録する                                 */
/*    1.1. 下記の場合、「更新者」に "01" を設定                              */
/*         ・異動事由コードが "00" である                                    */
/*    1.2. 下記の場合、「更新者」に "02" を設定                              */
/*         ・異動事由コードが "01" である                                    */
/*         ・異動事由コードが "04" である                                    */
/*         ・異動事由コードが "06" であり、かつ、削除日がある                */
/*         ・異動事由コードが "08" である                                    */
/*    1.3. 下記の異動事由コードの場合、「更新者」に "03" を設定              */
/*         ・異動事由コードが "02" である                                    */
/*         ・異動事由コードが "05" である                                    */
/*         ・異動事由コードが "06" であり、かつ、削除日がない                */
/*         ・異動事由コードが "07" である                                    */
/*         ・異動事由コードが "09" である                                    */
/*   2. 下記のグローバル変数でエラーメッセージを設定する                     */
/*      ・g_szDtlMsg                                                         */
/*   3. 下記のグローバル変数で計数を参照する                                 */
/*      ・g_dCount                                                           */
/*   4. 下記のグローバル変数を関数の出力として設定する                       */
/*      ・h_BANK_NO                                                          */
/*      ・h_BANK_NAME_KN                                                     */
/*      ・h_START_DATE                                                       */
/*      ・h_END_DATE                                                         */
/*      ・h_CHANGE_NAME                                                      */
/*      ・h_LAST_UPDATE_TS                                                   */
/*      ・h_BANK_NAME                                                        */
/*      ・h_BANK_TYPE                                                        */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int setGinkoRecvData( BANK_DATA *pData )
{
    /* データチェック用の変数 */
    char   wIdo[3];      /* 異動事由コード */
    int    iIdo;         /* 異動事由コード */
    char   wKn[33];      /* 銀行名（カナ） */
    char   wDate[11];    /* 異動年月日     */
    DATE   szWorkDate8;  /* 削除日         */
	int	   rc;

    /* 日付チェック用の変数 */
    char   szaRecvDate[9];
    char   szbRecvDate[11];


    /* 銀行コード */
    if (pData->szBankCode[0] == 0x00 || pData->szBankCode[0] == 0x20) {
        sprintf(g_szDtlMsg,
                "[レコードＮＯ=%d]銀行コードの設定がありません。",
                g_dCount.iRecNum);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return ERROR;
    }
    memset( h_BANK_NO, 0x00, sizeof( h_BANK_NO ));
    memcpy( h_BANK_NO, pData->szBankCode, sizeof(pData->szBankCode));

    /* 銀行タイプの設定 */
    memset( h_BANK_TYPE, 0x00, sizeof( h_BANK_TYPE ));


    /* 銀行コードが数字以外の場合 */
    if (FcCheckNumber(pData->szBankCode, 4) != 0) {
        sprintf(g_szDtlMsg,
                "[レコードＮＯ=%d,銀行コード=%.*s]銀行コードの設定が正しくありません。",
                g_dCount.iRecNum, 4, pData->szBankCode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }




    /* 銀行 */
    if (FcStringtoInteger( pData->szBankCode, 4) >= 0
        && FcStringtoInteger( pData->szBankCode, 4) <= 598) {
        memcpy( h_BANK_TYPE, FcNumbertoString( AP_C_BANK_TYPE_01, 2 ), 2 );
    }
    /* 信金 */
    else if (FcStringtoInteger( pData->szBankCode, 4) >= 1000
             && FcStringtoInteger( pData->szBankCode, 4) <= 1999) {
        memcpy( h_BANK_TYPE, FcNumbertoString( AP_C_BANK_TYPE_02, 2 ), 2 );;
    }
    /* 信組 */
    else if (FcStringtoInteger( pData->szBankCode, 4) >= 2000
             && FcStringtoInteger( pData->szBankCode, 4) <= 2999) {
        memcpy( h_BANK_TYPE, FcNumbertoString( AP_C_BANK_TYPE_03, 2 ), 2 );
    }
    /* その他 */
    else if ((FcStringtoInteger( pData->szBankCode, 4) >= 599
              && FcStringtoInteger( pData->szBankCode, 4) <= 999)
          || (FcStringtoInteger( pData->szBankCode, 4) >= 3000
              && FcStringtoInteger( pData->szBankCode, 4) <= 9999)) {
        memcpy( h_BANK_TYPE, FcNumbertoString( AP_C_BANK_TYPE_99, 2 ), 2 );
    }
    else{
        sprintf(g_szDtlMsg,
                "[レコードＮＯ=%d,銀行コード=%.*s]銀行コードの設定が正しくありません。",
                g_dCount.iRecNum, 4, pData->szBankCode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }

    /* 銀行名（カナ）*/
    if (pData->szBankNameKn[0] == 0x00 || pData->szBankNameKn[0] == 0x20) {
        sprintf(g_szDtlMsg,
                "[レコードＮＯ=%d,銀行コード=%.*s]銀行名（カナ）の設定がありません。",
                g_dCount.iRecNum, 4, pData->szBankCode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }
    memset( h_BANK_NAME_KN, 0x00, sizeof( h_BANK_NAME_KN ));
    memset( wKn, 0x00, sizeof( wKn ));
    memcpy( wKn, pData->szBankNameKn, sizeof( pData->szBankNameKn ));
    AP_DELSP( wKn, sizeof( pData->szBankNameKn ));
	strcpy ( h_BANK_NAME_KN, wKn );

#if 0
    rc = charCheck2( wKn, h_BANK_NAME_KN, sizeof( h_BANK_NAME_KN ));
    if (rc != 0) {
        /* 変換エラー */
        sprintf(g_szDtlMsg,
                "[レコードＮＯ=%d,銀行コード=%.*s]銀行名（カナ）全角変換エラー",
                g_dCount.iRecNum, 4, pData->szBankCode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    } 
#endif


    /* 銀行名２（漢字） */
    if (pData->szBankName2[0] == 0x00 || pData->szBankName2[0] == 0x20) {
        sprintf(g_szDtlMsg,
                "[レコードＮＯ=%d,銀行コード=%.*s]銀行名２（漢字）の設定がありません。",
                g_dCount.iRecNum, 4, pData->szBankCode);
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

		return ERROR;
    }
    memset( h_BANK_NAME, 0x00, sizeof( h_BANK_NAME ));
    memcpy( h_BANK_NAME, pData->szBankName2, sizeof( pData->szBankName2 ));

    /* 異動年月日の必須チェック */
    if (pData->szIdoDate8.szYear[0] == 0x00 || pData->szIdoDate8.szYear[0] == 0x20) {
        sprintf(g_szDtlMsg,
                "[レコードＮＯ=%d,銀行コード=%.*s]異動年月日の設定がありません。",
                g_dCount.iRecNum, 4, pData->szBankCode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }



    /* 異動年月日の日付チェック */
    memset( szaRecvDate, 0x00, sizeof( szaRecvDate ));
    memset( szbRecvDate, 0x00, sizeof( szbRecvDate ));

    sprintf(szaRecvDate,
            "%.*s%.*s%.*s",
            sizeof( pData->szIdoDate8.szYear ),
            pData->szIdoDate8.szYear,
            sizeof( pData->szIdoDate8.szMonth ),
            pData->szIdoDate8.szMonth,
            sizeof( pData->szIdoDate8.szDay ),
            pData->szIdoDate8.szDay);

    rc = convTime( szaRecvDate, szbRecvDate );
	/*printf("szaRecvDate=[%s]\n",szbRecvDate);*/



	switch (rc) {
        case 1:
            sprintf(g_szDtlMsg,
                    "[レコードＮＯ=%d,銀行コード=%.*s]異動年月日の設定が正しくありません。",
                    g_dCount.iRecNum, 4, pData->szBankCode);
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
            return ERROR;
        case 2:
            sprintf(g_szDtlMsg,
                    "[レコードＮＯ=%d,銀行コード=%.*s]異動年月日が実際の日付ではありません。",
                    g_dCount.iRecNum, 4, pData->szBankCode);
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
            return ERROR;
        default:
            break;
    }



    /* 異動事由コードのチェック */
    memset( wIdo, 0x00, sizeof( wIdo ));
    memcpy( wIdo, pData->szIdoJiyu, sizeof( pData->szIdoJiyu ));
    iIdo = atoi( wIdo );
    if (pData->szIdoJiyu[0] == 0x00 || pData->szIdoJiyu[0] == 0x20) {
        sprintf(g_szDtlMsg,
                "[レコードＮＯ=%d,銀行コード=%.*s]異動事由コードの設定がありません。",
                g_dCount.iRecNum, 4, pData->szBankCode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        ierrjiyu++;

        return ERROR;
    } 
    else if (iIdo == 3 || iIdo > 9 || iIdo < 0) {
        sprintf(g_szDtlMsg,
                "[レコードＮＯ=%d,銀行コード=%.*s]異動事由コード(%.*s)が正しくありません。",
                g_dCount.iRecNum, 4, pData->szBankCode, 2, pData->szIdoJiyu);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        ierrjiyu++;

       return ERROR;
    }



    /* 日付の設定 */
    memset( h_START_DATE, 0x00, sizeof( h_START_DATE ));
    memset( h_END_DATE, 0x00, sizeof( h_END_DATE ));
    memset( wDate, 0x00, sizeof( wDate ));
    sprintf(wDate,
            "%.*s-%.*s-%.*s",
            sizeof( pData->szIdoDate8.szYear ),
            pData->szIdoDate8.szYear,
            sizeof( pData->szIdoDate8.szMonth ),
            pData->szIdoDate8.szMonth,
            sizeof( pData->szIdoDate8.szDay ),
            pData->szIdoDate8.szDay);

    memset( h_CHANGE_NAME, 0x00, sizeof( h_CHANGE_NAME ));

    jcount[iIdo]++;
    switch (iIdo) {
        case 0:         /* 新規登録 */
            memcpy( h_START_DATE,  "0001-01-01", sizeof( h_START_DATE )-1 );
            memcpy( h_END_DATE,    "9999-12-31", sizeof( h_END_DATE )-1 );
            memcpy( h_CHANGE_NAME, "01",         sizeof( h_CHANGE_NAME )-1 );
            break;
        case 1:         /* 新設 */
            memcpy( h_START_DATE,  wDate,        sizeof( h_START_DATE )-1 );
            memcpy( h_END_DATE,    "9999-12-31", sizeof( h_END_DATE )-1 );
            memcpy( h_CHANGE_NAME, "02",         sizeof( h_CHANGE_NAME )-1 );
            break;
        case 2:         /* 廃止・脱退 */
            memcpy( h_START_DATE, "0001-01-01", sizeof( h_START_DATE )-1 );
            ConvAfter1Day( h_END_DATE, pData->szIdoDate8.szYear );
            memcpy( h_CHANGE_NAME, "03", sizeof( h_CHANGE_NAME )-1 );
            break;
        case 4:         /* 金融機関名称・コード変更（変更後） */
            memcpy( h_START_DATE,  wDate,        sizeof( h_START_DATE )-1 );
            memcpy( h_END_DATE,    "9999-12-31", sizeof( h_END_DATE )-1 );
            memcpy( h_CHANGE_NAME, "02",         sizeof( h_CHANGE_NAME )-1 );
            break;
        case 5:         /* 金融機関名称・コード変更（変更前並存） */
            memcpy( h_START_DATE,  "0001-01-01", sizeof( h_START_DATE )-1 );
            memcpy( h_END_DATE,    wDate,        sizeof( h_END_DATE )-1 );
            memcpy( h_CHANGE_NAME, "03",         sizeof( h_CHANGE_NAME )-1 );
            break;
        case 6:         /* その他変更 */
            memset( szWorkDate8.szYear, ' ', sizeof( szWorkDate8 ));

            rc = strncmp(szWorkDate8.szYear,
                         pData->szDelDate8.szYear,
                         sizeof( pData->szDelDate8.szYear )
                         + sizeof( pData->szDelDate8.szMonth )
                         + sizeof( pData->szDelDate8.szDay));
            if (rc == 0) {
                memcpy( h_START_DATE, wDate,        sizeof( h_START_DATE )-1 );
                memcpy( h_END_DATE,   "9999-12-31", sizeof( h_END_DATE )-1 );
				memcpy( h_CHANGE_NAME, "02", sizeof( h_CHANGE_NAME )-1 );
            } 
            else{
                memcpy( h_START_DATE,  "0001-01-01", sizeof( h_START_DATE )-1 );
                memcpy( h_END_DATE,    wDate,        sizeof( h_END_DATE )-1 );
                memcpy( h_CHANGE_NAME, "03",         sizeof( h_CHANGE_NAME )-1 );
            }
            break;
        case 7:         /* 合併１・２（合併前並存） */
            memcpy( h_START_DATE, "0001-01-01", sizeof( h_START_DATE )-1 );
            memcpy( h_END_DATE,   wDate,        sizeof( h_END_DATE )-1 );
            memcpy( h_CHANGE_NAME, "03", sizeof( h_CHANGE_NAME )-1 );
            break;
        case 8:         /* 合併１（合併後） */
            memcpy( h_START_DATE,  wDate,        sizeof( h_START_DATE )-1 );
            memcpy( h_END_DATE,    "9999-12-31", sizeof( h_END_DATE )-1 );
            memcpy( h_CHANGE_NAME, "02",         sizeof( h_CHANGE_NAME )-1 );
            break;
        case 9:         /* 営業譲渡（譲渡元） */
            memcpy( h_START_DATE,  "0001-01-01", sizeof( h_START_DATE )-1 );
            memcpy( h_END_DATE,    wDate,        sizeof( h_END_DATE )-1 );
            memcpy( h_CHANGE_NAME, "03",         sizeof( h_CHANGE_NAME )-1 );
            break;
        default:
            sprintf(g_szDtlMsg,
                    "[レコードＮＯ=%d,銀行コード=%.*s]異動事由コード(%.*s)が正しくありません。",
                     g_dCount.iRecNum, 4, pData->szBankCode, 2, pData->szIdoJiyu );
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
            return ERROR;
            break;
    }


     /* 改行項目チェック */
    if (pData->szKaigyou[0] != 0x0a) {
         sprintf(g_szDtlMsg,
                 "[レコードＮＯ=%d]改行コードの設定がありません。",
                 g_dCount.iRecNum);
         send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
         return ERROR;
    }



    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*   static int tourokuShitenRecvData( BRANCH_DATA *pData )                  */
/*                                                                           */
/* Description:                                                              */
/*   金融機関データの仮登録                                                  */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length    I/O    Content                             */
/* --------------  -----------    ---  ---------------------------------     */
/*   *pData        BANK_DATA      I    入力ファイルレコード                  */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL         : 正常終了                                               */
/*   ERROR          : 異常終了                                               */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. データに対して、スキップチェックを実施する                           */
/*      ・日本銀行（銀行コード’0000’）                                     */
/*      ・正読店表示以外（’０’）                                           */
/*      ・店舗属性表示が「各種センター」（’8’又は’9’）                   */
/*   2. 支店データの設定処理を実施する                                       */
/*   3. 支店テーブルへの登録を実施する                                       */
/*                                                                           */
/* Considerations:                                                           */
/*   1. 下記のグローバル変数の値を設定する                                   */
/*      ・g_dCount                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int tourokuShitenRecvData( BRANCH_DATA *pData )
{
    int rc = NORMAL;


    /* 日本銀行は除外する */
    if (memcmp( pData->szBankCode, "0000", 4 ) == 0) {
        inichigin++;

        return rc;
    }

    /* 正読店名表示以外は除外する */
    if (pData->szNameType[0] == '0') {
        inotsei++;

        return rc;
    }


    /* 店舗属性「各種センター」は除外する */
    if (pData->szBranchType[0] == '8' || pData->szBranchType[0] == '9') {
        inotfuri++;

        return rc;
    }


    /* 支店データの設定処理 */
    rc = setShitenRecvData( pData );
    if (rc != NORMAL) {
        g_dCount.iNgNum++;
        return rc;
    }

    /* 支店テーブル登録 */
    rc = insertShitenTables();
    if (rc != NORMAL) {
        return rc;
    }


    g_dCount.iOkNum++;



    return rc;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*   static int setShitenRecvData( BRANCH_DATA *pData )                      */
/*                                                                           */
/* Description:                                                              */
/*   支店データの設定処理                                                    */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length    I/O    Content                             */
/* --------------  -----------    ---  -----------------------------------   */
/*   *pData        BRANCH_DATA    I    入力ファイルレコード                  */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/*                                                                           */
/* Tables:                                                                   */
/*    None                                                                   */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL         : 正常終了                                               */
/*   ERROR          : 異常終了                                               */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 支店データ入力チェック                                               */
/*    1.1. 単項目エラーチェック                                              */
/*    1.2. 相関エラーチェック                                                */
/*   2. 支店データ変換                                                       */
/*    2.1. 下記項目に関して、全角変換                                        */
/*         ・支店名（カナ）                                                  */
/*    2.2. 適用期間設定                                                      */
/*   3. 支店テーブルへの登録を実施する                                       */
/*                                                                           */
/* Considerations:                                                           */
/*   1. データマージのために、変数「更新者」にて、異動事由コードを           */
/*      臨時的に格納し、テーブルへ仮登録する                                 */
/*    1.1. 下記の場合、「更新者」に "01" を設定                              */
/*         ・異動事由コードが "00" である                                    */
/*    1.2. 下記の場合、「更新者」に "02" を設定                              */
/*         ・異動事由コードが "01" である                                    */
/*         ・異動事由コードが "04" である                                    */
/*         ・異動事由コードが "06" であり、かつ、削除日がある                */
/*         ・異動事由コードが "10" である                                    */
/*    1.3. 下記の異動事由コードの場合、「更新者」に "03" を設定              */
/*         ・異動事由コードが "02" である                                    */
/*         ・異動事由コードが "03" である                                    */
/*         ・異動事由コードが "05" である                                    */
/*         ・異動事由コードが "06" であり、かつ、削除日がない                */
/*         ・異動事由コードが "09" である                                    */
/*   2. 下記のグローバル変数でエラーメッセージを設定する                     */
/*      ・g_szDtlMsg                                                         */
/*   3. 下記のグローバル変数で計数を参照する                                 */
/*      ・g_dCount                                                           */
/*   4. 下記のグローバル変数を関数の出力として設定する                       */
/*      ・h_BANK_NO                                                          */
/*      ・h_BANK_NAME_KN                                                     */
/*      ・h_START_DATE                                                       */
/*      ・h_END_DATE                                                         */
/*      ・h_CHANGE_NAME                                                      */
/*      ・h_LAST_UPDATE_TS                                                   */
/*      ・h_BRANCH_NO                                                        */
/*      ・h_BRANCH_NO_ADD                                                    */
/*      ・h_BRANCH_NAME                                                      */
/*      ・h_BRANCH_NAME_KN                                                   */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int setShitenRecvData( BRANCH_DATA *pData )
{
    /* データチェック用の変数 */
    char wIdo[ 3];     /* 異動事由コード */
    int  iIdo;         /* 異動事由コード */
    char wKn[33];      /* 銀行名（カナ） */
    char wDate[11];    /* 異動年月日     */
    DATE szWorkDate8;  /* 削除日         */
	int  rc;

    /* 日付チェック用の変数 */
    char szaRecvDate[9];
    char szbRecvDate[11];


    /* 金融機関コード */
    if (pData->szBankCode[0]  == 0x00 || pData->szBankCode[0] == 0x20) {
        sprintf(g_szDtlMsg, 
                "[レコードＮＯ=%d]銀行コードの設定がありません。",
                g_dCount.iRecNum);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }
    memset( h_BANK_NO, '\0', sizeof(h_BANK_NO));
    memcpy( h_BANK_NO, pData->szBankCode, sizeof(pData->szBankCode));

    /* 店舗コード */
    if (pData->szBranchCode[0]  == 0x00 || pData->szBranchCode[0] == 0x20) {
        sprintf(g_szDtlMsg, 
                "[レコードＮＯ=%d,銀行コード=%s]支店コードの設定がありません。",
                g_dCount.iRecNum,
                h_BANK_NO );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }
    memset( h_BRANCH_NO, 0x00, sizeof( h_BRANCH_NO ));
    memcpy( h_BRANCH_NO, pData->szBranchCode, sizeof( pData->szBranchCode ));

    /* 付加コード */
    if (pData->szBranchCodeAdd[0]  == 0x00 || pData->szBranchCodeAdd[0] == 0x20) {
        sprintf(g_szDtlMsg,
                "[レコードＮＯ=%d,銀行コード=%s,支店コード=%s]付加コードの設定がありません。",
                g_dCount.iRecNum,
                h_BANK_NO,
                h_BRANCH_NO);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }
    memset( h_BRANCH_NO_ADD, 0x00, sizeof( h_BRANCH_NO_ADD ));
    memcpy( h_BRANCH_NO_ADD, pData->szBranchCodeAdd, sizeof( pData->szBranchCodeAdd ));


    /* 店舗名（カナ） */
    if (pData->szBranchNameKn[0]  == 0x00 || pData->szBranchNameKn[0] == 0x20) {
        sprintf( g_szDtlMsg, 
                "[レコードＮＯ=%d,銀行コード=%s,支店コード=%s,付加コード=%s]支店名（カナ）の設定がありません。",
                 g_dCount.iRecNum, h_BANK_NO, h_BRANCH_NO, h_BRANCH_NO_ADD );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        
        return ERROR;
    }
    memset( h_BRANCH_NAME_KN, 0x00, sizeof( h_BRANCH_NAME_KN ));
    memset( wKn, 0x00, sizeof( wKn ) );
    memcpy( wKn, pData->szBranchNameKn, sizeof( pData->szBranchNameKn ));
    AP_DELSP( wKn, sizeof( pData->szBranchNameKn ));
	strcpy ( h_BRANCH_NAME_KN, wKn );

#if 0
    rc = charCheck2( wKn, h_BRANCH_NAME_KN, sizeof( h_BRANCH_NAME_KN ));
    if (rc != 0) {
        /* 変換エラー */
        sprintf(g_szDtlMsg,
                "[レコードＮＯ=%d,銀行コード=%s,支店コード=%s,付加コード=%s]支店名（カナ）全角変換エラー",
                g_dCount.iRecNum,
                h_BANK_NO,
                h_BRANCH_NO,
                h_BRANCH_NO_ADD);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }
#endif

    /* 店舗名２（漢字） */
    if (pData->szBranchName2[0] == 0x00 || pData->szBranchName2[0] == 0x20) {
        sprintf(g_szDtlMsg,
                "[レコードＮＯ=%d,銀行コード=%s,支店コード=%s,付加コード=%s]支店名２（漢字）の設定がありません。",
                g_dCount.iRecNum,
                h_BANK_NO,
                h_BRANCH_NO,
                h_BRANCH_NO_ADD);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }
    memset( h_BRANCH_NAME, 0x00, sizeof( h_BRANCH_NAME ));
    memcpy( h_BRANCH_NAME, pData->szBranchName2, sizeof( pData->szBranchName2 ));

    /* 正読店名表示 */
    if (pData->szNameType[0]  == 0x00 || pData->szNameType[0] == 0x20) {
        sprintf( g_szDtlMsg, 
                "[レコードＮＯ=%d,銀行コード=%s,支店コード=%s,付加コード=%s]正読店名表示の設定がありません。",
                 g_dCount.iRecNum, h_BANK_NO, h_BRANCH_NO, h_BRANCH_NO_ADD );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }

    /* 正読店名表示のチェック */
    if (pData->szNameType[0] != '0' && pData->szNameType[0] != '1') {
        sprintf(g_szDtlMsg, 
                "[レコードＮＯ=%d,銀行コード=%s,支店コード=%s,付加コード=%s]正読店名表示(%.*s)が正しくありません。",
                g_dCount.iRecNum,
                h_BANK_NO,
                h_BRANCH_NO,
                h_BRANCH_NO_ADD,
                2,
                pData->szNameType);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }

    /* 店舗属性表示のチェック */
    if (pData->szBranchType[0] != '0'
        && pData->szBranchType[0] != '1'
        && pData->szBranchType[0] != '2'
        && pData->szBranchType[0] != '4'
        && pData->szBranchType[0] != '8'
        && pData->szBranchType[0] != '9') {
        sprintf(g_szDtlMsg, 
                "[レコードＮＯ=%d,銀行コード=%s,支店コード=%s,付加コード=%s]店舗属性表示(%.*s)が正しくありません。",
                g_dCount.iRecNum,
                h_BANK_NO,
                h_BRANCH_NO,
                h_BRANCH_NO_ADD,
                2,
                pData->szBranchType);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }

    /* 異動年月日の必須チェック */
    if (pData->szIdoDate8.szYear[0]  == 0x00 || pData->szIdoDate8.szYear[0] == 0x20) {
        sprintf(g_szDtlMsg,
                "[レコードＮＯ=%d,銀行コード=%s,支店コード=%s,付加コード=%s]異動年月日の設定がありません。",
                g_dCount.iRecNum,
                h_BANK_NO,
                h_BRANCH_NO,
                h_BRANCH_NO_ADD);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return ERROR;
    }

    /* 異動年月日の日付チェック */
    memset( szaRecvDate, 0x00, sizeof( szaRecvDate ));
    memset( szbRecvDate, 0x00, sizeof( szbRecvDate ));
    sprintf(szaRecvDate,
            "%.*s%.*s%.*s",
            sizeof( pData->szIdoDate8.szYear  ),
            pData->szIdoDate8.szYear,
            sizeof( pData->szIdoDate8.szMonth ),
            pData->szIdoDate8.szMonth,
            sizeof( pData->szIdoDate8.szDay   ),
            pData->szIdoDate8.szDay );
    rc = convTime( szaRecvDate, szbRecvDate );
    switch (rc) {
        case 1:
            sprintf(g_szDtlMsg,
                    "[レコードＮＯ=%d,銀行コード=%s,支店コード=%s,付加コード=%s]異動年月日の設定が正しくありません。",
                    g_dCount.iRecNum,
                    h_BANK_NO,
                    h_BRANCH_NO,
                    h_BRANCH_NO_ADD);
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
            return ERROR;
        case 2:
            sprintf(g_szDtlMsg,
                    "[レコードＮＯ=%d,銀行コード=%s,支店コード=%s,付加コード=%s]異動年月日が実際の日付ではありません。",
                    g_dCount.iRecNum,
                    h_BANK_NO,
                    h_BRANCH_NO,
                    h_BRANCH_NO_ADD);
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
            return ERROR;
        default:
            break;
    }

    /* 異動事由コードのチェック */
    memset( wIdo, 0x00, sizeof( wIdo ));
    memcpy( wIdo, pData->szIdoJiyu, sizeof( pData->szIdoJiyu ));
    iIdo = atoi( wIdo );

    if (pData->szIdoJiyu[0]  == 0x00 || pData->szIdoJiyu[0] == 0x20) {
        sprintf(g_szDtlMsg, 
                "[レコードＮＯ=%d,銀行コード=%s,支店コード=%s,付加コード=%s]異動事由コードの設定がありません。",
                g_dCount.iRecNum,
                h_BANK_NO,
                h_BRANCH_NO,
                h_BRANCH_NO_ADD);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        ierrjiyu++;

        return ERROR;
    }
    else if (iIdo == 7 || iIdo == 8 || iIdo > 10 || iIdo < 0) {
        sprintf(g_szDtlMsg, 
                "[レコードＮＯ=%d,銀行コード=%s,支店コード=%s,付加コード=%s]異動事由コード(%.*s)が正しくありません。",
                g_dCount.iRecNum,
                h_BANK_NO,
                h_BRANCH_NO,
                h_BRANCH_NO_ADD,
                2,
                pData->szIdoJiyu);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        ierrjiyu++;

        return ERROR;
    }

    /* 日付の設定 */
    memset( h_START_DATE, '\0', sizeof( h_START_DATE ));
    memset( h_END_DATE,   '\0', sizeof( h_END_DATE ));

    sprintf( wDate, "%.*s-%.*s-%.*s",
             sizeof(pData->szIdoDate8.szYear  ), pData->szIdoDate8.szYear,
             sizeof(pData->szIdoDate8.szMonth ), pData->szIdoDate8.szMonth,
             sizeof(pData->szIdoDate8.szDay   ), pData->szIdoDate8.szDay );

    memset( h_CHANGE_NAME, 0x00, sizeof( h_CHANGE_NAME ));

    jcount[iIdo]++;
    switch (iIdo) {
        case 0:         /* 新規登録 */
            memcpy( h_START_DATE,  "0001-01-01", sizeof( h_START_DATE )-1 );
            memcpy( h_END_DATE,    "9999-12-31", sizeof( h_END_DATE )-1 );
            memcpy( h_CHANGE_NAME, "01",         sizeof( h_CHANGE_NAME )-1 );
            break;
        case 1:         /* 新設 */
            memcpy( h_START_DATE,  wDate,        sizeof( h_START_DATE )-1 );
            memcpy( h_END_DATE,    "9999-12-31", sizeof( h_END_DATE )-1 );
            memcpy( h_CHANGE_NAME, "02",         sizeof( h_CHANGE_NAME )-1 );
            break;
        case 2:         /* 廃止 */
            memcpy( h_START_DATE, "0001-01-01", sizeof( h_START_DATE )-1 );
            ConvAfter1Day( h_END_DATE, pData->szIdoDate8.szYear );
            memcpy( h_CHANGE_NAME, "03", sizeof( h_CHANGE_NAME )-1 );
            break;
        case 3:         /* 廃止継承 */
            memcpy( h_START_DATE, "0001-01-01", sizeof( h_START_DATE )-1 );
            ConvAfter1Day( h_END_DATE, pData->szIdoDate8.szYear );
            memcpy( h_CHANGE_NAME, "03", sizeof( h_CHANGE_NAME )-1 );
            break;
        case 4:         /* 金融機関名称・コード変更（変更後） */
            memcpy( h_START_DATE,  wDate,        sizeof( h_START_DATE )-1 );
            memcpy( h_END_DATE,    "9999-12-31", sizeof( h_END_DATE )-1 );
            memcpy( h_CHANGE_NAME, "02",         sizeof( h_CHANGE_NAME )-1 );
            break;
        case 5:         /* 金融機関名称・コード変更（変更前並存） */
            memcpy( h_START_DATE,  "0001-01-01", sizeof( h_START_DATE )-1 );
            memcpy( h_END_DATE,    wDate,        sizeof( h_END_DATE )-1 );
            memcpy( h_CHANGE_NAME, "03",         sizeof( h_CHANGE_NAME )-1 );
            break;
        case 6:         /* その他変更 */
            memset( szWorkDate8.szYear, ' ', sizeof( szWorkDate8 ));
            rc = strncmp(szWorkDate8.szYear,
                         pData->szDelDate8.szYear,
                         sizeof( pData->szDelDate8.szYear )
                         + sizeof( pData->szDelDate8.szMonth )
                         + sizeof( pData->szDelDate8.szDay ));
            if (rc == 0) {
                memcpy( h_START_DATE,  wDate,        sizeof( h_START_DATE )-1 );
                memcpy( h_END_DATE,    "9999-12-31", sizeof( h_END_DATE )-1 );
                memcpy( h_CHANGE_NAME, "02",         sizeof( h_CHANGE_NAME )-1 );
            }
            else{
                memcpy( h_START_DATE,  "0001-01-01", sizeof( h_START_DATE )-1 );
                memcpy( h_END_DATE,    wDate,        sizeof( h_END_DATE )-1 );
                memcpy( h_CHANGE_NAME, "03",         sizeof( h_CHANGE_NAME )-1 );
            }
            break;
        case 9:         /* 営業譲渡（譲渡元） */
            memcpy( h_START_DATE,  "0001-01-01", sizeof( h_START_DATE )-1 );
            memcpy( h_END_DATE,    wDate,        sizeof( h_END_DATE )-1 );
            memcpy( h_CHANGE_NAME, "03",         sizeof( h_CHANGE_NAME )-1 );
            break;
        case 10:        /* 営業譲渡（譲渡先） */
            memcpy( h_START_DATE,  wDate,        sizeof( h_START_DATE )-1 );
            memcpy( h_END_DATE,    "9999-12-31", sizeof( h_END_DATE )-1 );
            memcpy( h_CHANGE_NAME, "02",         sizeof( h_CHANGE_NAME )-1 );
            break;
        default:
            sprintf(g_szDtlMsg, 
                    "[レコードＮＯ=%d,銀行コード=%s,支店コード=%s,付加コード=%s]異動事由コード(%.*s)が正しくありません。",
                    g_dCount.iRecNum,
                    h_BANK_NO,
                    h_BRANCH_NO,
                    h_BRANCH_NO_ADD,
                    2,
                    pData->szIdoJiyu);
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
            return ERROR;
            break;
    } /* switch-end */

     /* 改行項目チェック */
    if (pData->szKaigyou[0] != 0x0a) {
        sprintf(g_szDtlMsg, 
                "[レコードＮＯ=%d]改行コードの設定がありません。",
                g_dCount.iRecNum );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        
        return ERROR;
    }


    return NORMAL;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*   static int insertShitenTables( VOID )                                   */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*   支店テーブルへの挿入                                                    */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files :                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL       : 正常終了                                                 */
/*   ERROR        : 異常終了                                                 */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 金融機関データを銀行テーブルへ挿入する                               */
/*                                                                           */
/* Considerations:                                                           */
/*   1. 下記のグローバル変数でエラーメッセージを設定する                     */
/*      ・g_szDtlMsg                                                         */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int insertShitenTables( VOID )
{

	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );

	strcpy ( sqlcmd , "begin ");
    strcat ( sqlcmd , "INSERT INTO " );
	sprintf( g_work, "%s ", g_BranchTbName );
    strcat ( sqlcmd, g_work);

    strcat ( sqlcmd , "(銀行番号, " );
    strcat ( sqlcmd , "銀行名カナ, " );
    strcat ( sqlcmd , "店番, " );
    strcat ( sqlcmd , "店名漢字, " );
    strcat ( sqlcmd , "店名カナ, " );
    strcat ( sqlcmd , "適用開始年月日, " );
    strcat ( sqlcmd , "適用終了年月日, " );
    strcat ( sqlcmd , "登録日, " );
    strcat ( sqlcmd , "登録者, " );
    strcat ( sqlcmd , "付加コード " );
    strcat ( sqlcmd , ") " );
    strcat ( sqlcmd , "VALUES " );
    strcat ( sqlcmd , "(:h_BANK_NO, " );
    strcat ( sqlcmd , "' ', " );
    strcat ( sqlcmd , ":h_BRANCH_NO, " );
    strcat ( sqlcmd , ":h_BRANCH_NAME, " );
    strcat ( sqlcmd , ":h_BRANCH_NAME_KN, " );
    strcat ( sqlcmd , "TO_DATE(:h_START_DATE,'YYYY-MM-DD'), " );
    strcat ( sqlcmd , "TO_DATE(:h_END_DATE,'YYYY-MM-DD'), " );
    strcat ( sqlcmd , "SYSDATE, " );
    strcat ( sqlcmd , ":h_CHANGE_NAME, " );
    strcat ( sqlcmd , ":h_BRANCH_NO_ADD " );
    strcat ( sqlcmd , "); " );
	strcat ( sqlcmd , "end; ");

	/*printf("sqlcmd=[%s]\n",sqlcmd);*/
	
	/* 動的SQL-SQL文の解析 */
	G_POSITION = __LINE__;
	EXEC SQL PREPARE my_stmt04 FROM :sqlcmd;
	if (sqlca.sqlcode < 0) {
        sprintf( g_szDtlMsg,
                "[銀行コード=%s,支店コード=%s] 支店テーブルの挿入に失敗しました。(CODE=%ld)",
                h_BANK_NO,h_BRANCH_NO,
                sqlca.sqlcode);
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt04", NULL, NULL, G_STATION);

        return ERROR;
    }

	/* 銀行データの挿入実行 */
	G_POSITION = __LINE__;
	EXEC SQL EXECUTE my_stmt04 
	USING	:h_BANK_NO,
            :h_BRANCH_NO,
			:h_BRANCH_NAME,
			:h_BRANCH_NAME_KN,
            :h_START_DATE,
            :h_END_DATE,
            :h_CHANGE_NAME,
            :h_BRANCH_NO_ADD;

    if (sqlca.sqlcode < 0) {
        sprintf(g_szDtlMsg,
                "[銀行コード=%s,支店コード=%s] 支店テーブルの挿入に失敗しました。(CODE=%ld)",
                h_BANK_NO,
                h_BRANCH_NO,
                sqlca.sqlcode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }


    return NORMAL;
}




/*****************************************************************************/
/* Function Name:                                                            */
/*   static int cursorGinkoDataOpen( VOID )                                  */
/*                                                                           */
/* Description:                                                              */
/*   マージ対象データの抽出                                                  */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 仮登録後、銀行テーブルから金融機関のマージ対象データを抽出する       */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int cursorGinkoDataOpen( VOID )
{
 
	/* カーソル宣言SQL */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );

	strcpy ( sqlcmd, "SELECT ");
	strcat ( sqlcmd, "銀行番号 ");
	strcat ( sqlcmd, "FROM ");
	sprintf( g_work, "%s ", g_BankTBbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "GROUP BY 銀行番号 ");
	strcat ( sqlcmd, "HAVING COUNT(銀行番号) >= 2  ");

	G_POSITION = __LINE__;
	EXEC SQL PREPARE my_stmt05 FROM :sqlcmd;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "マージ対象データの抽出 (銀行)でエラーが発生しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt05", NULL, NULL, G_STATION);

		return ERROR;
	}

	G_POSITION = __LINE__;
	EXEC SQL DECLARE CUR_01 CURSOR FOR my_stmt05;
    if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
				"カーソル(CUR_01) DECLARE エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }

    /* カーソル・オープン */
	G_POSITION = __LINE__;
    EXEC SQL OPEN CUR_01;
    if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
				"カーソル(CUR_01)オープン・エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }


    return NORMAL;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*   static int updateGinkoRecvData( VOID )                                  */
/*                                                                           */
/* Description:                                                              */
/*   銀行テーブルのマージ                                                    */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. マージ対象とする金融機関データを抽出                                 */
/*   2. 各金融機関毎の有効期間をマージ                                       */
/*   3. マージ後の重複金融機関データを削除                                   */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int updateGinkoRecvData( VOID )
{
    int   rc = NORMAL;


    /* マージ対象データの抽出 */
    rc = cursorGinkoDataOpen();
    if (rc != NORMAL) {
        return rc;
    }


    while (1) {

        /* マージ対象データに対して、銀行番号毎にマージを実行 */
        rc = readGinkoData();
        if (rc != NORMAL) {
            return rc;
        }

        if (sqlca.sqlcode == ORA_NOF) {
            break;
        }

        rc = mergeGinkoData();
        if (rc != NORMAL) {
            return rc;
        }

    }

    /* カーソルクローズ(CUR_01) */
	G_POSITION = __LINE__;
    EXEC SQL CLOSE CUR_01;


    /* 重複金融機関データの削除 */
    rc = deleteDuplicatedGinkoData();
    if (rc != NORMAL) {
        return rc;
    }



    return NORMAL;
}
/*****************************************************************************/
/* Function Name:                                                            */
/*   static int readGinkoData( VOID )                                        */
/*                                                                           */
/* Description:                                                              */
/*   複数データのある銀行番号を取得                                          */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 金融機関のマージ対象データの銀行コードを取得する                     */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int readGinkoData( VOID )
{


    /* ホスト変数の初期化 */
    memset( h_BANK_NO, 0x00, sizeof( h_BANK_NO ));

	G_POSITION = __LINE__;
    EXEC SQL FETCH CUR_01
        INTO
            :h_BANK_NO;

    /* エラーチェック */
    if ( sqlca.sqlcode < 0 && sqlca.sqlcode != ORA_NOF ) {
		send_err ( m$emb_error, sqlca.sqlcode, "マージ対象データの取得(銀行)でエラーが発生しました", NULL, NULL, G_STATION);

        return ERROR;
    }



    return NORMAL;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*   static int cursorAbolitionGinkoDataOpen( VOID )                         */
/*                                                                           */
/* Description:                                                              */
/*   マージ対象データから廃止データの取得                                    */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 金融機関のマージ対象データから、廃止データを取得する                 */
/*                                                                           */
/* Considerations:                                                           */
/*   1. カラム「更新者」に格納する異動事由コードが "03" の場合、             */
/*      廃止データと判定する                                                 */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int cursorAbolitionGinkoDataOpen( VOID )
{
	/* カーソル宣言SQL */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );

	strcpy ( sqlcmd, "SELECT ");
	strcat ( sqlcmd, "適用開始年月日, ");
	strcat ( sqlcmd, "適用終了年月日 ");
	strcat ( sqlcmd, "FROM ");
	sprintf( g_work, "%s ", g_BankTBbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "WHERE 銀行番号 = ");
	sprintf( g_work, "'%s' ", h_BANK_NO );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "AND  ");
	strcat ( sqlcmd, "登録者 = '03' ");

	/*printf("sqlcmd=[%s]\n",sqlcmd);*/

	G_POSITION = __LINE__;
	EXEC SQL PREPARE my_stmt06 FROM :sqlcmd;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "廃止データの取得(銀行)でエラーが発生しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt06", NULL, NULL, G_STATION);

		return ERROR;
	}

	G_POSITION = __LINE__;
	EXEC SQL DECLARE CUR_02 CURSOR FOR my_stmt06;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
				"カーソル(CUR_02) DECLARE エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);

		return ERROR;
	}

    /* カーソル・オープン */
	G_POSITION = __LINE__;
    EXEC SQL OPEN CUR_02;
    if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
				"カーソル(CUR_02)オープン・エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }

    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*   static int cursorEntryGinkoDataOpen( VOID )                             */
/*                                                                           */
/* Description:                                                              */
/*   マージ対象データから登録データの取得                                    */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 金融機関のマージ対象データから、登録データを取得する                 */
/*                                                                           */
/* Considerations:                                                           */
/*   1. カラム「更新者」に格納する異動事由コードが "01" または "02" の場合、 */
/*      登録データと判定する                                                 */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int cursorEntryGinkoDataOpen( VOID )
{
	
	/* カーソル宣言SQL */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );

	strcpy ( sqlcmd, "SELECT ");
	strcat ( sqlcmd, "適用開始年月日, ");
	strcat ( sqlcmd, "適用終了年月日 ");
	strcat ( sqlcmd, "FROM ");
	sprintf( g_work, "%s ", g_BankTBbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "WHERE 銀行番号 = ");
	sprintf( g_work, "'%s' ", h_BANK_NO );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "AND  ");
	strcat ( sqlcmd, "(登録者  = '01' OR 登録者 = '02') ");

	/*printf("sqlcmd=[%s] CUR_03\n",sqlcmd);*/

	G_POSITION = __LINE__;
	EXEC SQL PREPARE my_stmt08 FROM :sqlcmd;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "登録データの取得(銀行)でエラーが発生しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt08", NULL, NULL, G_STATION);

		return ERROR;
	}

	G_POSITION = __LINE__;
	EXEC SQL DECLARE CUR_03 CURSOR FOR my_stmt08;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
				"カーソル(CUR_03) DECLARE エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);

		return ERROR;
	}

	/* カーソル・オープン */
	G_POSITION = __LINE__;
	EXEC SQL OPEN CUR_03;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
				"カーソル(CUR_03)オープン・エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);

		return ERROR;
	}

	return NORMAL;

}



/*****************************************************************************/
/* Function Name:                                                            */
/*   static int mergeGinkoData( VOID )                                       */
/*                                                                           */
/* Description:                                                              */
/*   銀行テーブルのマージ実施                                                */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 金融機関の廃止データを抽出する                                       */
/*   2. 各廃止データ毎に廃止日のマージを行う                                 */
/*   3. 金融機関の登録データを抽出する                                       */
/*   4. 各登録データ毎に登録日のマージを行う                                 */
/*                                                                           */
/* Considerations:                                                           */
/*   1. データの分類（廃止データ・登録データ）は、カラム「更新者」           */
/*      （仮登録時に異動事由コードを臨時に格納）によって判定する             */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int mergeGinkoData( VOID )
{
    int rc = NORMAL;



    /* 廃止データの抽出 */
    rc = cursorAbolitionGinkoDataOpen();
    if (rc != NORMAL) {
        return rc;
    }


    while (1) {

        /* 各廃止データ毎のマージ */
        rc = readAbolitionGinkoData();
        if (rc != NORMAL) {
            return rc;
        }
        if ( sqlca.sqlcode == ORA_NOF ) {
            break;
        }

        rc = updateEndDateOfEntryGinkoData();
        if (rc != NORMAL) {
            return rc;
        }


    }

    /* カーソルクローズ(CUR_02) */
	G_POSITION = __LINE__;
	EXEC SQL CLOSE CUR_02;



    /* 登録データの抽出 */
    rc = cursorEntryGinkoDataOpen();
    if (rc != NORMAL) {
        return rc;
    }


    while (1) {

        /* 各登録データ毎のマージ */
        rc = readEntryGinkoData();
        if (rc != NORMAL) {
            return rc;
        }

        if ( sqlca.sqlcode == ORA_NOF ) {
            break;
        }

        rc = updateStartDateOfAbolitionGinkoData();
        if (rc != NORMAL ) {
            return rc;
        }

    }

    /* カーソルクローズ(CUR_03) */
	G_POSITION = __LINE__;
    EXEC SQL CLOSE CUR_03;


    return NORMAL;
}



/*****************************************************************************/
/* Function Name:                                                            */
/*   static int readAbolitionGinkoData( VOID )                               */
/*                                                                           */
/* Description:                                                              */
/*   銀行テーブルから廃止データを取得                                        */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 金融機関の廃止データの適用開始日と適用終了日を取得する               */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int readAbolitionGinkoData( VOID )
{


    /* ホスト変数の初期化 */
    memset( h_START_DATE, 0x00, sizeof( h_START_DATE ));
    memset( h_END_DATE, 0x00, sizeof( h_END_DATE ));

    EXEC SQL FETCH CUR_02
        INTO
			:h_START_DATE,
            :h_END_DATE;


    /* エラーチェック */
    if ( sqlca.sqlcode < 0 && sqlca.sqlcode != ORA_NOF ) {
		send_err ( m$emb_error, sqlca.sqlcode, "廃止データを取得(銀行)に失敗しました", NULL, NULL, G_STATION);

        return ERROR;
    }


    return NORMAL;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*   static int updateEndDateOfEntryGinkoData( VOID )                        */
/*                                                                           */
/* Description:                                                              */
/*   銀行の初期登録・登録データに対して、適用終了日を更新                    */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 同一銀行に対して、初期登録データ・登録データの適用終了日を           */
/*      廃止データの適用終了日に更新する                                     */
/*                                                                           */
/* Considerations:                                                           */
/*   1. カラム「更新者」に格納する異動事由コードが "01" の場合、             */
/*      初期登録データと判定する                                             */
/*   2. カラム「更新者」に格納する異動事由コードが "02" の場合、             */
/*      登録データと判定する                                                 */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int updateEndDateOfEntryGinkoData( VOID )
{

	/* 適用終了日の更新  */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );
	strcpy ( sqlcmd, "begin ");
	strcat ( sqlcmd, "UPDATE ");
	sprintf( g_work, "%s ", g_BankTBbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "SET ");
	strcat ( sqlcmd, "適用終了年月日	= :h_END_DATE, ");
	strcat ( sqlcmd, "登録日			= SYSDATE ");
	strcat ( sqlcmd, "WHERE ");
	strcat ( sqlcmd, "銀行番号        = :h_BANK_NO ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, " (登録者 = '01' OR 登録者 = '02') ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, "適用開始年月日 < :h_END_DATE ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, "適用終了年月日 > :h_END_DATE; ");
	strcat ( sqlcmd, "end; ");



	/* 動的SQL-SQL文の解析 */
	G_POSITION = __LINE__;
	EXEC SQL PREPARE my_stmt07 FROM :sqlcmd;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "適用終了日の更新(銀行)に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt07", NULL, NULL, G_STATION);

		return ERROR;
	}

	/* 適用終了日の更新 */
	G_POSITION = __LINE__;
	EXEC SQL EXECUTE my_stmt07 
		USING	:h_END_DATE,
				:h_BANK_NO;

	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "適用終了日の更新(銀行)に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION);

		return ERROR;
	}


    return NORMAL;
}



/*****************************************************************************/
/* Function Name:                                                            */
/*   static int readEntryGinkoData( VOID )                                   */
/*                                                                           */
/* Description:                                                              */
/*   銀行テーブルから登録データを取得                                        */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 金融機関の登録データの適用開始日と適用終了日を取得する               */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int readEntryGinkoData( VOID )
{
    /* ホスト変数の初期化 */
    memset( h_START_DATE, 0x00, sizeof( h_START_DATE ));
    memset( h_END_DATE, 0x00, sizeof( h_END_DATE ));

	G_POSITION = __LINE__;
	EXEC SQL FETCH CUR_03
        INTO
			:h_START_DATE,
			:h_END_DATE;
	
	/* エラーチェック */
	if ( sqlca.sqlcode < 0 && sqlca.sqlcode != ORA_NOF ) {
		send_err ( m$emb_error, sqlca.sqlcode, "登録データの取得(銀行)に失敗しました", NULL, NULL, G_STATION);

		return ERROR;
	}



    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*   static int updateStartDateOfAbolitionGinkoData( VOID )                  */
/*                                                                           */
/* Description:                                                              */
/*   銀行の廃止データに対して、適用開始日を更新                              */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 同一銀行に対して、廃止データの適用開始日を                           */
/*      登録データの適用開始日に更新する                                     */
/*                                                                           */
/* Considerations:                                                           */
/*   1. カラム「更新者」に格納する異動事由コードが "03" の場合、             */
/*      廃止データと判定する                                                 */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int updateStartDateOfAbolitionGinkoData( VOID )
{


	/*printf("UPDATE2\n");*/

	/* 適用開始年月日の更新  */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );
	strcpy ( sqlcmd, "begin ");
	strcat ( sqlcmd, "UPDATE ");
	sprintf( g_work, "%s ", g_BankTBbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "SET ");
	strcat ( sqlcmd, "適用開始年月日     = :h_START_DATE,  ");
	strcat ( sqlcmd, "登録日			= SYSDATE ");
	strcat ( sqlcmd, "WHERE ");
	strcat ( sqlcmd, "銀行番号        = :h_BANK_NO ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, " 登録者  = '03' ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, "適用開始年月日 < :h_START_DATE ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, "適用終了年月日 > :h_START_DATE; ");
	strcat ( sqlcmd, "end; ");

	/* 動的SQL-SQL文の解析 */
	G_POSITION = __LINE__;
	EXEC SQL PREPARE my_stmt09 FROM :sqlcmd;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "適用開始日の更新(銀行)1に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt09", NULL, NULL, G_STATION);

		return ERROR;
	}


	/* 適用開始日の更新 */
	G_POSITION = __LINE__;
	EXEC SQL EXECUTE my_stmt09 
		USING	:h_START_DATE,
				:h_BANK_NO;

	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "適用開始日の更新(銀行)2に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION);

		return ERROR;
	}


    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*   static int deleteDuplicatedGinkoData( VOID )                            */
/*                                                                           */
/* Description:                                                              */
/*   重複金融機関データの削除                                                */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. マージ後に、下記のキーが全て同じデータが複数件登録されている場合、   */
/*      重複のデータを削除し、1件のみ残る                                    */
/*      キー：「銀行コード」、「適用開始日」、「適用終了日」                 */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int deleteDuplicatedGinkoData( VOID )
{
	/*
    EXEC SQL DELETE
       FROM
           (SELECT row_number() over(PARTITION BY BANK_NO, START_DATE, END_DATE) AS rn FROM GINKO_T)
       WHERE
           1 < rn;
    */

	/* SQL */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );

	strcpy ( sqlcmd, "DELETE ");
	strcat ( sqlcmd, "FROM ");
	sprintf( g_work, "%s ", g_BankTBbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM ");
	sprintf( g_work, "%s ", g_BankTBbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "GROUP BY 銀行番号,適用開始年月日,適用終了年月日) ");

	G_POSITION = __LINE__;
	EXEC SQL EXECUTE IMMEDIATE :sqlcmd;
	if( sqlca.sqlcode < 0 ){
		sprintf( g_szDtlMsg,
                    "重複銀行データの削除に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION);

		return ERROR;
	}




#if 0
	/* エラーチェック */
    if ( sqlca.sqlcode < 0 && sqlca.sqlcode != ORA_NOF ) {
        sprintf(g_szDtlMsg,
                "重複銀行データの削除に失敗しました。(sqlca.sqlcode=%d)",
                sqlca.sqlcode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }

#endif

    return NORMAL;
}


/*****************************************************************************/
/*                                                                           */
/* Function Name:                                                            */
/*   static int cursorShitenDataOpen( VOID )                                 */
/*                                                                           */
/* Description:                                                              */
/*   支店テーブルからマージ対象データの抽出                                  */
/*                                                                           */
/* Arguments:                                                                */
/*                                                                           */
/* Name            Type/Length  I/O  Content                                 */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 仮登録後、支店テーブルから支店のマージ対象データを抽出する           */
/*                                                                           */
/* Considerations:                                                           */
/*   1. 下記のキーが全て同じデータは、同一支店と判定する                     */
/*      キー：「銀行コード」、「支店コード」、「支店付加コード」             */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int cursorShitenDataOpen( VOID )
{



	/* カーソル宣言SQL */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );

	strcpy ( sqlcmd, "SELECT ");
	strcat ( sqlcmd, "銀行番号 || 店番 || 付加コード ");
	strcat ( sqlcmd, "FROM ");
	sprintf( g_work, "%s ", g_BranchTbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "GROUP BY 銀行番号 || 店番 || 付加コード ");
	strcat ( sqlcmd, "HAVING COUNT(銀行番号 || 店番 ||付加コード) >= 2  ");


	G_POSITION = __LINE__;
	EXEC SQL PREPARE my_stmt11 FROM :sqlcmd;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "マージ対象データの抽出 (支店)でエラーが発生しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt11", NULL, NULL, G_STATION);

		return ERROR;
	}

	G_POSITION = __LINE__;
	EXEC SQL DECLARE CUR_04 CURSOR FOR my_stmt11;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
				"カーソル(CUR_04) DECLARE エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);

		return ERROR;
	}

	/* カーソル・オープン */
	G_POSITION = __LINE__;
	EXEC SQL OPEN CUR_04;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
				"カーソル(CUR_04)オープン・エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);

		return ERROR;
	}

	return NORMAL;

}


/*****************************************************************************/
/*                                                                           */
/* Function Name:                                                            */
/*   static int cursorAbolitionShitenDataOpen( VOID )                        */
/*                                                                           */
/* Description:                                                              */
/*   支店のマージ対象データから廃止データの取得                              */
/*                                                                           */
/* Arguments:                                                                */
/*                                                                           */
/* Name            Type/Length  I/O  Content                                 */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 支店のマージ対象データから、廃止データを取得する                     */
/*                                                                           */
/* Considerations:                                                           */
/*   1. カラム「更新者」に格納する異動事由コードが "03" の場合、             */
/*      廃止データと判定する                                                 */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int cursorAbolitionShitenDataOpen( VOID )
{

	/* カーソル宣言SQL */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );

	strcpy ( sqlcmd, "SELECT ");
	strcat ( sqlcmd, "適用開始年月日, ");
	strcat ( sqlcmd, "適用終了年月日 ");
	strcat ( sqlcmd, "FROM ");
	sprintf( g_work, "%s ", g_BranchTbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "WHERE 銀行番号 = ");
	sprintf( g_work, "'%s' ", h_BANK_NO );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "AND 店番 = ");
	sprintf( g_work, "'%s' ", h_BRANCH_NO );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "AND 付加コード = ");
	sprintf( g_work, "'%s' ", h_BRANCH_NO_ADD );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "AND  ");
	strcat ( sqlcmd, "登録者 = '03' ");

	/*printf("sqlcmd=[%s]\n",sqlcmd);*/


	G_POSITION = __LINE__;
	EXEC SQL PREPARE my_stmt12 FROM :sqlcmd;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "廃止データの取得(支店)でエラーが発生しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt12", NULL, NULL, G_STATION);

		return ERROR;
	}

	G_POSITION = __LINE__;
	EXEC SQL DECLARE CUR_05 CURSOR FOR my_stmt12;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
				"カーソル(CUR_05) DECLARE エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);

		return ERROR;
	}

	/* カーソル・オープン */
	G_POSITION = __LINE__;
	EXEC SQL OPEN CUR_05;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
				"カーソル(CUR_05)オープン・エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);

		return ERROR;
	}

	return NORMAL;

}


/*****************************************************************************/
/*                                                                           */
/* Function Name:                                                            */
/*   static int cursorEntryShitenDataOpen( VOID )                            */
/*                                                                           */
/* Description:                                                              */
/*   マージ対象データから登録データの取得                                    */
/*                                                                           */
/* Arguments:                                                                */
/*                                                                           */
/* Name            Type/Length  I/O  Content                                 */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 支店のマージ対象データから、登録データを取得する                     */
/*                                                                           */
/* Considerations:                                                           */
/*   1. カラム「更新者」に格納する異動事由コードが "01" または "02" の場合、 */
/*      登録データと判定する                                                 */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int cursorEntryShitenDataOpen( VOID )
{

	/* カーソル宣言SQL */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );

	strcpy ( sqlcmd, "SELECT ");
	strcat ( sqlcmd, "適用開始年月日, ");
	strcat ( sqlcmd, "適用終了年月日 ");
	strcat ( sqlcmd, "FROM ");
	sprintf( g_work, "%s ", g_BranchTbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "WHERE 銀行番号 = ");
	sprintf( g_work, "'%s' ", h_BANK_NO );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "AND 店番 = ");
	sprintf( g_work, "'%s' ", h_BRANCH_NO );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "AND 付加コード = ");
	sprintf( g_work, "'%s' ", h_BRANCH_NO_ADD );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "AND  ");
	strcat ( sqlcmd, "(登録者  = '01' OR 登録者 = '02') ");

	/*printf("sqlcmd=[%s] CUR_06\n",sqlcmd);*/

	G_POSITION = __LINE__;
	EXEC SQL PREPARE my_stmt14 FROM :sqlcmd;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "登録データの取得(支店)でエラーが発生しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt14", NULL, NULL, G_STATION);

		return ERROR;
	}

	G_POSITION = __LINE__;
	EXEC SQL DECLARE CUR_06 CURSOR FOR my_stmt14;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
				"カーソル(CUR_06) DECLARE エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);

		return ERROR;
	}

	/* カーソル・オープン */
	G_POSITION = __LINE__;
	EXEC SQL OPEN CUR_06;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
				"カーソル(CUR_06)オープン・エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);

		return ERROR;
	}

	return NORMAL;

}


/*****************************************************************************/
/*                                                                           */
/* Function Name:                                                            */
/*   static int readShitenData( VOID )                                       */
/*                                                                           */
/* Description:                                                              */
/*   複数データのある銀行番号＆支店番号＆付加コードを取得                    */
/*                                                                           */
/* Arguments:                                                                */
/*                                                                           */
/* Name            Type/Length  I/O  Content                                 */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 支店のマージ対象データの銀行番号＆支店番号＆付加コードを取得する     */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int readShitenData( VOID )
{


    /* ホスト変数の初期化 */
    memset( h_BANK_NO       , 0x00, sizeof( h_BANK_NO ));
    memset( h_BRANCH_NO     , 0x00, sizeof( h_BRANCH_NO ));
    memset( h_BRANCH_NO_ADD , 0x00, sizeof( h_BRANCH_NO_ADD ));
    memset( h_BANK_BRANCH_NO, 0x00, sizeof( h_BANK_BRANCH_NO ));

    EXEC SQL FETCH CUR_04
        INTO
			:h_BANK_BRANCH_NO
			;


	/* エラーチェック */
	if ( sqlca.sqlcode < 0 && sqlca.sqlcode != ORA_NOF ) {
		send_err ( m$emb_error, sqlca.sqlcode, "マージ対象データの取得(支店)でエラーが発生しました", NULL, NULL, G_STATION);

		return ERROR;
	}


	/* 取得した内容から、銀行コード、支店コード、支店付加コードを分割して取得する */
	strncpy(h_BANK_NO      , h_BANK_BRANCH_NO    , sizeof( h_BANK_NO )-1 );
	strncpy(h_BRANCH_NO    , h_BANK_BRANCH_NO + 4, sizeof( h_BRANCH_NO )-1 );
	strncpy(h_BRANCH_NO_ADD, h_BANK_BRANCH_NO + 7, sizeof( h_BRANCH_NO_ADD )-1 );


	return NORMAL;

}


/*****************************************************************************/
/*                                                                           */
/* Function Name:                                                            */
/*   static int readAbolitionShitenData( VOID )                              */
/*                                                                           */
/* Description:                                                              */
/*   支店テーブルから廃止データを取得                                        */
/*                                                                           */
/* Arguments:                                                                */
/*                                                                           */
/* Name            Type/Length  I/O  Content                                 */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 支店の廃止データの適用開始日と適用終了日を取得する                   */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int readAbolitionShitenData( VOID )
{


    /* ホスト変数の初期化 */
    memset( h_START_DATE, 0x00, sizeof( h_START_DATE ));
    memset( h_END_DATE  , 0x00, sizeof( h_END_DATE ));

    EXEC SQL FETCH CUR_05
        intO
            :h_START_DATE,
            :h_END_DATE;

	/* エラーチェック */
	if ( sqlca.sqlcode < 0 && sqlca.sqlcode != ORA_NOF ) {
		send_err ( m$emb_error, sqlca.sqlcode, "廃止データを取得(支店)に失敗しました", NULL, NULL, G_STATION);

		return ERROR;
	}

    return NORMAL;
}


/*****************************************************************************/
/*                                                                           */
/* Function Name:                                                            */
/*   static int readEntryShitenData( VOID )                                  */
/*                                                                           */
/* Description:                                                              */
/*   支店テーブルから登録データを取得                                        */
/*                                                                           */
/* Arguments:                                                                */
/*                                                                           */
/* Name            Type/Length  I/O  Content                                 */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 支店の登録データの適用開始日と適用終了日を取得する                   */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int readEntryShitenData( VOID )
{


    /* ホスト変数の初期化 */
    memset( h_START_DATE, 0x00, sizeof( h_START_DATE ));
    memset( h_END_DATE  , 0x00, sizeof( h_END_DATE ));

    EXEC SQL FETCH CUR_06
        intO
            :h_START_DATE,
            :h_END_DATE;

	/* エラーチェック */
	if ( sqlca.sqlcode < 0 && sqlca.sqlcode != ORA_NOF ) {
		send_err ( m$emb_error, sqlca.sqlcode, "登録データの取得(支店)に失敗しました", NULL, NULL, G_STATION);

		return ERROR;
	}


    return NORMAL;
}



/*****************************************************************************/
/* Function Name:                                                            */
/*   static int updateEndDateOfEntryShitenData( VOID )                       */
/*                                                                           */
/* Description:                                                              */
/*   支店の初期登録・登録データに対して、適用終了日を更新                    */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 同一支店に対して、初期登録データ・登録データの適用終了日を           */
/*      廃止データの適用終了日に更新する                                     */
/*                                                                           */
/* Considerations:                                                           */
/*   1. カラム「更新者」に格納する異動事由コードが "01" の場合、             */
/*      初期登録データと判定する                                             */
/*   2. カラム「更新者」に格納する異動事由コードが "02" の場合、             */
/*      登録データと判定する                                                 */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int updateEndDateOfEntryShitenData( VOID )
{

	/* 適用終了日の更新  */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );
	strcpy ( sqlcmd, "begin ");
	strcat ( sqlcmd, "UPDATE ");
	sprintf( g_work, "%s ", g_BranchTbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "SET ");
	strcat ( sqlcmd, "適用終了年月日 = :h_END_DATE, ");
	strcat ( sqlcmd, "登録日 = SYSDATE ");
	strcat ( sqlcmd, "WHERE ");
	strcat ( sqlcmd, "銀行番号 = :h_BANK_NO ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, "店番 = :h_BRANCH_NO ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, "付加コード = :h_BRANCH_NO_ADD ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, " (登録者 = '01' OR 登録者 = '02') ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, "適用開始年月日 < :h_END_DATE ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, "適用終了年月日 > :h_END_DATE; ");
	strcat ( sqlcmd, "end; ");

	/*
	printf("sqlcmd=[%s]\n",sqlcmd);

	printf("h_BANK_NO=[%s] ",h_BANK_NO);
	printf("h_BRANCH_NO=[%s] ",h_BRANCH_NO);
	printf("h_BRANCH_NO_ADD=[%s]\n",h_BRANCH_NO_ADD);
	printf("h_END_DATE=[%s]\n",h_END_DATE);
	*/


	/* 動的SQL-SQL文の解析 */
	G_POSITION = __LINE__;
	EXEC SQL PREPARE my_stmt13 FROM :sqlcmd;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "適用終了日の更新(支店)に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt07", NULL, NULL, G_STATION);

		return ERROR;
	}

	/* 適用終了日の更新 */
	G_POSITION = __LINE__;
	EXEC SQL EXECUTE my_stmt13 
		USING	:h_END_DATE,
				:h_BANK_NO,
				:h_BRANCH_NO,
				:h_BRANCH_NO_ADD;

	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "適用終了日の更新(支店)に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION);

		return ERROR;
	}


	return NORMAL;

}

/*****************************************************************************/
/* Function Name:                                                            */
/*   static int updateStartDateOfAbolitionShitenData( VOID )                 */
/*                                                                           */
/* Description:                                                              */
/*   支店の廃止データに対して、適用開始日を更新                              */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 同一支店に対して、廃止データの適用開始日を                           */
/*      登録データの適用開始日に更新する                                     */
/*                                                                           */
/* Considerations:                                                           */
/*   1. カラム「更新者」に格納する異動事由コードが "03" の場合、             */
/*      廃止データと判定する                                                 */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int updateStartDateOfAbolitionShitenData( VOID )
{


/*
    EXEC SQL UPDATE TMB_支店テストB
          SET 
            適用開始年月日  = :h_START_DATE,
            登録日 = SYSDATE 
          WHERE
            銀行番号        = :h_BANK_NO
          AND
            店番      = :h_BRANCH_NO
          AND
            付加コード = :h_BRANCH_NO_ADD
          AND
            登録者    = '03'
          AND
            適用開始年月日   < :h_START_DATE
          AND
            適用終了年月日       > :h_START_DATE ;

*/

	/* 適用開始年月日の更新  */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );
	strcpy ( sqlcmd, "begin ");
	strcat ( sqlcmd, "UPDATE ");
	sprintf( g_work, "%s ", g_BranchTbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "SET ");
	strcat ( sqlcmd, "適用開始年月日 = :h_START_DATE,  ");
	strcat ( sqlcmd, "登録日 = SYSDATE ");
	strcat ( sqlcmd, "WHERE ");
	strcat ( sqlcmd, "銀行番号 = :h_BANK_NO ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, "店番 = :h_BRANCH_NO ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, "付加コード = :h_BRANCH_NO_ADD ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, " 登録者  = '03' ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, "適用開始年月日 < :h_START_DATE ");
	strcat ( sqlcmd, "AND ");
	strcat ( sqlcmd, "適用終了年月日 > :h_START_DATE; ");
	strcat ( sqlcmd, "end; ");


	/*
	printf("sqlcmd=[%s]\n",sqlcmd);

	printf("h_BANK_NO=[%s] ",h_BANK_NO);
	printf("h_BRANCH_NO=[%s] ",h_BRANCH_NO);
	printf("h_BRANCH_NO_ADD=[%s]\n",h_BRANCH_NO_ADD);
	printf("h_START_DATE=[%s]\n",h_START_DATE);
*/

	/* 動的SQL-SQL文の解析 */
	G_POSITION = __LINE__;
	EXEC SQL PREPARE my_stmt15 FROM :sqlcmd;
	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "適用開始日の更新(支店)1に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt15", NULL, NULL, G_STATION);

		return ERROR;
	}


	/* 適用開始日の更新 */
	G_POSITION = __LINE__;
	EXEC SQL EXECUTE my_stmt15
		USING	:h_START_DATE,
				:h_BANK_NO,
				:h_BRANCH_NO,
				:h_BRANCH_NO_ADD;

	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                "適用開始日の更新(支店)2に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION);

		return ERROR;
	}


    return NORMAL;
}



/*****************************************************************************/
/* Function Name:                                                            */
/*   static int deleteDuplicatedShitenData( VOID )                           */
/*                                                                           */
/* Description:                                                              */
/*   重複支店データの削除                                                    */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. マージ後に、下記のキーが全て同じデータが複数件登録されている場合、   */
/*      重複のデータを削除し、1件のみ残る                                    */
/*      キー：「銀行コード」、「支店コード」、「支店付加コード」、           */
/*            「適用開始日」、「適用終了日」                                 */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int deleteDuplicatedShitenData( VOID )
{


	/*
    EXEC SQL DELETE
          FROM
              (SELECT row_number() over(PARTITION BY BANK_NO, BRANCH_NO, BRANCH_NO_ADD, START_DATE, END_DATE) AS rn FROM SHITEN_T)
         WHERE
              1 < rn;
    */

	/* SQL */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );

	strcpy ( sqlcmd, "DELETE ");
	strcat ( sqlcmd, "FROM ");
	sprintf( g_work, "%s ", g_BranchTbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM ");
	sprintf( g_work, "%s ", g_BranchTbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "GROUP BY 銀行番号,店番,付加コード,適用開始年月日,適用終了年月日) ");

	G_POSITION = __LINE__;
	EXEC SQL EXECUTE IMMEDIATE :sqlcmd;
	if( sqlca.sqlcode < 0 ){
		sprintf( g_szDtlMsg,
                    "重複支店データの削除に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION);

		return ERROR;
	}


#if 0

    /* エラーチェック */
    if ( sqlca.sqlcode < 0 && sqlca.sqlcode != ORA_NOF ) {
        sprintf(g_szDtlMsg, 
                "重複支店データの削除に失敗しました。(sqlca.sqlcode=%d)",
                sqlca.sqlcode);
        send_err( LOG_C_TYPERR, " %s ", g_szDtlMsg );
        return ERROR;
    }
#endif


    return NORMAL;
}



/*****************************************************************************/
/* Function Name:                                                            */
/*    static int mergeShitenData( VOID )                                     */
/*                                                                           */
/* Description:                                                              */
/*   支店テーブルのマージ実施                                                */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 支店の廃止データを抽出する                                           */
/*   2. 各廃止データ毎に廃止日のマージを行う                                 */
/*   3. 支店の登録データを抽出する                                           */
/*   4. 各登録データ毎に登録日のマージを行う                                 */
/*                                                                           */
/* Considerations:                                                           */
/*   1. データの分類（廃止データ・登録データ）は、カラム「更新者」           */
/*      （仮登録時に異動事由コードを臨時に格納）によって判定する             */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int mergeShitenData( VOID )
{
    int rc = NORMAL;



	/* 廃止データの抽出 */
	rc = cursorAbolitionShitenDataOpen();
	if (rc != NORMAL) {
		return rc;
	}


	while (1) {

		/* 各廃止データ毎のマージ */
		rc = readAbolitionShitenData();
		if (rc != NORMAL) {
			return rc;
		}
		if ( sqlca.sqlcode == ORA_NOF ) {
			break;
		}

		rc = updateEndDateOfEntryShitenData();
		if (rc != NORMAL) {
			return rc;
		}

	}

    /* カーソルクローズ(CUR_05) */
    EXEC SQL CLOSE CUR_05;



    /* 登録データの抽出 */
	rc = cursorEntryShitenDataOpen();
	if (rc != NORMAL) {
		return rc;
	}


    while (1) {

        /* 各登録データ毎のマージ */
		rc = readEntryShitenData();
		if (rc != NORMAL) {
			return rc;
		}
		if ( sqlca.sqlcode == ORA_NOF ) {
			break;
		}


		rc = updateStartDateOfAbolitionShitenData();
		if (rc != NORMAL) {
			return rc;
		}

	}


    /* カーソルクローズ(CUR_06) */
    EXEC SQL CLOSE CUR_06;




    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*   static int updateShitenRecvData( VOID )                                 */
/*                                                                           */
/* Description:                                                              */
/*   支店テーブルのマージ                                                    */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. マージ対象とする支店データを抽出                                     */
/*   2. 各支店の有効期間をマージ                                             */
/*   3. マージ後の重複支店データを削除                                       */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int updateShitenRecvData( VOID )
{

    int   rc = NORMAL;



    /* マージ対象データの抽出 */
    rc = cursorShitenDataOpen();
    if (rc != NORMAL) {
        return rc;
    }



    while (1) {

        /* マージ対象データに対して、同一支店毎にマージを実行 */
        rc = readShitenData();
        if (rc != NORMAL) {
            return rc;
        }

        if ( sqlca.sqlcode == ORA_NOF ) {
            break;
        }


		rc = mergeShitenData();
		if (rc != NORMAL) {
			return rc;
		}

    }

    /* カーソルクローズ(CUR_04) */
    EXEC SQL CLOSE CUR_04;



	/* 重複支店データの削除 */
	rc = deleteDuplicatedShitenData();
	if (rc != NORMAL) {
		return rc;
	}


	return NORMAL;

}


/*****************************************************************************/
/* Function Name:                                                            */
/*   static int updateTables( VOID )                                         */
/*                                                                           */
/* Description:                                                              */
/*   銀行テーブル・支店テーブルの更新者を全件更新                            */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files :                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. マージ後、銀行テーブルの更新者を全件更新                             */
/*   2. マージ後、支店テーブルの更新者を全件更新                             */
/*                                                                           */
/* Considerations:                                                           */
/*   1. テーブルにデータがない場合でも、WARNログのを出力し、エラーとしない   */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int updateTables( VOID )
{



    /* 登録者の更新者（銀行） */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );
	strcpy ( sqlcmd, "UPDATE  ");
	sprintf( g_work, "%s ", g_BankTBbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "SET 登録者 ='SPV'");

	G_POSITION = __LINE__;
	EXEC SQL EXECUTE IMMEDIATE :sqlcmd;

	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                    "銀行テーブルの更新に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION);

		return ERROR;
	}

    /* 登録者の更新者（支店） */
	memset ( sqlcmd, 0x0, sizeof(sqlcmd) );
	strcpy ( sqlcmd, "UPDATE  ");
	sprintf( g_work, "%s ", g_BranchTbName );
	strcat ( sqlcmd, g_work);
	strcat ( sqlcmd, "SET 登録者 ='SPV'");

	G_POSITION = __LINE__;
	EXEC SQL EXECUTE IMMEDIATE :sqlcmd;

	if (sqlca.sqlcode < 0) {
		sprintf( g_szDtlMsg,
                    "支店テーブルの更新に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION);

		return ERROR;
	}

	return NORMAL;

}


/*****************************************************************************/
/* Function Name:                                                            */
/*   static int tourokuRecvData( VOID )                                      */
/*                                                                           */
/* Description:                                                              */
/*   金融機関支店ファイルの仮登録                                            */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files :                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL      : 正常終了                                                  */
/*   ERROR       : 異常終了                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 金融機関支店ファイルオープン                                         */
/*   2. 金融機関支店ファイル読込み                                           */
/*   3. 金融機関支店判定                                                     */
/*    3.1. 金融機関の場合、銀行テーブルへの登録を実施                        */
/*    3.2. 支店の場合、支店テーブルへの登録を実施                            */
/*   4. 金融機関支店ファイルクローズ                                         */
/*                                                                           */
/* Considerations:                                                           */
/*   1. 下記のグローバル変数でファイル操作を実施する                         */
/*      ・g_szRecvFile                                                       */
/*      ・g_pfRecvFile                                                       */
/*   2. 下記のグローバル変数で計数を参照/設定する                            */
/*      ・g_dCount                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int tourokuRecvData( VOID )
{
	char data_buf[512]; /* バッファの初期化がないので追加 */

    RECV_FILE_DATA *dData;                            /* データ・レコード(ポインタに変更) */

    int rc;
	int rc_fin;


    rc = NORMAL;

	dData = (RECV_FILE_DATA *)data_buf;

    while (1) {
		memset ( &data_buf , 0x00, sizeof(data_buf) );

		/*printf("SIZE=%d\n",sizeof(RECV_FILE_DATA));*/
	
        /* 金融機関支店ファイルからの読込 */
        rc = readRecvData( dData );
        if (rc != NORMAL) {
            break;
        }
 
		/* 金融機関支店ファイル読込み終了確認 ※０件の場合は異常終了に変更*/
        if (feof( g_pfRecvFile ) != 0) {
            if (g_dCount.iRecNum == 0) {
                sprintf(g_szDtlMsg,
                        "金融機関支店ファイル(%s)は０件ファイルです。",
                        g_szRecvFile);
				send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
				rc = ERROR;
				goto WriteErroLogFile;
            }
            rc = NORMAL;
            break;
        }
        g_dCount.iRecNum++;


        /* 金融機関支店判定 */
        if (dData->szHeader.szDataType[0] == '1') {
            /* 金融機関データの場合 */
            rc = tourokuGinkoRecvData( &(dData->szBankData) );
            if (rc != NORMAL) {
                goto WriteErroLogFile;
            }
        }

        else if (dData->szHeader.szDataType[0] == '2') {
            /* 支店データの場合 */
            rc = tourokuShitenRecvData( &(dData->szBranchData) );
            if (rc != NORMAL) {
                goto WriteErroLogFile;
            }
        }
        else {
            g_dCount.iNgNum++;
            sprintf(g_szDtlMsg,
                    "[レコードＮＯ=%d]データ種別(%.*s)が正しくありません。",
                    g_dCount.iRecNum,1,dData->szHeader.szDataType);
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
            rc = ERROR;
            goto WriteErroLogFile;
        }



WriteErroLogFile:

        /* 取引ログ出力(エラー時) */
        rc_fin = putExceptionAcctLogFile( dData, rc );
        if (rc == 0) {
            rc = rc_fin;
        }

        if (rc != NORMAL) {
            break;
        }

    } /* while-end */


    /* 金融機関支店ファイルクローズ */
    if (g_pfRecvFile != NULL) {
        fclose( g_pfRecvFile );
    }



    return rc;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*   static int putAcctLogFile( int rc )                                     */
/*                                                                           */
/* Description:                                                              */
/*   終了時の金融機関支店ログ出力処理                                        */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   rc            int          I    呼び出しもとのリターンコード            */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL        : 正常終了                                                */
/*   ERROR         : 異常終了                                                */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. バッファ初期化                                                       */
/*   2. 正常系・異常系をチェックする                                         */
/*    2.1. 異常系の場合、カウントは０にする                                  */
/*   3. ログ内容（備考）を設定                                               */
/*   4. ログ内容を出力する                                                   */
/*                                                                           */
/* Considerations:                                                           */
/*   1. 下記のグローバル変数でファイル操作を実施する                         */
/*      ・g_pfLogFile                                                        */
/*      ・g_szLogFile                                                        */
/*   2. 下記のグローバル変数で計数を参照する                                 */
/*      ・g_dCount                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int putAcctLogFile( int rc )
{
    AP_D_BTLOG log;
	unsigned int ret;

    /* バッファ初期化 */
    memset( &log, ' ', sizeof( log ));
    log.szDelimit[ 0 ]  = 0x0a;
    log.szDelimit1[ 0 ] = 0x0a;


    /* エラーありの場合ロールバックするのでＯＫカウントは０にする */
    if (rc != NORMAL) {
        g_dCount.iRecNum = 0;
        g_dCount.iOkNum = 0;
        g_dCount.iNgNum = 0;
    }

    sprintf(log.szNote,
            "[ RECORD COUNT:%d <OK>:%d <NG>:%d <日銀>:%d]",
            g_dCount.iRecNum,                         /* 処理件数            */
            g_dCount.iOkNum,                          /* 正常終了            */
            g_dCount.iNgNum,						  /* ERROR終了           */
			inichigin);                               /* 日本銀行件数           */

    /* 処理結果ファイルへの書き込み */
    ret = (unsigned int)fwrite(&log,
                    sizeof( AP_D_BTLOG ) - sizeof( log.szNote1 ) - sizeof( log.szDelimit1 ),
                    1,
                    g_pfLogFile);
    if (ret != 1) {
		send_err ( m$file_write, errno, g_szLogFile, log , NULL, G_STATION);
        return ERROR;
    }



    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*   static int putExceptionAcctLogFile( RECV_FILE_DATA *pData, int rc )     */
/*                                                                           */
/* Description:                                                              */
/*   異常時の金融機関支店ログ出力処理                                        */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length    I/O    Content                             */
/* --------------  -----------    ---  -----------------------------------   */
/*   *pData        RECV_FILE_DATA I    入力レコード                          */
/*   rc            int            I    呼び出しもとのリターンコード          */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL        : 正常終了                                                */
/*   ERROR         : 異常終了                                                */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. バッファ初期化                                                       */
/*   2. 正常系・異常系をチェックする                                         */
/*    2.1. 正常系の場合、エラーログを出力しない                              */
/*    2.2. 異常系の場合、ログ内容を設定し、エラーログを出力する              */
/*     2.2.1. ログ内容（日時）を設定                                         */
/*     2.2.2. リターンコードにより、ログ内容（処理結果）を設定               */
/*     2.2.3. リターンコードにより、ログ内容（結果種類）を設定               */
/*     2.2.4. ログ内容（備考）を設定                                         */
/*     2.2.5. ログ内容（事象発生詳細）を設定                                 */
/*     2.2.6. ログ内容を出力する                                             */
/*                                                                           */
/* Considerations:                                                           */
/*   1. 下記のグローバル変数でファイル操作を実施する                         */
/*      ・g_pfLogFile                                                        */
/*      ・g_szLogFile                                                        */
/*   2. 下記のグローバル変数でエラーメッセージを参照する                     */
/*      ・g_szDtlMsg                                                         */
/*   3. 下記のグローバル変数で計数を参照する                                 */
/*      ・g_dCount                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/


static int putExceptionAcctLogFile( RECV_FILE_DATA *pData, int rc )
{
    AP_D_BTLOG log;
    char    szTime[EMB_C_DTIME_LEN + 1];
    time_t  t = time( NULL );
	unsigned int     ret;

    /* バッファ初期化 */
    memset( &log, ' ', sizeof( log ));
    log.szDelimit[ 0 ]  = 0x0a;
    log.szDelimit1[ 0 ] = 0x0a;

    /* 現状NORMAL正常時は処理しない。（以下に処理だけは残しておく）*/
    if (rc == NORMAL) return NORMAL;



    /* 日時 */
    strftime( szTime, EMB_C_DTIME_LEN + 1, "%Y-%m-%d %H:%M:%S", localtime( &t ));
    memcpy( log.szDateTime, szTime, EMB_C_DTIME_LEN );
    /* リターンコード編集 */
    switch (rc) {
        case ERROR:
            memcpy( log.szRtInfo, "ERROR",        5); /* エラー    */
            break;
 
        default:
            memcpy( log.szRtInfo, "NONE",         4); /* その他            */
            break;
    }

    memcpy( log.szRtType, " NG ", 4); /* エラー表示    */

    /* 備考(金融機関支店の処理データ表示） */
    if (pData->szHeader.szDataType[0] == '1') {
        /* 金融機関データの場合 */
        sprintf(log.szNote,
                "[ DATA ]%.*s,%.*s,%.*s,%.*s,%.*s,%.*s",
                sizeof( pData->szBankData.szBankCode   ),
                pData->szBankData.szBankCode,
                sizeof( pData->szBankData.szBankNameKn ),
                pData->szBankData.szBankNameKn,
                sizeof( pData->szBankData.szBankName2  ),
                pData->szBankData.szBankName2,
                sizeof( pData->szBankData.szIdoDate8   ),
                &pData->szBankData.szIdoDate8,
                sizeof( pData->szBankData.szIdoJiyu    ),
                pData->szBankData.szIdoJiyu,
                sizeof( pData->szBankData.szDelDate8   ),
                &pData->szBankData.szDelDate8);
    }
    else{
        /* 支店データの場合 */
        sprintf(log.szNote,
                "[ DATA ]%.*s,%.*s,%.*s,%.*s,%.*s,%.*s",
                sizeof( pData->szBranchData.szBranchCode   ),
                pData->szBranchData.szBranchCode,
                sizeof( pData->szBranchData.szBranchNameKn ),
                pData->szBranchData.szBranchNameKn,
                sizeof( pData->szBranchData.szBranchName2  ),
                pData->szBranchData.szBranchName2,
                sizeof( pData->szBranchData.szIdoDate8     ),
                &pData->szBranchData.szIdoDate8,
                sizeof( pData->szBranchData.szIdoJiyu      ),
                pData->szBranchData.szIdoJiyu,
                sizeof( pData->szBranchData.szDelDate8     ),
                &pData->szBranchData.szDelDate8);
    }

    /* 事象発生詳細レコード番号、事象詳細文字列 */
    sprintf( log.szNote1, "(%d) %.*s", g_dCount.iRecNum, (unsigned int)strlen( g_szDtlMsg ), g_szDtlMsg );

    /* 金融機関支店ログファイルへの書き込み */
    ret = (unsigned int)fwrite( &log, sizeof( AP_D_BTLOG ), 1, g_pfLogFile );
    if (ret != 1) {
		send_err ( m$file_write, errno, g_szLogFile, log , NULL, G_STATION);

        return ERROR;
    }


    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*   static void ConvAfter1Day( char *szAfter1Day, char *szDay )             */
/*                                                                           */
/* Description:                                                              */
/*   １日後日付算出                                                          */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   szAfter1Day   *char        O    算出後日付(YYYY-MM-DD)                  */
/*   szDay         *char        I    算出元日付(YYMMDD)                      */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   None                                                                    */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. １日後の日付を算出                                                   */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static void ConvAfter1Day( char *szAfter1Day, char *szDay )
{
    time_t wktime, after1day;
    struct tm cnvTm;
    char   buf[11];

    memset(szAfter1Day, 0x00, sizeof(szAfter1Day) );
    memcpy(szAfter1Day, szDay, sizeof(DATE) );
    memset(&cnvTm, 0x00, sizeof(cnvTm));

    cnvTm.tm_sec = 0;
    cnvTm.tm_min = 0;
    cnvTm.tm_hour = 12;

    strncpy(buf, &szDay[6], 2);
    buf[2] = 0x00;
    cnvTm.tm_mday = atoi(buf);
    strncpy(buf, &szDay[4], 2);
    buf[2] = 0x00;
    cnvTm.tm_mon = atoi(buf) - 1;
    strncpy(buf, &szDay[0], 4);
    buf[4] = 0x00;
    cnvTm.tm_year = atoi(buf) - 1900;


    wktime=mktime(&cnvTm);
    after1day = (time_t)((long)wktime + 3600 * 24);
    strftime(szAfter1Day, sizeof(DATE)+5, "%Y-%m-%d", localtime( &after1day));


    return;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*   static int convTime( char *cnvOld, char *cnvNew )                       */
/*                                                                           */
/* Description:                                                              */
/*   時間形式の変換(yyyymmdd -> yyyy-mm-dd)                                  */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length            I/O    Content                     */
/* --------------  ---------------------  ---  -------------------------     */
/*   cnvOld        char *                 I    変換元(yyyymmdd)              */
/*   cnvNew        char *                 O    変換先(yyyy-mm-dd)            */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   0: 正常終了                                                             */
/*   1: 入力エラー                                                           */
/*   2: 実日付エラー                                                         */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. 日付を"yyyymmdd" から "yyyy-mm-dd" に変換する                        */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int convTime( char *cnvOld, char *cnvNew )
{
    time_t local;
    struct tm tm, *pub;
    int year, mon, day;
    int i;
    char buf[12];

    /* 日付形式の確認 */
    if (cnvOld == NULL || cnvNew ==NULL) {
        return 1;
    }
    for (i = 0; i < 8; i++) {

        if (isdigit( *( cnvOld + i ) ) == 0) {
            return 1;
        }
    }

    /* 実日付確認方法
     * 入力された日付でmktimeを行うとmktime()は実日付に
     * 変換する．それを利用してmktime()で変換された日付と
     * 入力された日付が同じでなければ実日付として扱わない．
     * ただし，時間系の関数の規定により，1970/01/02〜2038/01/18
     * までしか判定できない
     */
    memset( &tm, 0x00, sizeof( struct tm ));
    sscanf( cnvOld, "%04d%02d%02d", &year, &mon, &day );
    tm.tm_year = year - 1900;
    tm.tm_mon  = mon - 1;
    tm.tm_mday = day;

    local = mktime( &tm );
    if (local == -1) {
      return 2;
    }
    pub = localtime( &local );
    if (pub->tm_year + 1900 != year
        || pub->tm_mon + 1  != mon
        || pub->tm_mday     != day) {
        return 2;
    }

    /* 変換 */
    memset( buf, 0x00, sizeof( buf ));
    sprintf( buf, "%04d-%02d-%02d", year, mon, day );
    memcpy( cnvNew, buf, 10 );

    return 0;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*   static int commit( VOID )                                               */
/*                                                                           */
/* Description:                                                              */
/*   ＤＢのコミット                                                          */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL         : 正常終了                                               */
/*   EMUSC_ERR_SYSTEM : ＤＢコミット失敗                                     */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. DBのコミットを実施する                                               */
/*                                                                           */
/* Considerations:                                                           */
/*   1. 下記のグローバル変数でエラーメッセージを設定する                     */
/*      ・g_szDtlMsg                                                         */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int commit( VOID )
{

    /* ＤＢのコミット */
    EXEC SQL COMMIT;
    if (sqlca.sqlcode < 0) {
        sprintf(g_szDtlMsg,
                "ＤＢのコミットに失敗しました。(CODE=%ld)",
                sqlca.sqlcode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return ERROR;
    }


    return NORMAL;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*   static int rollback( VOID )                                             */
/*                                                                           */
/* Description:                                                              */
/*   ＤＢのロールバック                                                      */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   None                                                                    */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL         : 正常終了                                               */
/*   EMUSC_ERR_SYSTEM : ＤＢロールバック失敗                                 */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. DBのロールバックを実施する                                           */
/*                                                                           */
/* Considerations:                                                           */
/*   1. 下記のグローバル変数でエラーメッセージを設定する                     */
/*      ・g_szDtlMsg                                                         */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int rollback( VOID )
{

    /* ＤＢのロールバック */
    EXEC SQL ROLLBACK WORK;
    if (sqlca.sqlcode < 0) {
        sprintf(g_szDtlMsg,
                "ＤＢのロールバックに失敗しました。(CODE=%ld)",
                sqlca.sqlcode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return ERROR;
    }


    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*   static VOID finalize( int rc )                                          */
/*                                                                           */
/* Description:                                                              */
/*   終了処理                                                                */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length    I/O    Content                             */
/* --------------  -----------    ---  -----------------------------------   */
/*   rc            int            I/O  リターンコード                        */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   None                                                                    */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1. コミット処理                                                         */
/*   2. 取引ログ出力                                                         */
/*   3. ログファイルクローズ                                                 */
/*   4. DB切断                                                               */
/*                                                                           */
/* Considerations:                                                           */
/*   1. 下記のグローバル変数でファイル操作を実施する                         */
/*      ・g_pfLogFile                                                        */
/*   2. 下記のグローバル変数でエラーメッセージを設定する                     */
/*      ・g_szDtlMsg                                                         */
/*   3. 下記のグローバル変数で計数を参照する                                 */
/*      ・g_dCount                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static void finalize( int rc )
{
    

    /* 前処理成功（ログファイルオープン失敗除外）の場合のみ、 */
    /* DBコミット・ロールバックと取引ログ出力を実施 */
    if (rc != ERROR) {
        /* 成功、かつ、レコードが0件でない場合、DBのコミットを実行 */
        if (rc == NORMAL && g_dCount.iRecNum != 0) {
            /* ＤＢのコミット */
            rc = commit();
            icommit++;
        }

        /* 失敗の場合、または、レコードが0件の場合、DBのロールバックを実行 */
        if (rc != NORMAL || (rc == NORMAL && g_dCount.iRecNum == 0)) {
            /* ＤＢのロールバック */
            rollback();

        }
    }


    /* 前処理成功の場合のみ、取引ログを出力 */
    if (rc != ERROR ) {
        /* 取引ログ出力 */
        int rc_fin = putAcctLogFile( rc );
        if (rc == 0) {
            rc = rc_fin;
        }
    }


    /* ファイルのクローズ */
    if (g_pfLogFile != NULL) {
        fclose( g_pfLogFile );
    }

    /* ＤＢ接続解除 */
	/*
    EXEC SQL CONNECT RESET;
    if (sqlca.sqlcode < 0 && sqlca.sqlcode != -1024) {
        sprintf( g_szDtlMsg,
                "ＤＢ接続の解除が失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
        send_err( LOG_C_TYPERR, " %s ", g_szDtlMsg );
    }
	*/


#if 0
    /* 前処理成功の場合のみ、下記の内容をバッチログに出力 */
    if (rc != ERROR && rc != ERROR) {
        if (g_iDebugMode == TRUE) {
            send_err( LOG_C_TYPINF, "record read          =%d", g_dCount.iRecNum );
            send_err( LOG_C_TYPINF, "ido:初期登録         =%d", jcount[0]        );
            send_err( LOG_C_TYPINF, "ido:新設             =%d", jcount[1]        );
            send_err( LOG_C_TYPINF, "ido:廃止             =%d", jcount[2]        );
            send_err( LOG_C_TYPINF, "ido:継承             =%d", jcount[3]        );
            send_err( LOG_C_TYPINF, "ido:店舗変更(変更後) =%d", jcount[4]        );
            send_err( LOG_C_TYPINF, "ido:併存(変更前)     =%d", jcount[5]        );
            send_err( LOG_C_TYPINF, "ido:その他変更       =%d", jcount[6]        );
            send_err( LOG_C_TYPINF, "ido:併存(合併前)     =%d", jcount[7]        );
            send_err( LOG_C_TYPINF, "ido:合併(合併後)     =%d", jcount[8]        );
            send_err( LOG_C_TYPINF, "ido:併存(営業譲渡元) =%d", jcount[9]        );
            send_err( LOG_C_TYPINF, "ido:営業譲渡(譲渡先) =%d", jcount[10]       );
            send_err( LOG_C_TYPINF, "ido:error            =%d", ierrjiyu         );
            send_err( LOG_C_TYPINF, "日本銀行件数         =%d", inichigin        );
            send_err( LOG_C_TYPINF, "正読以外件数         =%d", inotsei          );
            send_err( LOG_C_TYPINF, "振込以外件数         =%d", inotfuri         );
            send_err( LOG_C_TYPINF, "commit count         =%d", icommit          );
        }

        send_err( LOG_C_TYPINF, "金融機関支店ファイル登録処理(ginkoshiten_r)を終了します。(終了コード=%d 処理件数=%d/%d)", rc, g_dCount.iOkNum, g_dCount.iRecNum );
    }
#endif


    exit( rc );
}

