/*==========================================================================*/
/* Copyright　Information Services International-Dentsu, Ltd.   　          */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : BANK・R−CC                                           */
/*                                                                          */
/* PROGRAM NAME     : 整合性チェック−口座明細                              */
/*                                                                          */
/* MODULE NAME      : CheckDeposit                                          */
/*                                                                          */
/* FUNCTION         : ロードした口座明細の整合性チェックを行う。            */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POint      : Main Module.                                          */
/*                                                                          */
/* INPUT            : None                                                  */
/*                                                                          */
/*                                                                          */
/* EXIT             : 正常終了                 ・・・NORMAL(0)              */
/*                    警告終了(不整合データ有) ・・・1                      */
/*                    異常終了                 ・・・ERROR (9)              */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 09/06/24 | K.Miyahara  | First Edition.                            */
/* %01 | 14/03/27 | N.Ogawa		| あおぞら更改対応                          */
/*==========================================================================*/
/*--------------------------------------------------------------------------*/
/* Standard include specification                                           */
/*--------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*--------------------------------------------------------------------------*/
/* User defined include specification                                       */
/*--------------------------------------------------------------------------*/
#include "msg.h"
#include "common.h"
#include "batchcommon.h"

EXEC SQL INCLUDE mbproc.h;

/*--------------------------------------------------------------------------*/
/*                            DEFINE STATEMENTS                             */
/*--------------------------------------------------------------------------*/
#define WARNING     1

/*--------------------------------------------------------------------------*/
/*                            EXTERNAL DECLARES                             */
/*--------------------------------------------------------------------------*/
EXEC SQL BEGIN DECLARE SECTION;
    int         total_count;
    varchar     commodity_id[11];
EXEC SQL END DECLARE SECTION;

char    process_name[43];
char    g_work[1024];

/*--------------------------------------------------------------------------*/
/*                           STRUCT DECLARATIONS                            */
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*                           SUBROUTNE DEFINITION                           */
/*--------------------------------------------------------------------------*/
extern int send_err();
extern int db_connect();
extern void errhandler();

/****************************************************************************/
/*                                                                          */
/*                            PROCEDURE DIVISION                            */
/*                                                                          */
/****************************************************************************/

/*--------------------------------------------------------------------------*/
/*                              MAIN ROUTINE                                */
/*--------------------------------------------------------------------------*/
main()
{
/*--------------------------------------------------------------------------*/
/*                        LOCAL VARIABLE DECLARATIONS                       */
/*--------------------------------------------------------------------------*/
    int         rc;
    int         exitcode;
    int			cursor1;
    int			error_count;
    char		work1[512];
    FILE*		log_fp;                 /* ログファイルポインタ */
    char		*logdir;
    char		logfile[256];
	/* %01 */
    /* int			error_count2; */           /* 個別明細流動性預金 */
    /* int			error_count3; */           /* 個別明細貸出金 */

/*==========================================================================*/
/*      INITIALIZATION                                                      */
/*==========================================================================*/
    /*------------------------*/
    /* Initialize environment */
    /*------------------------*/
    exitcode = NORMAL ;
    cursor1 = 0 ;
    error_count = 0 ;

    /*-----------------------------*/
    /* Print process start message */
    /*-----------------------------*/
	strcpy( G_STATION, "CheckDeposit" );

	memset(process_name,0x00,sizeof(process_name));
    strcpy(process_name,"整合性チェック−口座明細");

    send_err( m$start_process, NORMAL, process_name, "", "", G_STATION );

	/*-----------------------------*/
	/* Get environment variable    */
	/*-----------------------------*/
    if( ( logdir = (char *)getenv( "LOG_DIR" ) ) == NULL ){
		send_err( m$getenv, -1, "LOG_DIR", NULL, NULL, G_STATION );
		exitcode = ERROR;
        goto ENDPROC ;
    }

    sprintf (logfile, "%s%c%s%clog", logdir, 0x5c, G_STATION, 0x2E);

    /*-----------------------------*/
    /* Setup error handler routine */
    /*-----------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

	/*-----------------------------*/
	/* Connect to database         */
	/*-----------------------------*/
    G_POSITION = __LINE__;
    rc = db_connect() ;
    if( rc != 0 ){
        send_err( m$db_connect, rc , NULL, NULL, NULL, G_STATION );
        exitcode = ERROR ;
        goto ENDPROC ;
    }

    /*======================================================================*/
    /*                      メ　イ　ン　処　理                              */
    /*======================================================================*/

	/*======================================================================*/
	/*----- 個別明細固定性預金テーブル -------------------------------------*/
	/*======================================================================*/
    /*---------------------*/
    /* Get total row count */
    /*---------------------*/
    G_POSITION = __LINE__;
    EXEC SQL 
		SELECT 
			count(*) 
		INTO 
			:total_count
		FROM 
			TF_個別明細固定性預金
		;
    if( sqlca.sqlcode < 0 ){
		sprintf( g_work,
				"個別明細固定性件数取得エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error, -1, g_work, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "SELECT COUNT(*) FROM TF_個別明細固定性預金", NULL, NULL, G_STATION);
		exitcode = ERROR ;
        goto ENDPROC ;
    }

    if( total_count == 0 ) {
        send_err( m$MBB1001W, 0, "TF_個別明細固定性預金", NULL, NULL, G_STATION ) ;
        goto ENDPROC ;
    }

    error_count = 0 ;

    /*--------------------*/
    /* Check Commodity-ID */
    /*--------------------*/
    G_POSITION = __LINE__;
    EXEC SQL DECLARE commodity_row1 CURSOR FOR
		SELECT 
			DISTINCT 商品ID
		FROM 
			TF_個別明細固定性預金
		WHERE 
			商品ID IS NOT NULL AND 
			商品ID NOT IN (SELECT 商品ID FROM TF_商品) 
		;
    if( sqlca.sqlcode < 0 ){
        send_err(m$sql_statment,0,"DECLARE commodity_row1",NULL,NULL,G_STATION);
        exitcode = ERROR ;
        goto ENDPROC ;
    }

    G_POSITION = __LINE__;
    EXEC SQL OPEN commodity_row1 ;
    if( sqlca.sqlcode < 0 ){
        send_err(m$sql_statment,0,"OPEN commodity_row1",NULL,NULL,G_STATION);
        exitcode = ERROR ;
        goto ENDPROC ;
    }
    cursor1 = 1;

    while(1) {
        G_POSITION = __LINE__;
        EXEC SQL FETCH commodity_row1 INTO :commodity_id;
        if( sqlca.sqlcode < 0 ){
            send_err(m$sql_statment,0,"FETCH commodity_row1",NULL,NULL,G_STATION);
            exitcode = ERROR ;
            goto ENDPROC ;
        }
        if( sqlca.sqlcode == ORA_NOF ){
            goto CLOSE1;
        }
        commodity_id.arr[commodity_id.len] = '\0';

        memset(work1, 0x00, sizeof(work1));
        sprintf(work1, "個別明細固定性預金データの商品コード (%s) が商品マスタに登録されていません.\n", commodity_id.arr);

        if(error_count == 0){
            log_fp = fopen(logfile, "w" );
        }
        else{
            log_fp = fopen(logfile, "a" );
        }
		
		if ( log_fp == NULL ) {
			sprintf ( g_work, "ログファイル%sのオープンに失敗しました。", logfile );
			send_err( m$file_open, errno, g_work, NULL, NULL, G_STATION );
			exitcode = ERROR;
            goto ENDPROC ;
		}

		rc = fputs(work1,log_fp);
		if ( rc == EOF ) {
			send_err ( m$file_write, errno, logfile, work1 , NULL, G_STATION);
			if ( log_fp != NULL ) {
				fclose( log_fp );
			}
			exitcode = ERROR;
            goto ENDPROC ;
		}
		
		fclose( log_fp );

       error_count++;

    }
CLOSE1:
    if ( cursor1 == 1 ) {
        EXEC SQL CLOSE commodity_row1;
    }
    if( exitcode == ERROR){
        goto ENDPROC ;
    }

    /* ログ出力件数出力 */
    if(error_count != 0){
        memset(work1, 0x00, sizeof(work1));
        sprintf(work1, "%d",error_count);
        send_err(m$MBB1026W, 0, work1, NULL, NULL, G_STATION);
        exitcode = WARNING;
    }

/* %01 削除 START */
#if 0
	/*======================================================================*/
	/*----- 個別明細流動性預金テーブル -------------------------------------*/
	/*======================================================================*/
    /*---------------------*/
    /* Get total row count */
    /*---------------------*/

    G_POSITION = __LINE__;
    EXEC SQL 
		SELECT 
			count(*) 
		INTO 
			:total_count
		FROM 
			TF_個別明細流動性預金
		;
    if( sqlca.sqlcode < 0 ){
        EXEC SQL ROLLBACK WORK RELEASE;
        send_err(m$sql_statment,0,"SELECT COUNT(*) FROM TF_個別明細流動性預金",NULL,NULL,G_STATION);
        exitcode = ERROR ;
        goto ENDPROC ;
    }
    if( total_count == 0 ) {
        send_err( m$MBB1001W, 0, "TF_個別明細流動性預金", NULL, NULL, G_STATION ) ;
        goto ENDPROC ;
    }

    cursor1 = 0 ;
    error_count2 = 0 ;

    /*--------------------*/
    /* Check Commodity-ID */
    /*--------------------*/

    G_POSITION = __LINE__;
    EXEC SQL DECLARE attribute_row2 CURSOR FOR
		SELECT 
			DISTINCT 商品ID
		FROM 
			TF_個別明細流動性預金
		WHERE 
			商品ID IS NOT NULL AND 
			商品ID NOT IN (SELECT 商品ID FROM TF_商品) 
		;
    if( sqlca.sqlcode < 0 ){
        EXEC SQL ROLLBACK WORK RELEASE;
        send_err(m$sql_statment,0,"DECLARE attribute_row2",NULL,NULL,G_STATION);
        exitcode = ERROR ;
        goto ENDPROC ;
    }

    G_POSITION = __LINE__;
    EXEC SQL OPEN attribute_row2 ;
    if( sqlca.sqlcode < 0 ){
        EXEC SQL ROLLBACK WORK RELEASE;
        send_err(m$sql_statment,0,"OPEN attribute_row2",NULL,NULL,G_STATION);
        exitcode = ERROR ;
        goto ENDPROC ;
    }
    cursor1 = 1;

    while(1) {
        G_POSITION = __LINE__;
        EXEC SQL FETCH attribute_row2 INTO :commodity_id;
        if( sqlca.sqlcode < 0 ){
            EXEC SQL ROLLBACK WORK RELEASE;
            send_err(m$sql_statment,0,"FETCH attribute_row2",NULL,NULL,G_STATION);
            exitcode = ERROR ;
            goto ENDPROC ;
        }
        if( sqlca.sqlcode == ORA_NOF ){
            goto CLOSE2;
        }
        commodity_id.arr[commodity_id.len] = '\0';
        memset(work1, 0x00, sizeof(work1));
        sprintf(work1, "個別明細流動性預金データの商品コード (%s) が商品マスタに登録されていません.\n", commodity_id.arr);
        if(error_count == 0){
            log_fp = fopen(logfile, "w" );
            fputs(work1,log_fp);
            fclose( log_fp );
        }
        else{
            log_fp = fopen(logfile, "a" );
            fputs(work1,log_fp);
            fclose( log_fp );
        }

        error_count = error_count + 1 ;
        error_count2++;
    }
CLOSE2:
    if ( cursor1 == 1 ) {
        EXEC SQL CLOSE attribute_row2;
    }
    if( exitcode == ERROR){
        goto ENDPROC ;
    }


    /* ログ出力件数出力 */
    if(error_count2 != 0){
        memset(work1, 0x00, sizeof(work1));
        sprintf(work1, "%d",error_count2);
        send_err(m$MBB1027W, 0, work1, NULL, NULL, G_STATION);
        exitcode = WARNING;
    }

	/*======================================================================*/
	/*----- 個別明細ローンテーブル -----------------------------------------*/
	/*======================================================================*/
    /*---------------------*/
    /* Get total row count */
    /*---------------------*/

    G_POSITION = __LINE__;
    EXEC SQL 
		SELECT 
			count(*) 
		INTO 
			:total_count
		FROM 
			TF_個別明細ローン
		;
    if( sqlca.sqlcode < 0 ){
        send_err(m$sql_statment,0,"SELECT COUNT(*) FROM TF_個別明細ローン",NULL,NULL,G_STATION);
        exitcode = ERROR ;
        goto ENDPROC ;
    }
    if( total_count == 0 ) {
        send_err( m$MBB1001W, 0, "TF_個別明細ローン", NULL, NULL, G_STATION ) ;
        goto ENDPROC ;
    }

    cursor1 = 0 ;
    error_count3 = 0 ;

    /*--------------------*/
    /* Check Commodity-ID */
    /*--------------------*/

    G_POSITION = __LINE__;
    EXEC SQL DECLARE attribute_row3 CURSOR FOR
		SELECT 
			DISTINCT 商品ID
		FROM 
			TF_個別明細ローン
		WHERE 
			商品ID IS NOT NULL AND 
			商品ID NOT IN (SELECT 商品ID FROM TF_商品) 
		;
    if( sqlca.sqlcode < 0 ){
        EXEC SQL ROLLBACK WORK RELEASE;
        send_err(m$sql_statment,0,"DECLARE attribute_row3",NULL,NULL,G_STATION);
        exitcode = ERROR ;
        goto ENDPROC ;
    }

    G_POSITION = __LINE__;
    EXEC SQL OPEN attribute_row3 ;
    if( sqlca.sqlcode < 0 ){
        EXEC SQL ROLLBACK WORK RELEASE;
        send_err(m$sql_statment,0,"OPEN attribute_row3",NULL,NULL,G_STATION);
        exitcode = ERROR ;
        goto ENDPROC ;
    }
    cursor1 = 1;

    while(1) {
        G_POSITION = __LINE__;
        EXEC SQL FETCH attribute_row3 INTO :commodity_id;
        if( sqlca.sqlcode < 0 ){
            EXEC SQL ROLLBACK WORK RELEASE;
            send_err(m$sql_statment,0,"FETCH attribute_row3",NULL,NULL,G_STATION);
            exitcode = ERROR ;
            goto ENDPROC ;
        }
        if( sqlca.sqlcode == ORA_NOF ){
            goto CLOSE3;
        }
        commodity_id.arr[commodity_id.len] = '\0';
        memset(work1, 0x00, sizeof(work1));
        sprintf(work1, "個別明細ローンデータの商品コード (%s) が商品マスタに登録されていません.\n", commodity_id.arr);
        if(error_count == 0){
            log_fp = fopen(logfile, "w" );
            fputs(work1,log_fp);
            fclose( log_fp );
        }
        else{
            log_fp = fopen(logfile, "a" );
            fputs(work1,log_fp);
            fclose( log_fp );
        }

        error_count = error_count + 1 ;
        error_count3++;
    }
CLOSE3:
    if ( cursor1 == 1 ) {
        EXEC SQL CLOSE attribute_row3;
    }
    if( exitcode == ERROR){
        goto ENDPROC ;
    }

    /* ログ出力件数出力 */
    if(error_count3 != 0){
        memset(work1, 0x00, sizeof(work1));
        sprintf(work1, "%d",error_count3);
        send_err(m$MBB1028W, 0, work1, NULL, NULL, G_STATION);
        exitcode = WARNING;
    }

#endif
/* %01 削除 END */

/*==========================================================================*/
/*      TERMINATION                                                         */
/*==========================================================================*/
    /*--------------------------*/
    /* Logged out ORACLE server */
    /*--------------------------*/
	

    /*---------------------------------*/
    /* Print process terminate message */
    /*---------------------------------*/
ENDPROC:
	if(exitcode == ERROR){
		send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
		exit(ERROR);
    }
	else {
		send_err( m$stop_process, NORMAL, process_name, "", "", G_STATION );
	}

	exit(exitcode);  
        
}
