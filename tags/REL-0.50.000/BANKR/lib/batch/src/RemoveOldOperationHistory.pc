/*==========================================================================*/
/* Copyright　Information Services International-Dentsu, Ltd.   　          */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : BANK・R−CC                                           */
/*                                                                          */
/* PROGRAM NAME     : 古い操作履歴データ削除                                */
/*                                                                          */
/* MODULE NAME      : RemoveOldOperationHistory                             */
/*                                                                          */
/* FUNCTION         : 保存期間の過ぎたTH_操作履歴のデータを削除する。       */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POint      : Main Module.                                          */
/*                                                                          */
/* INPUT            : argv[1]        ・・・保存期間(単位：月)               */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 09/07/02 | K.Miyahara  | First Edition.                            */
/* %01 | 10/06/23 | K.Miyahara  | 一括から分割コミットに変更				*/
/*==========================================================================*/
/*--------------------------------------------------------------------------*/
/* Standard include specification                                           */
/*--------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

/*---------------------------------------------------------------------------*/
/* User defined include specification                                        */
/*---------------------------------------------------------------------------*/
#include "msg.h"
#include "common.h"
#include "batchcommon.h"

EXEC SQL INCLUDE mbproc.h;

/*--------------------------------------------------------------------------*/
/*                            DEFINE STATEMENTS                             */
/*--------------------------------------------------------------------------*/
#define	COMMIT_COUNT	10000			/* コミット件数						*/

/*--------------------------------------------------------------------------*/
/*                            EXTERNAL DECLARES                             */
/*--------------------------------------------------------------------------*/
EXEC SQL BEGIN DECLARE SECTION;
    int		month_term;                 /* 保存期間(符号付き) */
	char	operation_date[14+1];		/* 操作日時 */
EXEC SQL END DECLARE SECTION;

char    process_name[43];
char    g_work[1024];
/*--------------------------------------------------------------------------*/
/*                           STRUCT DECLARATIONS                            */
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*                           SUBROUTNE DEFINITION                           */
/*--------------------------------------------------------------------------*/
extern int send_err();
extern int db_connect();
extern void errhandler();

static int check_digit(char *);

/****************************************************************************/
/*                                                                          */
/*                            PROCEDURE DIVISION                            */
/*                                                                          */
/****************************************************************************/

/*--------------------------------------------------------------------------*/
/*                              MAIN ROUTINE                                */
/*--------------------------------------------------------------------------*/
main( argc, argv )
int		argc;
char	*argv[];
{
/*--------------------------------------------------------------------------*/
/*                      LOCAL VARIABLE DECLARATIONS                         */
/*--------------------------------------------------------------------------*/
    int     exit_code;                      /* 終了コード                   */
	int     rc;                             /* リターンコード               */
    int     retention_period;               /* 保存期間(単位:月)            */
	int		db_connect_flag;				/* ＤＢ接続フラグ				*/
	int		cur1_open_flag;					/* カーソルオープンフラグ		*/
	int		delete_count;					/* 削除件数						*/
	int		delete_commit_count;			/* 削除コミット件数				*/
	char	work[256];     					/* 文字列ワーク領域				*/

/*==========================================================================*/
/*      INITIALIZATION                                                      */
/*==========================================================================*/

	/*-----------------------------*/
	/* Initialize environment      */
	/*-----------------------------*/
    exit_code = NORMAL ;
	rc = 0;
	retention_period = 0;
	db_connect_flag = 0;
	cur1_open_flag = 0;
	delete_count = 0;
	delete_commit_count = 0;

	/*-----------------------------*/
	/* Print process start message */
	/*-----------------------------*/
	strcpy( G_STATION, "RemoveOldOperationHistory" );
	
	memset(process_name,0x00,sizeof(process_name));
    strcpy(process_name,"古い操作履歴データ削除");

    send_err( m$start_process, NORMAL, process_name, "", "", G_STATION );

	/*-----------------------------*/
	/* Check parameter             */
	/*-----------------------------*/
	if( argc != 2 ) {
		send_err (m$invalid_parameter, ERROR, "保存期間(単位：月)", NULL, NULL, G_STATION);
		exit_code = ERROR;
		goto ENDPROC;
	}

	/* 数字チェック */
	rc = check_digit(argv[1]);
	if ( rc != NORMAL ) {
		send_err (m$invalid_parameter, ERROR, "保存期間(単位：月)　数字で指定して下さい", NULL, NULL, G_STATION);
		exit_code = ERROR;
		goto ENDPROC;
	}

	retention_period = atoi( argv[1] );

    /*-----------------------------*/
    /* Setup error handler routine */
    /*-----------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

	/*-----------------------------*/
	/* Connect to database         */
	/*-----------------------------*/
    G_POSITION = __LINE__;
    rc = db_connect();
    if ( rc != NORMAL ) {
        send_err( m$db_connect, rc, NULL, NULL, NULL, G_STATION );
        exit_code = ERROR;
        goto ENDPROC;
    }

	db_connect_flag = 1;

    /*======================================================================*/
    /*                      メ　イ　ン　処　理                              */
    /*======================================================================*/

    /*------------------------------------------------------------------**
    **  保存期限切れレコードの削除処理
    **------------------------------------------------------------------*/
    month_term = 0;
    month_term = retention_period * -1;

    G_POSITION = __LINE__;
    EXEC SQL DECLARE cur1 CURSOR FOR
		SELECT
			DISTINCT TO_CHAR( 操作日時, 'YYYYMMDDHH24MISS' )
		FROM
			TH_操作履歴
		WHERE
			操作日時 < TO_DATE( ADD_MONTHS( SYSDATE, :month_term ) )
		;
	if( sqlca.sqlcode < 0 ){
		send_err( m$sql_statment, sqlca.sqlcode, "DECLARE cur1", NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto ENDPROC;
	}

    G_POSITION = __LINE__;
    EXEC SQL OPEN cur1;
	if( sqlca.sqlcode < 0 ){
		send_err( m$sql_statment, sqlca.sqlcode, "OPEN cur1", NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto ENDPROC;
	}

	cur1_open_flag = 1;


    while( 1 ) {
		memset( operation_date, 0x00, sizeof( operation_date ) );

        G_POSITION = __LINE__;
        EXEC SQL FETCH cur1 INTO :operation_date;
		if( sqlca.sqlcode < 0 ){
			send_err( m$sql_statment, sqlca.sqlcode, "FETCH cur1", NULL, NULL, G_STATION );
			exit_code = ERROR;
			goto ENDPROC;
		}
        if( sqlca.sqlcode == ORA_NOF ) {
            break;
        }


		G_POSITION = __LINE__;
    	EXEC SQL 
			DELETE FROM 
				TH_操作履歴 
			WHERE 
				操作日時 = TO_DATE( :operation_date, 'YYYYMMDDHH24MISS' )
		;
		if ( sqlca.sqlcode < 0 ) {
			memset(work, 0x00, sizeof(work));
			sprintf(work, "DELETE FROM TH_操作履歴 WHERE 操作日時 = TO_DATE( '%s', 'YYYYMMDDHH24MISS' )", operation_date);
			send_err(m$sql_statment, sqlca.sqlcode, work, NULL, NULL, G_STATION );
			exit_code = ERROR;
			goto ENDPROC ;
		}

		delete_count = delete_count + sqlca.sqlerrd[2];

		if( delete_count >= COMMIT_COUNT ) {
			EXEC SQL COMMIT WORK;
			if( sqlca.sqlcode < 0 ){
				send_err( m$sql_statment, sqlca.sqlcode, "COMMIT", NULL, NULL, G_STATION );
				exit_code = ERROR;
				goto ENDPROC;
			}
			delete_commit_count = delete_commit_count + delete_count;
						
			memset(work, 0x00, sizeof(work));
			sprintf(work, "分割コミット:データ削除%d件でコミットしました。", delete_commit_count);
			send_err(m$message1, 0, work, NULL, NULL, G_STATION);

			delete_count = 0;
		}


	}

	EXEC SQL COMMIT WORK;
	if( sqlca.sqlcode < 0 ){
		send_err( m$sql_statment, sqlca.sqlcode, "COMMIT", NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto ENDPROC;
	}
	delete_commit_count = delete_commit_count + delete_count;

	/*
	**  削除レコード件数をログに出力
	*/
	memset(work, 0x00, sizeof(work));
	sprintf(work, "%d件のデータをTH_操作履歴から削除しました。", delete_commit_count);
	send_err(m$message1, 0, work, NULL, NULL, G_STATION);

    /*======================================================================**
    **      終  了  処  理
    **======================================================================*/
ENDPROC:
	/* カーソルクローズ */
	if( cur1_open_flag == 1 ){
		EXEC SQL CLOSE cur1;
	}

	/* ＤＢ切断 */
	if( db_connect_flag == 1 ){
		if ( exit_code == NORMAL ){
			EXEC SQL COMMIT WORK RELEASE;
			;
		}
		else{
			EXEC SQL ROLLBACK WORK RELEASE;
		}
	}

	/* 終了メッセージ出力 */
	if ( exit_code == NORMAL ){
		send_err( m$stop_process, NORMAL, process_name, "", "", G_STATION );  
    }
	else {
		send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
	}

    exit(exit_code);

}
/*****************************************************************************/
/* Function Name:                                                            */
/*      check_digit( char *buf )                                             */
/* Made by:                                                                  */
/* Description:数字チェック                                                  */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* rc              int           o   リターンコード                          */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:     全て数字(NORMAL)                                         */
/*                  数字以外有(ERROR)                                        */
/*                                                                           */
/*****************************************************************************/
int check_digit( char *buf )
{
	unsigned int len;
	unsigned int i;
	int rc;

	len = (unsigned int)strlen ( buf );

	for ( i = 0; i < len; i++ ) {
		rc = isdigit ( buf[i] );
		if ( rc == 0 ) {
			return ( ERROR );
		}
	}

	return ( NORMAL );

}