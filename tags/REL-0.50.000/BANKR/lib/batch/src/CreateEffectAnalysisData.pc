/*==========================================================================*/
/* Copyright　Information Services International-Dentsu, Ltd.   　          */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : BANK・R−CC                                           */
/*                                                                          */
/* PROGRAM NAME     : キャンペーン効果分析データ生成                        */
/*                                                                          */
/* MODULE NAME      : CreateEffectAnalysisData                              */
/*                                                                          */
/* FUNCTION         : 前月の顧客属性から効果分析テーブルを生成する。        */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POint      : Main Module.                                          */
/*                                                                          */
/* INPUT            : None                                                  */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 09/06/29 | K.Miyahara  | First Edition.                            */
/* %01 | 10/03/03 | K.Miyahara  | 表領域指定追加							*/
/* %02 | 10/05/11 | K.Miyahara  | テーブルの存在チェック追加				*/
/* %03 | 14/03/27 | N.Ogawa		| あおぞら更改対応							*/
/* %04 | 14/05/14 | ISID        | 表領域名を環境変数から取得する            */
/* %05 | 14/06/12 | M.Noguchi   | カラム:リスク商品残高を追加               */
/*==========================================================================*/
/*--------------------------------------------------------------------------*/
/* Standard include specification                                           */
/*--------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*---------------------------------------------------------------------------*/
/* User defined include specification                                        */
/*---------------------------------------------------------------------------*/
#include "msg.h"
#include "batchcommon.h"
#include "common.h"

EXEC SQL INCLUDE mbproc.h;

/*--------------------------------------------------------------------------*/
/*							DEFINE STATEMENTS								*/
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*							EXTERNAL DECLARES								*/
/*--------------------------------------------------------------------------*/
EXEC SQL BEGIN DECLARE SECTION;
	int		count;							/* カウンタ */
	char	sqlcmd[4096];					/* SQL文 */
	char	target_date[6+1];				/* 削除対象日付(YYYYMM) */
	char	target_table[32];				/* 対象テーブル名 */
EXEC SQL END DECLARE SECTION;

char    process_name[43];
char    g_work[1024];
/*--------------------------------------------------------------------------*/
/*							STRUCT DECLARATIONS								*/
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*							SUBROUTNE DEFINITION							*/
/*--------------------------------------------------------------------------*/
extern int send_err();
extern int db_connect();
extern void errhandler();

/****************************************************************************/
/*																			*/
/*							PROCEDURE DIVISION								*/
/*																			*/
/****************************************************************************/

/*--------------------------------------------------------------------------*/
/*                              MAIN ROUTINE                                */
/*--------------------------------------------------------------------------*/
main (argc, argv)
int     argc;
char    *argv[];
{
/*--------------------------------------------------------------------------*/
/*                      LOCAL VARIABLE DECLARATIONS                         */
/*--------------------------------------------------------------------------*/
	char	*tbs_efl_tbl;				/* キャンペーン効果分析テーブル用表領域名     %04 Add*/
	char	*tbs_efl_idx;				/* キャンペーン効果分析インデックス用表領域名 %04 Add*/
	int		exit_code;					/* 終了コード */
	int		return_code;				/* リターンコード */
	int		db_connect_flag;			/* ＤＢ接続フラグ */
	int		i;							/* カウンター */

	char	cmd_work[512];				/* コマンドワーク */
	char	target_table_zan[32];		/* 顧客属性テーブル名 */
	char	target_table_hen[32];		/* 顧客変動情報テーブル名 */

/*==========================================================================*/
/*      INITIALIZATION                                                      */
/*==========================================================================*/

	/*-----------------------------*/
	/* Initialize environment      */
	/*-----------------------------*/
	exit_code = NORMAL;
	return_code = 0;
	db_connect_flag = 0;
	i = 0;

	memset( cmd_work, 0x00, sizeof(cmd_work) );
	memset( target_table_zan, 0x00, sizeof(target_table_zan) );
	memset( target_table_hen, 0x00, sizeof(target_table_hen) );

	/*-----------------------------*/
	/* Print process start message */
	/*-----------------------------*/
    strcpy( G_STATION, "CreateEffectAnalysisData" );

	memset(process_name,0x00,sizeof(process_name));
	strcpy(process_name,"キャンペーン効果分析データ生成");

	send_err( m$start_process, NORMAL, process_name, "", "", G_STATION );


	/*-----------------------------*/
	/* Get environment variable    */
	/*-----------------------------*/
	/* %04 Add Start */
	if( ( tbs_efl_tbl = (char *)getenv( "TBS_NAME_EFF_TBL" ) ) == NULL ) {
		send_err( m$getenv, -1, "TBS_NAME_EFF_TBL", NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto ENDPROC;
	}

	if( ( tbs_efl_idx = (char *)getenv( "TBS_NAME_EFF_IDX" ) ) == NULL ) {
		send_err( m$getenv, -1, "TBS_NAME_EFF_IDX", NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto ENDPROC;
	}
	/* %04 Add End */

	/*-----------------------------*/
	/* Check parameter             */
	/*-----------------------------*/

    /*-----------------------------*/
    /* Setup error handler routine */
    /*-----------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

	/*-----------------------------*/
	/* Connect to database         */
	/*-----------------------------*/
	G_POSITION = __LINE__;
	return_code = db_connect();
	if( return_code != 0 ) {
		send_err( m$db_connect, return_code, NULL, NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto ENDPROC;
    }

	db_connect_flag = 1;

    /*======================================================================*/
    /*                      メ　イ　ン　処　理                              */
    /*======================================================================*/
	/* システム日付より1ヶ月前の年月(YYYYMM)取得 */
	memset( target_date, 0x00, sizeof(target_date) );
	G_POSITION = __LINE__;
	EXEC SQL
		SELECT
			TO_CHAR( ADD_MONTHS( SYSDATE, -1 ), 'YYYYMM' )
		INTO
			:target_date
		FROM
			DUAL
		;
	if ( sqlca.sqlcode < 0 ) {
		send_err( m$sql_statment, sqlca.sqlcode, "SELECT ADD_MONTHS( SYSDATE, -1 )", NULL, NULL, G_STATION );
		exit_code = ERROR ;
		goto ENDPROC ;
	}

	/*----------------------------------------------------------------------*/
	/* TA_効果分析YYYYMM生成					                            */
	/*----------------------------------------------------------------------*/
	/* VIEWチェックから対象顧客属性テーブル名セット */
	/* 現在参照されていない１ヶ月前の顧客属性をセットする */
	/* %03 削除 */
	/*
	strcpy( cmd_work, "CheckView TF_顧客属性" );
    send_err( m$message1, 0, cmd_work, NULL, NULL, G_STATION );
	return_code = system( cmd_work );
	*/

	/* %03 削除*/
	/*
	memset( target_table_zan, 0x00, sizeof(target_table_zan) );
	memset( target_table_hen, 0x00, sizeof(target_table_hen) );
	if( return_code == 1 ){
		strcpy( target_table_zan, "TF_顧客残高B" );
		strcpy( target_table_hen, "TF_顧客変動情報B" );
	}
	else if( return_code == 2 ){
		strcpy( target_table_zan, "TF_顧客残高A" );
		strcpy( target_table_hen, "TF_顧客変動情報A" );
	}
	else{
		exit_code = ERROR;
		goto ENDPROC;
	}
	*/

	/* テーブル存在チェック									*/
	/* 存在する場合はテーブル、インデックスの作成スキップ	*/
	count = 0;
	memset( target_table, 0x00, sizeof(target_table) );
	strcpy( target_table, "TA_効果分析" );
	strcat( target_table, target_date );

	G_POSITION = __LINE__;
	EXEC SQL
		SELECT
			COUNT(*)
		INTO
			:count
		FROM
			USER_TABLES
		WHERE
			TABLE_NAME = :target_table
		;
    if( sqlca.sqlcode < 0 ) {
    	send_err( m$sql_statment, 0, "SELECT COUNT(*) TA_効果分析YYYYMM", NULL, NULL, G_STATION );
    	exit_code = ERROR ;
    	goto ENDPROC ;
    }

	if( count > 0 ){
		send_err( m$message1, 0, "前月のTA_効果分析YYYYMM作成済みのためTable/Index作成処理スキップします。", NULL, NULL, G_STATION );
		goto CREATE_VIEW;
	}

	/* テーブル作成 */
	/* %03 あおぞら更改では残高テーブル、変動情報テーブルがないため、顧客属性のカラムを指定してデータ登録 */
	memset( sqlcmd, 0x00, sizeof(sqlcmd) );
	strcpy( sqlcmd, "CREATE TABLE" );
	strcat( sqlcmd, " TA_効果分析" );
	strcat( sqlcmd, target_date );
	strcat( sqlcmd, " TABLESPACE " );
	strcat( sqlcmd, tbs_efl_tbl ); /* %04 Change */
	/* %03 テーブル名変更 */
	/*
	strcat( sqlcmd, " AS SELECT" );
	strcat( sqlcmd, "  zan.店番," );
	strcat( sqlcmd, "  zan.CIFNO," );
	strcat( sqlcmd, "  zan.個人企業番号," );
	strcat( sqlcmd, "  zan.世帯番号," );
	strcat( sqlcmd, "  zan.総預金末残," );
	strcat( sqlcmd, "  zan.流動性預金末残," );
	strcat( sqlcmd, "  zan.固定性預金末残," );
	strcat( sqlcmd, "  zan.外貨普通預金末残," );
	strcat( sqlcmd, "  zan.外貨定期預金末残," );
	strcat( sqlcmd, "  zan.投資信託末残," );
	strcat( sqlcmd, "  zan.総預金平残," );
	strcat( sqlcmd, "  zan.流動性預金平残," );
	strcat( sqlcmd, "  zan.固定性預金平残," );
	strcat( sqlcmd, "  zan.外貨普通預金平残," );
	strcat( sqlcmd, "  zan.外貨定期預金平残," );
	strcat( sqlcmd, "  zan.投資信託平残," );
	strcat( sqlcmd, "  hen.電気," );
	strcat( sqlcmd, "  hen.ガス," );
	strcat( sqlcmd, "  hen.電話," );
	strcat( sqlcmd, "  hen.水道," );
	strcat( sqlcmd, "  hen.NHK," );
	strcat( sqlcmd, "  hen.取引項目１," );
	strcat( sqlcmd, "  hen.取引項目２," );
	strcat( sqlcmd, "  hen.取引項目３," );
	strcat( sqlcmd, "  hen.取引項目４," );
	strcat( sqlcmd, "  hen.取引項目５," );
	strcat( sqlcmd, "  hen.取引項目６," );
	strcat( sqlcmd, "  hen.取引項目７," );
	strcat( sqlcmd, "  hen.取引項目８," );
	strcat( sqlcmd, "  hen.取引項目９," );
	strcat( sqlcmd, "  hen.取引項目１０," );
	strcat( sqlcmd, "  hen.取引項目１１," );
	strcat( sqlcmd, "  hen.取引項目１２," );
	strcat( sqlcmd, "  hen.取引項目１３," );
	strcat( sqlcmd, "  hen.取引項目１４," );
	strcat( sqlcmd, "  hen.取引項目１５," );
	strcat( sqlcmd, "  hen.取引項目１６," );
	strcat( sqlcmd, "  hen.取引項目１７," );
	strcat( sqlcmd, "  hen.取引項目１８," );
	strcat( sqlcmd, "  hen.取引項目１９," );
	strcat( sqlcmd, "  hen.取引項目２０ " );
	strcat( sqlcmd, "FROM " );
	*/

	/* %03 テーブル名変更 */
	/* strcat( sqlcmd, target_table_zan );
	strcat( sqlcmd, " zan LEFT OUTER JOIN " );
	strcat( sqlcmd, target_table_hen ); */

	strcat( sqlcmd, " AS SELECT" );
	strcat( sqlcmd, "  店番," );
	strcat( sqlcmd, "  CIFNO," );
	strcat( sqlcmd, "  個人企業番号," );
	strcat( sqlcmd, "  世帯番号," );
	strcat( sqlcmd, "  当行金融資産残高," );
	strcat( sqlcmd, "  預り資産残高１," );
	strcat( sqlcmd, "  預り資産残高２," );
	strcat( sqlcmd, "  預り資産残高３," );
	strcat( sqlcmd, "  流動性預金残高," );
	strcat( sqlcmd, "  定期性預金残高," );
	strcat( sqlcmd, "  仕組預金残高," );
	strcat( sqlcmd, "  外貨預金残高," );
	strcat( sqlcmd, "  投信残高," );
	strcat( sqlcmd, "  債券残高, " );		/* %05 Change ,を追加*/
	strcat( sqlcmd, "  リスク商品残高 " );	/* %05 Add    */
	strcat( sqlcmd, "FROM " );

	strcat( sqlcmd, " TF_顧客属性 "  );
	
	/* %03 テーブル名変更 */
	/*
	if( strcmp( G_KOKYAKU_KEY, CMF_JOIN ) == 0 ){	
 		strcat( sqlcmd, " hen ON zan.CIFNO = hen.CIFNO" );
	}
	else {
 		strcat( sqlcmd, " hen ON zan.店番 = hen.店番 AND zan.CIFNO = hen.CIFNO" );
	}
	*/

	G_POSITION = __LINE__;
	EXEC SQL EXECUTE IMMEDIATE :sqlcmd;
	if( sqlca.sqlcode < 0 ){
		send_err( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto ENDPROC;
	}

	/* インデックス作成 */
	memset( sqlcmd, 0x00, sizeof(sqlcmd) );
	strcpy( sqlcmd, "CREATE INDEX" );
	strcat( sqlcmd, " IX_効果分析" );
	strcat( sqlcmd, target_date );
	strcat( sqlcmd, " ON TA_効果分析" );
	strcat( sqlcmd, target_date );
	if( strcmp( G_KOKYAKU_KEY, CMF_JOIN ) == 0 ){	
		strcat( sqlcmd, " ( CIFNO )" );
	}
	else {
		strcat( sqlcmd, " ( 店番, CIFNO )" );
	}
	strcat( sqlcmd, " TABLESPACE " );
	strcat( sqlcmd, tbs_efl_idx );		 /* %04 Change */

	G_POSITION = __LINE__;
	EXEC SQL EXECUTE IMMEDIATE :sqlcmd;
	if( sqlca.sqlcode < 0 ){
		send_err( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto ENDPROC;
	}

	/*----------------------------------------------------------------------*/
	/* 1ヶ月前〜13ヶ月前のビュー生成					                    */
	/*----------------------------------------------------------------------*/
CREATE_VIEW:
	for( i = 1; i <= 13; i++ ){
		/* 対象の日付取得 */
		memset( sqlcmd, 0x00, sizeof(sqlcmd) );
		sprintf( sqlcmd, "SELECT TO_CHAR( ADD_MONTHS( SYSDATE, -%d ), 'YYYYMM' ) FROM DUAL", i );

		G_POSITION = __LINE__;
		EXEC SQL PREPARE sql1 FROM :sqlcmd ;
		if ( sqlca.sqlcode < 0 ) {
			send_err( m$sql_statment, sqlca.sqlcode, "PREPARE sql1", NULL, NULL, G_STATION );
			exit_code = ERROR ;
			goto ENDPROC ;
		}

		G_POSITION = __LINE__;
		EXEC SQL DECLARE cur1 CURSOR FOR sql1;
		if ( sqlca.sqlcode < 0 ) {
			send_err( m$sql_statment, sqlca.sqlcode, "DECLARE cur1", NULL, NULL, G_STATION );
			exit_code = ERROR ;
			goto ENDPROC ;
		}

		G_POSITION = __LINE__;
		EXEC SQL OPEN cur1;
		if ( sqlca.sqlcode < 0 ) {
			send_err( m$sql_statment, sqlca.sqlcode, "OPEN cur1", NULL, NULL, G_STATION );
			exit_code = ERROR ;
			goto ENDPROC ;
		}

		memset( target_date, 0x00, sizeof(target_date) );
        G_POSITION = __LINE__;
		EXEC SQL FETCH cur1 INTO :target_date;
        if( sqlca.sqlcode < 0 ) {
        	send_err( m$sql_statment, sqlca.sqlcode, "FETCH cur1", NULL, NULL, G_STATION );
			EXEC SQL CLOSE cur1;
        	exit_code = ERROR ;
        	goto ENDPROC ;
        }

		EXEC SQL CLOSE cur1;

		/* TA_効果分析YYYYMMの存在チェック */
		count = 0;
		memset( target_table, 0x00, sizeof(target_table) );
		strcpy( target_table, "TA_効果分析" );
		strcat( target_table, target_date );

		G_POSITION = __LINE__;
		EXEC SQL
			SELECT
				COUNT(*)
			INTO
				:count
			FROM
				USER_TABLES
			WHERE
				TABLE_NAME = :target_table
			;
        if( sqlca.sqlcode < 0 ) {
        	send_err( m$sql_statment, sqlca.sqlcode, "SELECT COUNT(*) TA_効果分析YYYYMM", NULL, NULL, G_STATION );
			EXEC SQL CLOSE cur1;
        	exit_code = ERROR ;
        	goto ENDPROC ;
        }

		memset( sqlcmd, 0x00, sizeof(sqlcmd) );
		sprintf( sqlcmd, "CREATE OR REPLACE VIEW TA_効果分析%dヶ月前", i );
		/* 存在する場合、TA_効果分析○ヶ月前ビュー作成 */
		if( count > 0 ){
			strcat( sqlcmd, " AS SELECT * FROM ");
			strcat( sqlcmd, target_table );
		}
		/* 存在しない場合、データの存在しないビュー作成 */
		else{
			/* %03 テーブル名変更 */
			/*
			strcat( sqlcmd, " AS SELECT" );
			strcat( sqlcmd, "  zan.店番," );
			strcat( sqlcmd, "  zan.CIFNO," );
			strcat( sqlcmd, "  zan.個人企業番号," );
			strcat( sqlcmd, "  zan.世帯番号," );
			strcat( sqlcmd, "  zan.総預金末残," );
			strcat( sqlcmd, "  zan.流動性預金末残," );
			strcat( sqlcmd, "  zan.固定性預金末残," );
			strcat( sqlcmd, "  zan.外貨普通預金末残," );
			strcat( sqlcmd, "  zan.外貨定期預金末残," );
			strcat( sqlcmd, "  zan.投資信託末残," );
			strcat( sqlcmd, "  zan.総預金平残," );
			strcat( sqlcmd, "  zan.流動性預金平残," );
			strcat( sqlcmd, "  zan.固定性預金平残," );
			strcat( sqlcmd, "  zan.外貨普通預金平残," );
			strcat( sqlcmd, "  zan.外貨定期預金平残," );
			strcat( sqlcmd, "  zan.投資信託平残," );
			strcat( sqlcmd, "  hen.電気," );
			strcat( sqlcmd, "  hen.ガス," );
			strcat( sqlcmd, "  hen.電話," );
			strcat( sqlcmd, "  hen.水道," );
			strcat( sqlcmd, "  hen.NHK," );
			strcat( sqlcmd, "  hen.取引項目１," );
			strcat( sqlcmd, "  hen.取引項目２," );
			strcat( sqlcmd, "  hen.取引項目３," );
			strcat( sqlcmd, "  hen.取引項目４," );
			strcat( sqlcmd, "  hen.取引項目５," );
			strcat( sqlcmd, "  hen.取引項目６," );
			strcat( sqlcmd, "  hen.取引項目７," );
			strcat( sqlcmd, "  hen.取引項目８," );
			strcat( sqlcmd, "  hen.取引項目９," );
			strcat( sqlcmd, "  hen.取引項目１０," );
			strcat( sqlcmd, "  hen.取引項目１１," );
			strcat( sqlcmd, "  hen.取引項目１２," );
			strcat( sqlcmd, "  hen.取引項目１３," );
			strcat( sqlcmd, "  hen.取引項目１４," );
			strcat( sqlcmd, "  hen.取引項目１５," );
			strcat( sqlcmd, "  hen.取引項目１６," );
			strcat( sqlcmd, "  hen.取引項目１７," );
			strcat( sqlcmd, "  hen.取引項目１８," );
			strcat( sqlcmd, "  hen.取引項目１９," );
			strcat( sqlcmd, "  hen.取引項目２０ " );
			strcat( sqlcmd, "FROM " );
			strcat( sqlcmd, target_table_zan );
			strcat( sqlcmd, " zan LEFT OUTER JOIN " );
			strcat( sqlcmd, target_table_hen );
			if( strcmp( G_KOKYAKU_KEY, CMF_JOIN ) == 0 ){
				strcat( sqlcmd, " hen ON zan.CIFNO = hen.CIFNO " );
			}
			else {
				strcat( sqlcmd, " hen ON zan.店番 = hen.店番 AND zan.CIFNO = hen.CIFNO " );
			}
			*/

			strcat( sqlcmd, " AS SELECT" );
			strcat( sqlcmd, "  店番," );
			strcat( sqlcmd, "  CIFNO," );
			strcat( sqlcmd, "  個人企業番号," );
			strcat( sqlcmd, "  世帯番号," );
			strcat( sqlcmd, "  当行金融資産残高," );
			strcat( sqlcmd, "  預り資産残高１," );
			strcat( sqlcmd, "  預り資産残高２," );
			strcat( sqlcmd, "  預り資産残高３," );
			strcat( sqlcmd, "  流動性預金残高," );
			strcat( sqlcmd, "  定期性預金残高," );
			strcat( sqlcmd, "  仕組預金残高," );
			strcat( sqlcmd, "  外貨預金残高," );
			strcat( sqlcmd, "  投信残高," );
			strcat( sqlcmd, "  債券残高, " );		/* %05 Change ,を追加*/
			strcat( sqlcmd, "  リスク商品残高 " );	/* %05 Add    */
			strcat( sqlcmd, "FROM " );

			strcat( sqlcmd, " TF_顧客属性 "  );
			strcat( sqlcmd, " WHERE" );
			strcat( sqlcmd, " 店番 IS NULL" );

		}

		G_POSITION = __LINE__;
		EXEC SQL EXECUTE IMMEDIATE :sqlcmd;
		if( sqlca.sqlcode < 0 ){
			send_err( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION );
			exit_code = ERROR;
			goto ENDPROC;
		}
	}

    /*======================================================================**
    **              終了処理
    **======================================================================*/
ENDPROC:
	/* ＤＢ切断 */
	if( db_connect_flag == 1){
		if( exit_code == NORMAL ){
			EXEC SQL COMMIT WORK RELEASE;
		}
		else{
			EXEC SQL ROLLBACK WORK RELEASE;
		}
	}

	/* 終了メッセージ出力 */
	if ( exit_code == NORMAL ){
		send_err( m$stop_process, NORMAL, process_name, "", "", G_STATION );  
	}
	else {
		send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
	}

	exit(exit_code);

}
