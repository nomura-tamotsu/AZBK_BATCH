/*==========================================================================*/
/* Copyright　Information Services International-Dentsu, Ltd.   　          */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : BANK・R−CC                                           */
/*                                                                          */
/* PROGRAM NAME     : オペレータ情報連携抽出                                */
/*                                                                          */
/* MODULE NAME      : DailyTermDeposit                                      */
/*                                                                          */
/* FUNCTION         : オペレータ情報連携抽出処理を行う                      */
/*                                                                          */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POint      : Main Module.                                          */
/*                                                                          */
/* INPUT            : argv[1]・・処理モード(1:通常 2:障害時)                */
/*                  : argv[2]・・オペレータ情報連携ファイル(ﾌﾙﾊﾟｽ)          */
/*                    argv[3]・・抽出開始日(モード2の時のみ指定)            */
/*                    argv[4]・・抽出終了日(モード2の時のみ指定)            */
/*                                                                          */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 14/04/21 | ISID        | First Edition.                            */
/*==========================================================================*/
/*---------------------------------------------------------------------------*/
/* Standard include specification                                            */
/*---------------------------------------------------------------------------*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <errno.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <time.h>

/*---------------------------------------------------------------------------*/
/* User defined include specification                                        */
/*---------------------------------------------------------------------------*/
#include "msg.h"
#include "common.h"
#include "batchcommon.h"
#include "apl_common.h"

EXEC SQL INCLUDE mbproc.h;

/*---------------------------------------------------------------------------*/
/* Internal macro definition                                                 */
/*---------------------------------------------------------------------------*/
#define OPE_PASSWORD        "00000000"               /* パスワード           */
#define PASS_LIMIT          "99991231"               /* パスワード有効期限   */
#define PASS_START          "00010101"               /* パスワード利用開始日 */
#define OPE_TEKIYO          "TB"                     /* オペレータ摘要       */

/* オペレータ情報連携ファイル */
typedef struct _SEND_FILE_DATA {
    char szRecordID        [  1];                    /* 処理区分             */
    char szRecvDate        [  8];                    /* 更新日付             */
    char szfiller01        [  8];                    /* 予備                 */
    char szOperatorId      [ 16];                    /* オペレータID         */
    char szOperatorName    [ 32];                    /* オペレータ氏名       */
    char szOperatorKbn     [  1];                    /* オペレータ区分       */
    char szPassword        [ 32];                    /* パスワード           */
    char szPassLimit       [  8];                    /* パスワード有効期限   */
    char szPassStartDate   [  8];                    /* パスワード利用開始日 */
    char szOperatorTekiyo  [ 80];                    /* オペレータ摘要       */
    char szfiller02        [ 61];                    /* 予備                 */
    char szKaigyou         [  1];                    /* 改行                 */

} SEND_FILE_DATA;

typedef struct _COUNT {
    int  iRecNum;                                    /* 処理件数             */
    int  iOkNum ;                                    /* 正常終了             */
    int  iInsNum;                                    /* 正常終了（新規登録） */
    int  iUpdNum;                                    /* 正常終了（更新）     */
    int  iDelNum;                                    /* 正常終了（削除）     */
    int  iNgNum ;                                    /* ERROR終了            */
} COUNT;

/*---------------------------------------------------------------------------*/
/* Global variable specification                                             */
/*---------------------------------------------------------------------------*/
/* 設定ファイル項目（ホスト変数以外）*/
char g_szSyoriDate      [9];                         /* 処理日付             */
char g_szSendFile       [AP_CONFIG_LINE];      /* オペレータ情報連携ファイル */
char g_szLogFile        [AP_CONFIG_LINE];            /* 取引ログファイル     */


FILE *g_pfSendFile;


char g_szSystemDate[22];                              /* システム日付         */
char g_szSystemDateBuf[22];                           /* システム日付         */

char g_szDtlMsg           [AP_C_NOTE_LEN_H];         /* 事象詳細文字列       */

char    process_name[43];
char    g_work[1024];
int		g_mode;										/* 処理モード 1:通常運用 2:障害時運用 */
		
char g_StartDate[9];								/* 開始日                */
char g_EndDate[9];									/* 終了日                */

int file_open_flag  = 0;							/* ファイルオープンフラグ */
int cusor_open_flag = 0;							/* カーソルオープンフラグ */



/*---------------------------------------------------------------------------*/
/* Host Variable                                                             */
/*---------------------------------------------------------------------------*/
EXEC SQL INCLUDE SQLCA;
EXEC SQL BEGIN DECLARE SECTION;
/* ＤＢ接続情報 */
    char h_DB2DBNAME              [ 8];              /* ＤＢ名               */
/* TM_ユーザ */
    char h_userId                 [ 9];              /* ユーザID             */
    char h_userNm                 [25];              /* ユーザ名             */
    char h_shuryobi               [11];              /* 終了日               */
    short i_h_shuryobi;
    char h_IbOperatorKbn          [ 2];              /* IBオペレータ区分     */
    char h_FROM_TS               [ 27];         /* 対象抽出用タイムスタンプ  */
	char h_TO_TS                 [ 27];         /* 対象抽出用タイムスタンプ  */
	char h_process_id             [ 5];				/* 処理ID                */
    long h_COUNTER;                                /* カウンター             */
EXEC SQL END DECLARE SECTION;

/*---------------------------------------------------------------------------*/
/* Internal function prototype                                               */
/*---------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
/*  #5                       SUBROUTNE DEFINITION                           */
/*--------------------------------------------------------------------------*/
extern int send_err();
extern void errhandler();
extern int db_connect();
extern char *FcNumbertoString ( );
void rtrim();


static void initialize( int ac, char *av[], char *g_szDtlMsg );
static int  get_previous_date ( const char *process_id );
static int  update_previous_date ( const char *process_id );
static int  cursorOpen( char *g_szDtlMsg );
static void makeExtractionMessage ( char *from , char *to );
static void editDate ( int mode, char *src, char *dest );

static int  readTables( char *g_szDtlMsg );

static int  putSendData( char *g_szDtlMsg );
static int  commit( void );
static int  rollback( void);
static void finalize( int rc );


/*****************************************************************************/
/* Function Name:                                                            */
/*   int main( int argc, char *argv[] )                                      */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*      メイン処理                                                           */
/*                                                                           */
/* Arguments:                                                                */
/* Type     Name              I/O    Content                                 */
/* -------- ----------------- --- ------------------------------------------ */
/*    int    argc              I  引数の数                                   */
/*    char  *argv[]   argv[1]  I  処理モード(1:通常 2:障害時)                */
/*                    argv[2]  I  オペレータ情報連携ファイル(ﾌﾙﾊﾟｽ)          */
/*                    argv[3]  I  抽出開始日(モード2の時のみ指定)            */
/*                    argv[4]  I  抽出終了日(モード2の時のみ指定)            */
/*                                                                           */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
int main(int argc, char *argv[])
{
	int     exit_code = NORMAL;
	int		rc = NORMAL;

	COUNT    dCount;

	/*-----------------------------*/
    /* Print process start message */
    /*-----------------------------*/

    strcpy( G_STATION, "OperatorInfomationExport" );
	
	memset(process_name,0x00,sizeof(process_name));
    strcpy(process_name,"オペレータ情報連携抽出処理");

    send_err( m$start_process, NORMAL, process_name, "", "", G_STATION );


    /*-------------------------------------------------------*/
    /* Setup error handler routine                           */
    /*-------------------------------------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

    G_POSITION = __LINE__;
    rc = db_connect() ;
    if ( rc != NORMAL ) {
        send_err( m$db_connect, rc, "", "", "", G_STATION );
        rc = ERROR;
        goto ENDPROC ;
    }

    /* ---------- */
    /* 初期化処理 */
    /* ---------- */
    initialize( argc, argv, g_szDtlMsg );

    memset ( &dCount, 0x0, sizeof(dCount));

    while ( 1 ) {
        /* TM_ユーザテーブルの読込 */
		if(( rc = readTables( g_szDtlMsg )) != NORMAL ) {
            break;
		}
		if( sqlca.sqlcode == ORA_NOF ) {
            break;
		}
		/* printf("h_userId=[%s]\n",h_userId); */

        /* オペレータ情報連携ファイルへの書き込み */
		if(( rc = putSendData( g_szDtlMsg )) != NORMAL ) {
            break;
		}

        dCount.iRecNum++;
    }


    if ( rc == NORMAL ){
        dCount.iOkNum = dCount.iRecNum;
    }
	 
	if( rc == NORMAL ) {
		if ( dCount.iRecNum == 0 ){
			sprintf ( g_szDtlMsg, "オペレータ情報連携ファイル(%s)は０件ファイルです。", g_szSendFile );
		}
		else {
			sprintf ( g_szDtlMsg, "オペレータ情報連携ファイル(%s) %d 件のデータを抽出しました。", g_szSendFile ,dCount.iRecNum );
		}
		send_err (m$message1, NORMAL, g_szDtlMsg, NULL, NULL, G_STATION);
    }


	/* 次回抽出条件更新 (通常時のみ更新)*/
	if ( g_mode == USUALITY &&  rc == NORMAL ) {
		rc = update_previous_date ( "IB1" );
		if ( rc == NORMAL ) {
			/* ＤＢのコミット */
			rc = commit();
		}
		else{
			rollback();
		}
	}

ENDPROC:	
	if ( rc == NORMAL ) {
        send_err( m$stop_process, NORMAL, process_name, "", "", G_STATION );
    } else {
        send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
    }

	finalize( rc );
}

/*****************************************************************************/
/* Function Name:                                                            */
/*   initialize( int argc, char* argv[], char *g_szDtlMsg )                  */
/*                                                                           */
/* Description:                                                              */
/*   初期処理                                                                */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* argc            int           I   起動パラメータカウント                  */
/* argv            char*         I   起動パラメータ                          */
/* g_szDtlMsg      char*         I   メッセージ格納領域                      */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   ERROR     : エラー                                                      */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*   1 アプリケーション開始後、1度だけ呼ぶこと                               */
/*   2 エラー時は上記ステータスでexitする                                    */
/*                                                                           */
/*****************************************************************************/
static void initialize( int ac, char *av[], char *g_szDtlMsg )
{

    time_t t = time( NULL );

	int exit_code=NORMAL;
	int rc;

	

    /* システム日付を取得する */
	strftime( g_szSystemDate, sizeof( g_szSystemDate ), "%Y%m%d %H%M%S", localtime( &t ));
    strcpy( g_szSystemDateBuf, g_szSystemDate );
	memcpy ( g_szSyoriDate , g_szSystemDate, 8 );


	/* 引数処理 */
	if ( ac >= 2 ) {
		if ( !strcmp ( av[1] , "1" )) { /* 通常 */
			g_mode = USUALITY;
		}
		else if ( !strcmp ( av[1] , "2" )) { /* 障害時 */
			g_mode = OBSTACLE;
		}
		else {
			sprintf (g_szDtlMsg,"第1引数:処理モードは、1 または 2を指定して下さい(1:通常 2:障害時)");
			send_err (m$invalid_parameter, ERROR, g_szDtlMsg, NULL, NULL, G_STATION);
			exit_code = ERROR;
			goto initialize_end;
		}
	}
	else {
		sprintf (g_szDtlMsg,"処理モード(1:通常 2:障害時) 抽出ファイル名 [抽出開始日 抽出終了日]");
		send_err (m$invalid_parameter, ERROR, g_szDtlMsg, NULL, NULL, G_STATION);
		exit_code = ERROR;
		goto initialize_end;
	}

	switch ( g_mode ) {
		case USUALITY: /* 通常 */
			if ( ac == 3 ) {
				strcpy ( g_szSendFile, av[2] );
			}
			else {
				sprintf (g_szDtlMsg,"処理モード(1:通常) 抽出ファイル名");
				send_err (m$invalid_parameter, ERROR, g_szDtlMsg, NULL, NULL, G_STATION);
				exit_code = ERROR;
				goto initialize_end;
			}

			break;

		case OBSTACLE:/* 障害時 */
			if ( ac == 5 ) {
				strcpy ( g_szSendFile, av[2] );
				if ( strlen(av[3]) > 8 || strlen(av[4]) > 8 ) {
					sprintf (g_szDtlMsg,"抽出開始日 または 抽出終了日のレングスが長すぎます(YYYYMMDD)");
					send_err (m$invalid_parameter, ERROR, g_szDtlMsg, NULL, NULL, G_STATION);
					exit_code = ERROR;
					goto initialize_end;
				}
				else {
					strcpy ( g_StartDate,  av[3] );
					strcpy ( g_EndDate,    av[4] );
				}


			}
			else {
				sprintf (g_szDtlMsg,"処理モード(2:障害時) 抽出ファイル名 抽出開始日 抽出終了日");
				send_err (m$invalid_parameter, ERROR, g_szDtlMsg, NULL, NULL, G_STATION);
				exit_code = ERROR;
				goto initialize_end;
			}

			break;

		default:
			/* 上部でエラーチェック済なので　ここのロジックは通らない */
			/* 後のカスタマイズの為にdefaultを残しています            */
			break;
	}

	memset ( h_FROM_TS, 0x0, sizeof(h_FROM_TS) );
	memset ( h_TO_TS,   0x0, sizeof(h_TO_TS) );

	/* 抽出条件セット (フォーマット:YYYYMMDD HH24MISS) */
	switch ( g_mode ) {
		case USUALITY: /* 通常 */
			strcpy ( h_TO_TS ,   g_szSystemDate );
			rc = get_previous_date ( "IB1" );
			if ( rc != NORMAL ) {
				exit_code = ERROR;
				goto initialize_end;
			}
			rtrim( h_FROM_TS );

			break;

		case OBSTACLE:/* 障害時 */			
			strcpy ( h_FROM_TS , g_StartDate );
			strcat ( h_FROM_TS, " 000000" );

			strcpy ( h_TO_TS ,   g_EndDate );
			strcat ( h_TO_TS,   " 235959" );

			break;    

			
		default:
			/* 上部でエラーチェック済なので　ここのロジックは通らない */
			/* 後のカスタマイズの為にdefaultを残しています            */
			break;
		
	}


    /* オペレータ情報連携ファイルのオープン */
    if(( g_pfSendFile = fopen( g_szSendFile, "w" )) == NULL ) {
		sprintf( g_szDtlMsg, "オペレータ情報連携ファイル%sのオープンに失敗しました。", g_szSendFile );
		send_err( m$file_open, errno, g_szDtlMsg, NULL, NULL, G_STATION );

		exit_code = ERROR;
		goto initialize_end;

    }
	file_open_flag = 1;

	/* 抽出条件をメッセージ出力 */
	makeExtractionMessage ( h_FROM_TS , h_TO_TS );


    /* TM_ユーザテーブルのカーソルオープン */
	if( cursorOpen( g_szDtlMsg ) != NORMAL ) {
		exit_code = ERROR;
		goto initialize_end;
        exit( ERROR );
	}

	cusor_open_flag = 1;

initialize_end:

	if ( exit_code != NORMAL ) {
		send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
		exit ( exit_code );    
	}

}

/*****************************************************************************/
/* Function Name:                                                            */
/*   cursorOpen( char *g_szDtlMsg )                                          */
/*                                                                           */
/* Description:                                                              */
/*   TM_ユーザテーブルカーソルオープン                                       */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* g_szDtlMsg      char*         I   メッセージ格納領域                      */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL       : 正常終了                                                 */
/*   ERROR        : カーソルオープンエラー                                   */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/*****************************************************************************/
static int cursorOpen( char *g_szDtlMsg )
{


    /* カーソル定義 */
	G_POSITION = __LINE__;
    EXEC SQL DECLARE CUR_01 CURSOR FOR
        SELECT
            ユーザID,                                /* ユーザID             */
            ユーザ名,                                /* ユーザ名             */
            TO_CHAR(終了日,'YYYY-MM-DD')             /* 終了日               */
        FROM
            TM_ユーザ                         /* TM_ユーザテーブル    */
        WHERE
            登録日 >= TO_DATE(:h_FROM_TS, 'YYYYMMDD HH24MISS')  AND
			登録日 <  TO_DATE(:h_TO_TS,   'YYYYMMDD HH24MISS')
        ORDER BY
            ユーザID;

    /* カーソル・オープン */
    EXEC SQL OPEN CUR_01;
    if( sqlca.sqlcode != 0 ) {
		sprintf( g_szDtlMsg,
				"カーソル(CUR_01)オープン・エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);

        return ERROR;
    }

    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*   readTables( char *g_szDtlMsg )                                          */
/*                                                                           */
/* Description:                                                              */
/*   TM_ユーザテーブルの読込                                                 */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* g_szDtlMsg      char*         I   メッセージ格納領域                      */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL       : 正常終了                                                 */
/*   ERROR        : テーブルセレクト時エラー                                 */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/*****************************************************************************/
static int readTables( char *g_szDtlMsg )
{

    /* ホスト変数の初期化 */
    memset( h_userId        , '\0', sizeof( h_userId        ));/* ユーザID */
    memset( h_userNm        , '\0', sizeof( h_userNm        ));/* ユーザ名 */
    memset( h_shuryobi      , '\0', sizeof( h_shuryobi      ));/* 終了日 */
    memset( h_IbOperatorKbn , '\0', sizeof( h_IbOperatorKbn ));/* IBオペレータ区分 */

	G_POSITION = __LINE__;
    EXEC SQL FETCH CUR_01
        INTO
            :h_userId,
            :h_userNm,
            :h_shuryobi:i_h_shuryobi;


    /* エラーチェック */
    if( sqlca.sqlcode == ORA_NOF ) {
        return NORMAL;
    } 
	else if( sqlca.sqlcode != 0 ) {
		send_err ( m$emb_error, sqlca.sqlcode, "TM_ユーザテーブルの取得でエラーが発生しました", NULL, NULL, G_STATION);
        
        return ERROR;
    }

    return NORMAL;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*   putSendData( char *g_szDtlMsg )                                         */
/*                                                                           */
/* Description:                                                              */
/*   オペレータ情報提携ファイルへの書き込み                                  */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* g_szDtlMsg      char*         I   メッセージ格納領域                      */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL    : 正常終了                                                    */
/*   ERROR     : データ異常                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/*****************************************************************************/
static int putSendData( char *g_szDtlMsg )
{
    SEND_FILE_DATA dData;

    /* バッファ初期化 */
    memset( &dData, ' ', sizeof( dData ));

    /* 処理区分             */

    if( i_h_shuryobi != ORA_NULL ) {
        sprintf( h_shuryobi, "%.*s%.*s%.*s",
             4, &h_shuryobi[0], 2, &h_shuryobi[5], 2, &h_shuryobi[8] ); /* 終了日の-(ハイフン)を除去 */
    }
    else {
        strcpy( h_shuryobi, "99999999" );
    }


    if( atol( g_szSyoriDate ) > atol( h_shuryobi ) ) {
        memcpy( dData.szRecordID, FcNumbertoString( AP_C_SYORI_DELETE, 1 ), sizeof( dData.szRecordID ));
    }
    else{
        memcpy( dData.szRecordID, FcNumbertoString( AP_C_SYORI_NEW, 1 ), sizeof( dData.szRecordID ));
    }

    /* 更新日付             */
    memcpy( dData.szRecvDate, g_szSystemDateBuf, sizeof( dData.szRecvDate ));

    /* オペレータID         */
    memcpy( dData.szOperatorId, h_userId, sizeof( h_userId ) - 1 );
    
    /* オペレータ氏名       */
    memcpy( dData.szOperatorName, h_userNm, sizeof( h_userNm ) - 1 );

    /* オペレータ区分       */
	/* バッチ連携では"A"固定値でIF */
	dData.szOperatorKbn[0] = 'A';
    /*memcpy( dData.szOperatorKbn, h_IbOperatorKbn, sizeof( h_IbOperatorKbn ) - 1 );*/

    /* パスワード           */
    memcpy( dData.szPassword, OPE_PASSWORD, (unsigned int)strlen( OPE_PASSWORD ));

    /* パスワード有効期限   */
    memcpy( dData.szPassLimit, PASS_LIMIT, (unsigned int)strlen( PASS_LIMIT ));

    /* パスワード利用開始日 */
    memcpy( dData.szPassStartDate, PASS_START, (unsigned int)strlen( PASS_START ));

    /* オペレータ摘要       */
    memcpy( dData.szOperatorTekiyo, OPE_TEKIYO, (unsigned int)strlen( OPE_TEKIYO ) );

    /* 改行 */
    memset (dData.szKaigyou,0x0a, sizeof(dData.szKaigyou ));


    /* オペレータ情報連携ファイルへの書き込み */
    if ( fwrite( &dData, sizeof( dData ), 1, g_pfSendFile ) != 1 ) {
		send_err ( m$file_write, errno, g_szSendFile, &dData , NULL, G_STATION);
        return ERROR;
    }

    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*     commit( void )                                                        */
/* Made by:                                                                  */
/* Description:ＤＢのコミット                                                */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*  g_szDtlMsg      *char         O    事象詳細文字列                        */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL : 正常                                                          */
/*    ERROR  : コミットエラー（システムエラー）                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int commit( VOID )
{

    /* ＤＢのコミット */
	G_POSITION = __LINE__;
    EXEC SQL COMMIT;
    if (sqlca.sqlcode < 0) {
        sprintf(g_szDtlMsg,
                "ＤＢのコミットに失敗しました。(CODE=%ld)",
                sqlca.sqlcode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return ERROR;
    }


    return NORMAL;
}



/*****************************************************************************/
/* Function Name:                                                            */
/*     rollback( void )                                                      */
/* Made by:                                                                  */
/* Description:ＤＢのロールバック                                            */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL : 正常                                                          */
/*    ERROR  : ロールバックエラー（システムエラー）                          */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int rollback( )
{
    
	/* ＤＢのロールバック */
	G_POSITION = __LINE__;
    EXEC SQL ROLLBACK WORK;
    if (sqlca.sqlcode < 0) {
        sprintf(g_szDtlMsg,
                "ＤＢのロールバックに失敗しました。(CODE=%ld)",
                sqlca.sqlcode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return ERROR;
    }

    return NORMAL;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*   finalize( int rc )                                                      */
/*                                                                           */
/* Description:                                                              */
/*   終了処理                                                                */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*   rc            int           I   リターンステータス                      */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*   1 ファイルのクローズ                                                    */
/*   2 カーソルクローズ                                                      */
/*   3 ＤＢ接続解除                                                          */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/*****************************************************************************/
static void finalize( int rc )
{

    /* ファイルのクローズ */
	if ( file_open_flag == 1 ) {
		fclose( g_pfSendFile );
	}
    
    /* カーソルクローズ */
	if ( cusor_open_flag == 1 ) {
		EXEC SQL CLOSE CUR_01;
	}


    exit( rc );
}

/*****************************************************************************/
/* Function Name:                                                            */
/*   update_previous_date( const char *process_id )                          */
/*                                                                           */
/* Description:                                                              */
/*   前回抽出日を取得                                                        */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length            I/O    Content                     */
/* --------------  ---------------------  ---  -------------------------     */
/* process_id      const char*            i    処理ID                        */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   TX_ログアップロード情報                                                 */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL             : 正常                                               */
/*   ERROR              : 異常                                               */
/*                                                                           */
/*****************************************************************************/
int update_previous_date ( const char *process_id )
{

    /* TX_ログアップロード情報から前回抽出日を取得 */
	memset ( h_process_id, 0x0, sizeof(h_process_id));
	strcpy ( h_process_id , process_id );

	G_POSITION = __LINE__;
	EXEC SQL UPDATE TX_ログアップロード情報
		SET 処理開始日 = TO_DATE (:h_TO_TS,'YYYYMMDD HH24MISS')
			WHERE
				処理ID = :h_process_id;

	if ( sqlca.sqlcode != 0 ){
        sprintf( g_szDtlMsg,
                 "[処理ID=%s]TX_ログアップロード情報の処理開始日の更新に失敗しました。(sqlca.sqlcode=%d)",
                  h_process_id, sqlca.sqlcode );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "UPDATE TX_ログアップロード情報", NULL, NULL, G_STATION);
        return(ERROR);
    }


	return ( NORMAL );

}
/*****************************************************************************/
/* Function Name:                                                            */
/*   get_previous_date( const char *process_id )                             */
/*                                                                           */
/* Description:                                                              */
/*   前回抽出日を取得                                                        */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length            I/O    Content                     */
/* --------------  ---------------------  ---  -------------------------     */
/* process_id      const char*            i    処理ID                        */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   TX_ログアップロード情報                                                 */
/*                                                                           */
/* Return Code:                                                              */
/*   NORMAL             : 正常                                               */
/*   ERROR              : 異常                                               */
/*                                                                           */
/*****************************************************************************/
int get_previous_date ( const char *process_id )
{

    /* TX_ログアップロード情報から前回抽出日を取得 */
	memset ( h_process_id, 0x0, sizeof(h_process_id));
	strcpy ( h_process_id , process_id );

	G_POSITION = __LINE__;
    EXEC SQL SELECT TO_CHAR(処理開始日, 'YYYYMMDD HH24MISS')
				INTO :h_FROM_TS 
			FROM TX_ログアップロード情報
			WHERE
				処理ID = :h_process_id;

	if ( sqlca.sqlcode != 0 ){
        sprintf( g_szDtlMsg,
                 "[処理ID=%s]TX_ログアップロード情報の検索に失敗しました。(sqlca.sqlcode=%d)",
                  h_process_id, sqlca.sqlcode );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "SELECT TX_ログアップロード情報", NULL, NULL, G_STATION);
        return(ERROR);
    }


	return ( NORMAL );

}
/*****************************************************************************/
/* Function Name:                                                            */
/*   makeExtractionMessage( char *from , char *to )                          */
/*                                                                           */
/* Description:                                                              */
/*   抽出条件をメッセージ出力                                                */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length            I/O    Content                     */
/* --------------  ---------------------  ---  -------------------------     */
/* from            char*                  i    開始日付                      */
/* to              char*                  i    終了日付                      */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   Non                                                                     */
/*                                                                           */
/* Return Code:                                                              */
/*   None                                                                    */
/*                                                                           */
/*****************************************************************************/
void makeExtractionMessage ( char *from , char *to )
{
	char from_date [32];
	char to_date   [32];

	memset ( from_date , 0x0, sizeof(from_date) );
	memset ( to_date   , 0x0, sizeof(to_date) );

	editDate ( 1, from , from_date );
	editDate ( 1, to , to_date );


	sprintf ( g_szDtlMsg, "[抽出条件] %s から %s までの抽出を実行します", from_date , to_date );

	send_err ( m$message1, 0, g_szDtlMsg, NULL, NULL, G_STATION);


}
/*****************************************************************************/
/* Function Name:                                                            */
/*   editDate ( int mode, char *src, char *dest )                            */
/*                                                                           */
/* Description:                                                              */
/*   日付を編集                                                              */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length            I/O    Content                     */
/* --------------  ---------------------  ---  -------------------------     */
/* mode            int                    i    編集モード(最初は1のみ)       */
/* src             char*                  i    編集元バッファ                */
/* dest            char*                  i/o  編集後バッファ                */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   Non                                                                     */
/*                                                                           */
/* Return Code:                                                              */
/*   None                                                                    */
/*                                                                           */
/*****************************************************************************/
void editDate ( int mode, char *src, char *dest ) 
{

	switch ( mode ) {
		case 1: /* YYYYMMDD HH24MISS → YYYY/MM/DD HH24:MI:SS */
			/* 年月日に / を挿入 */
			memcpy ( dest , &src[0], 4 );
			dest[4] = '/';
			strncat ( dest , &src[4], 2 );
			dest[7] = '/';
			strncat ( dest , &src[6], 2 );
			dest[10] = ' ';

			/* 時分秒に : を挿入 */
			strncat ( dest , &src[9], 2 );
			dest[13] = ':';
			strncat ( dest , &src[11], 2 );
			dest[16] = ':';
			strncat ( dest , &src[13], 2 );
			
			break;

		default:
			break;
	}

}