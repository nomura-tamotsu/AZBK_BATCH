/*==========================================================================*/
/* Copyright　Information Services International-Dentsu, Ltd.   　          */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : BANK・R−CC                                           */
/*                                                                          */
/* PROGRAM NAME     : 不明住所コードのINSERT                                */
/*                                                                          */
/* MODULE NAME      : InsertAddressUnknown                                  */
/*                                                                          */
/* FUNCTION         : 住所テーブルに 00000000000 のレコードを追加する       */
/*                                                                          */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POint      : Main Module.                                          */
/*                                                                          */
/* INPUT            : NONE                                                  */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 14/08/19 | ISID        | First Edition.                            */
/*==========================================================================*/
/*--------------------------------------------------------------------------*/
/* Standard include specification                                           */
/*--------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*--------------------------------------------------------------------------*/
/* User defined include specification                                       */
/*--------------------------------------------------------------------------*/
#include "msg.h"
#include "common.h"
#include "batchcommon.h"

EXEC SQL INCLUDE mbproc.h;

EXEC SQL BEGIN DECLARE SECTION;

int   cnt;										 /* 件数                 */

EXEC SQL END DECLARE SECTION;

/*--------------------------------------------------------------------------*/
/*                           DEFINE STATEMENTS                              */
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*                           EXTERNAL DECLARES                              */
/*--------------------------------------------------------------------------*/
char    process_name[43];
char    g_szDtlMsg[256];                            /* 事象詳細文字列       */

/*--------------------------------------------------------------------------*/
/*                          STRUCT DECLARATIONS                             */
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*                           SUBROUTNE DEFINITION                           */
/*--------------------------------------------------------------------------*/
extern int send_err();
extern int db_connect();
extern void errhandler();


/****************************************************************************/
/*                                                                          */
/*                            PROCEDURE DIVISION                            */
/*                                                                          */
/****************************************************************************/

/*--------------------------------------------------------------------------*/
/*                              MAIN ROUTINE                                */
/*--------------------------------------------------------------------------*/
main (argc, argv) 
int     argc;
char    *argv[];
{
/*--------------------------------------------------------------------------*/
/*                      LOCAL VARIABLE DECLARATIONS                         */
/*--------------------------------------------------------------------------*/
    int     rc = 0;
	int     exit_code;
	int		kind;

	/*======================================================================*/
	/*      INITIALIZATION                                                  */
	/*======================================================================*/

	/*-----------------------------*/
	/* Print process start message */
	/*-----------------------------*/
    strcpy( G_STATION, "InsertAddressUnknown" );

	memset(process_name,0x00,sizeof(process_name));
    strcpy(process_name,"不明住所コードのINSERT ");

	send_err( m$start_process, NORMAL, process_name, "", "", G_STATION );

	/*-----------------------------*/
	/* Get environment variable    */
	/*-----------------------------*/

    /*-----------------------------*/
    /* Setup error handler routine */
    /*-----------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

	/*-----------------------------*/
	/* Connect to database         */
	/*-----------------------------*/
    G_POSITION = __LINE__;
    rc = db_connect();
    if( rc != 0 ) {
        send_err( m$db_connect, rc , NULL, NULL, NULL, G_STATION );
		exit_code = ERROR ;
        goto ENDPROC;
    }

    /*
    **  変数の初期化
    */
    exit_code = NORMAL ;


	/* 引数処理 */
	if ( argc != 2 ) {
		sprintf (g_szDtlMsg,"引数に　TF_住所A または TF_住所B を指定して下さい");
		send_err (m$invalid_parameter, ERROR, g_szDtlMsg, NULL, NULL, G_STATION);
		exit_code = ERROR ;
        goto ENDPROC;
	}
	else {
		if ( !strcmp ( argv[1] , "TF_住所A" )) {
			kind = 1;
		}
		else if ( !strcmp ( argv[1] , "TF_住所B" )) {
			kind = 2;
		}
		else {
			sprintf (g_szDtlMsg,"引数に　TF_住所A または TF_住所B を指定して下さい");
			send_err (m$invalid_parameter, ERROR, g_szDtlMsg, NULL, NULL, G_STATION);
			exit_code = ERROR ;
			goto ENDPROC;
		}
	}

	

	/*======================================================================*/
    /*                      メ　イ　ン　処　理                              */
    /*======================================================================*/
	/*  データ存在チェック          */
	if ( kind == 1 ) {
		G_POSITION = __LINE__;
		EXEC SQL SELECT COUNT(*) 
				into :cnt
			from TF_住所A
			where  住所コード = '00000000000';
	}
	else if ( kind == 2 ) {
		G_POSITION = __LINE__;
		EXEC SQL SELECT COUNT(*) 
				into :cnt
			from TF_住所B
			where  住所コード = '00000000000';
	}

	if ( sqlca.sqlcode < 0 ){
        sprintf( g_szDtlMsg,
                 "TF_住所の件数取得に失敗しました。(sqlca.sqlcode=%d)",sqlca.sqlcode );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "INSERT TF_住所", NULL, NULL, G_STATION);
        exit_code = ERROR ;
		goto ENDPROC_NG;
    }

	/* データが存在する場合は、正常終了 */
	if ( cnt != 0 ) {
		exit_code = NORMAL ;
		goto ENDPROC;
	}

    /*  データINSERT                */
	if ( kind == 1 ) {
		G_POSITION = __LINE__;
		EXEC SQL INSERT INTO TF_住所A
        (   住所コード,
			郵便番号,
			住所1,
			住所2,
			住所1カナ,
			住所2カナ
        ) VALUES (
            '00000000000',
            ' ',
            ' ',
            ' ',
            ' ',
            ' '
        );
	}
	else if ( kind == 2 ) {
		G_POSITION = __LINE__;
		EXEC SQL INSERT INTO TF_住所B
        (   住所コード,
			郵便番号,
			住所1,
			住所2,
			住所1カナ,
			住所2カナ
        ) VALUES (
            '00000000000',
            ' ',
            ' ',
            ' ',
            ' ',
            ' '
        );
	}

	if ( sqlca.sqlcode < 0 ){
        sprintf( g_szDtlMsg,
                 "TF_住所のINSERTに失敗しました。(sqlca.sqlcode=%d)",
                 sqlca.sqlcode );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "INSERT TF_住所", NULL, NULL, G_STATION);
        exit_code = ERROR ;
		goto ENDPROC_NG;
    }


	send_err( m$message1, NORMAL,"TF_住所に、オール０のレコードをINSERTしました" , NULL, NULL, G_STATION );

    /*======================================================================*/
    /*      TERMINATION                                                     */
    /*======================================================================*/
    /*
    **  正常終了
    */
    EXEC SQL COMMIT;

	goto ENDPROC ;

    /*
    **  異常終了
    */
ENDPROC_NG:
    /* コネクト開放処理 */
    EXEC SQL ROLLBACK WORK;

	goto ENDPROC ;

ENDPROC:
    if ( exit_code == NORMAL ) {
        send_err( m$stop_process, NORMAL, process_name, "", "", G_STATION );
    } 
	else {
        send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
        exit_code = ERROR;
    }

    exit( exit_code );


}