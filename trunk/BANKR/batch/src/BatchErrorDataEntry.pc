/*==========================================================================*/
/* COPYRIGHT Brainyworks,LTD.                                               */
/* LICENSED MATERIAL - PROGRAM PROPERTY OF Brainyworks                      */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : e-MARKETBRAIN PREMIUM                                 */
/*                                                                          */
/* PROGRAM NAME     : バッチ処理結果詳細登録                                */
/*                                                                          */
/* MODULE NAME      : BatchErrorDataEntry                                   */
/*                                                                          */
/* FUNCTION         : バッチ処理にてエラーが発生した場合の内容を登録する。  */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : db_connect, send_err, errhandler                      */
/*                                                                          */
/* ENTRY POINT      : Main Module.                                          */
/*                                                                          */
/* INPUT            : argv[1]・・・処理軽視日時                             */
/*                    argv[2]・・・タスク名                                 */
/*                    argv[3]・・・理由                                     */
/*                    argv[4]・・・データ                                   */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 09/05/26 | K.Miyahara  | First Edition.                            */
/*==========================================================================*/

/****************************************************************************/
/*                                                                          */
/*                            DECLARE DIVISION                              */
/*                                                                          */
/****************************************************************************/

/*--------------------------------------------------------------------------*/
/*                           INCLUDE STATEMENTS                             */
/*--------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "msg.h"
#include "batchcommon.h"
#include "common.h"

 EXEC SQL INCLUDE mbproc.h;
 EXEC SQL INCLUDE TA_BatchResultDetail.h;

/*--------------------------------------------------------------------------*/
/*							DEFINE STATEMENTS								*/
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*							EXTERNAL DECLARES								*/
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*							STRUCT DECLARATIONS								*/
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*							SUBROUTNE DEFINITION							*/
/*--------------------------------------------------------------------------*/
extern int send_err();
extern int db_connect();
extern void errhandler();

/****************************************************************************/
/*																			*/
/*							PROCEDURE DIVISION								*/
/*																			*/
/****************************************************************************/

/*--------------------------------------------------------------------------*/
/*                              MAIN ROUTINE                                */
/*--------------------------------------------------------------------------*/
main (argc, argv) 
int     argc;
char    *argv[];
{
/*--------------------------------------------------------------------------*/
/*                      LOCAL VARIABLE DECLARATIONS                         */
/*--------------------------------------------------------------------------*/
	char	*homedir;					/* ホームディレクトリ */
	int		exit_code;					/* 終了コード */
	int		return_code;				/* リターンコード */
	int		db_connect_flag;			/* ＤＢ接続フラグ */

/*==========================================================================*/
/*      INITIALIZATION                                                      */
/*==========================================================================*/

	/*-----------------------------*/
	/* Print process start message */
	/*-----------------------------*/
    strcpy( G_STATION, "BatchErrorDataEntry" );
    send_err( m$start_process, 0, "バッチ処理結果詳細登録", NULL, NULL, G_STATION );



	/*-----------------------------*/
	/* Initialize environment      */
	/*-----------------------------*/
	exit_code = NORMAL;
	return_code = 0;
	db_connect_flag=0;

	memset( TABD_processing_start_date, 0x00, sizeof( TABD_processing_start_date ) );
	memset( TABD_task_name.arr, 0x00, sizeof( TABD_task_name.arr ) );
	TABD_sequence = 0;
	memset( TABD_reason.arr, 0x00, sizeof( TABD_reason.arr ) );
	memset( TABD_data.arr, 0x00, sizeof( TABD_data.arr ) );

	/*-----------------------------*/
	/* Get environment variable    */
	/*-----------------------------*/
	if( ( homedir = (char *)getenv( "HOME" ) ) == NULL ) {
		send_err( m$getenv, -1, "HOME", NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto ENDPROC;
	}

    /*-----------------------------*/
    /* Setup error handler routine */
    /*-----------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

	/*-----------------------------*/
	/* Connect to database         */
	/*-----------------------------*/
    G_POSITION = __LINE__;
    return_code = db_connect();
    if( return_code != 0 ) {
        send_err( m$db_connect, -1, NULL, NULL, NULL, G_STATION );
		exit_code = ERROR;
        goto ENDPROC;
    }
	db_connect_flag=1;

	/*-----------------------------*/
	/* Check parameter             */
	/*-----------------------------*/
	if( argc != 5 ) {
		send_err( m$invalid_parameter, -1, NULL, NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto ENDPROC;
	}
	else {
		strcpy( TABD_processing_start_date, argv[1] );

		strcpy( TABD_task_name.arr, argv[2] );
		TABD_task_name.len = strlen( TABD_task_name.arr );

		strcpy( TABD_reason.arr, argv[3]);
		TABD_reason.len = strlen( TABD_reason.arr );

		strcpy( TABD_data.arr, argv[4]);
		TABD_data.len = strlen( TABD_data.arr );
	}

    /*======================================================================*/
    /*                      メ　イ　ン　処　理                              */
    /*======================================================================*/

	/*----------------------------------------------------------------------*/
	/* TA_バッチ処理結果詳細へ登録                                          */
	/*----------------------------------------------------------------------*/

	/* 最大SEQをインクリメントして取得 */
	G_POSITION = __LINE__;
	EXEC SQL 
		SELECT
			NVL( MAX(SEQ) + 1 , 1)
		INTO
			:TABD_sequence
		FROM
			TA_バッチ処理結果詳細
		WHERE
			処理開始日時 = :TABD_processing_start_date AND
			タスク名 = :TABD_task_name
		;
	if( sqlca.sqlcode < 0 ){
		send_err( m$sql_statment, 0, "SELECT MAX(SEQ)", NULL, NULL, G_STATION );
		exit_code = ERROR ;
		goto ENDPROC ;
	}

	/* TA_バッチ処理結果詳細へ登録 */
	G_POSITION = __LINE__;
	EXEC SQL 
		INSERT INTO
			TA_バッチ処理結果詳細
		(
			処理開始日時,
			タスク名,
			SEQ,
			理由,
			データ
		) VALUES (
			:TABD_processing_start_date,
			:TABD_task_name,
			:TABD_sequence,
			:TABD_reason,
			:TABD_data
		);
	if( sqlca.sqlcode < 0 ){
		send_err( m$sql_statment, 0, "INSERT INTO TA_バッチ処理結果詳細", NULL, NULL, G_STATION );
		exit_code = ERROR ;
		goto ENDPROC ;
	}

    /*======================================================================**
    **              終了処理
    **======================================================================*/
ENDPROC:    
	if(exit_code == NORMAL){
		/* 正常終了 */
		if( db_connect_flag == 1){
			EXEC SQL COMMIT WORK RELEASE;
		}
		send_err( m$stop_process, NORMAL, "バッチ処理結果詳細登録", NULL, NULL, G_STATION );
		exit( NORMAL );
	}
	else{
		/* 異常終了 */
		if( db_connect_flag == 1){ 
			EXEC SQL ROLLBACK WORK RELEASE;
		}
		send_err( m$abend_process, ERROR, "バッチ処理結果詳細登録", NULL, NULL, G_STATION );
		exit( ERROR );
	}
}
