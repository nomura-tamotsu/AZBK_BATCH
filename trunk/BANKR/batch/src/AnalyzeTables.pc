/*==========================================================================*/
/* COPYRIGHT Brainyworks,LTD.                                               */
/* LICENSED MATERIAL - PROGRAM PROPERTY OF Brainyworks                      */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : e-MARKETBRAIN PREMIUM                                 */
/*                                                                          */
/* PROGRAM NAME     : テーブル最適化                                        */
/*                                                                          */
/* MODULE NAME      : AnalyzeTables                                         */
/*                                                                          */
/* FUNCTION         : 指定されたテーブルもしくは全てのテーブルの            */
/*                     統計情報を取得する。                                 */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POINT      : Main Module.                                          */
/*                                                                          */
/* INPUT            : argv[1]・・・テーブル名(任意)                         */
/*                     指定があればそのテーブル、なければ全テーブルが対象   */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 09/06/24 | K.Miyahara  | First Edition.                            */
/*==========================================================================*/

/****************************************************************************/
/*                                                                          */
/*                            DECLARE DIVISION                              */
/*                                                                          */
/****************************************************************************/
/*--------------------------------------------------------------------------*/
/*                           INCLUDE STATEMENTS                             */
/*--------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "msg.h"
#include "common.h"
#include "batchcommon.h"

EXEC SQL INCLUDE mbproc.h;

/*--------------------------------------------------------------------------*/
/*                            DEFINE STATEMENTS                             */
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*                            EXTERNAL DECLARES                             */
/*--------------------------------------------------------------------------*/
EXEC SQL BEGIN DECLARE SECTION;
    varchar tablename[33];
    char    sqltext[2048];
    char	schema_name[9];
EXEC SQL END DECLARE SECTION;

/*--------------------------------------------------------------------------*/
/*                           STRUCT DECLARATIONS                            */
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*                           SUBROUTNE DEFINITION                           */
/*--------------------------------------------------------------------------*/
extern int send_err();
extern void errhandler();
extern int db_connect();

/****************************************************************************/
/*                                                                          */
/*                            PROCEDURE DIVISION                            */
/*                                                                          */
/****************************************************************************/
main(argc, argv)
    int argc;
    char *argv[];
{
/*--------------------------------------------------------------------------*/
/*                        LOCAL VARIABLE DECLARATIONS                       */
/*--------------------------------------------------------------------------*/
    int     return_code;
    int     exit_code = NORMAL;
	char	*schema_name_char;

/*--------------------------------------------------------------------------*/
/*                              MAIN ROUTINE                                */
/*--------------------------------------------------------------------------*/

/*==========================================================================*/
/*      INITIALIZATION                                                      */
/*==========================================================================*/

    /*-----------------------------*/
    /* Print process start message */
    /*-----------------------------*/
    strcpy( G_STATION, "AnalyzeTables" );
    send_err( m$start_process, NORMAL, "テーブル最適化", "", "", G_STATION );

    /*-------------------------------------------------------*/
    /* Setup error handler routine                           */
    /*-------------------------------------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

    G_POSITION = __LINE__;
    return_code = db_connect() ;
    if ( return_code != NORMAL ) {
        send_err( m$db_connect, return_code, "", "", "", G_STATION );
        exit_code = ERROR ;
        goto ENDPROC ;
    }

/*==========================================================================*/
/*      PROCEDURE                                                           */
/*==========================================================================*/
	/* 引数の設定 */
	memset(schema_name, 0x00, sizeof(schema_name));
	if( ( schema_name_char =  (char *)getenv( "DB_UID" ) ) == NULL ){
		send_err( m$getenv, -1, "DB_UID", NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto ENDPROC;
	}
	strcpy(schema_name, schema_name_char);

    /*--------------------------*/
    /* テーブル指定時の１件処理 */
    /*--------------------------*/
    if ( argc > 2) {
        send_err( m$unmatch_parameter_count, NORMAL, "", "", "", G_STATION );
        exit_code = ERROR;
        goto ENDPROC ;
    }
    else if ( argc == 2) {
        memset( tablename.arr, 0x00, sizeof( tablename.arr ) ) ;
        strncpy( tablename.arr, argv[1], sizeof( tablename.arr ) - 1);
        tablename.len=(unsigned int)strlen(tablename.arr);
        
        memset(sqltext, 0x00, sizeof(sqltext));
        strcpy(sqltext, "BEGIN DBMS_STATS.GATHER_TABLE_STATS( ");
        strcat(sqltext, "OWNNAME => :schema_name, ");
        strcat(sqltext, "TABNAME => :tablename, ");
        strcat(sqltext, "CASCADE => ");
        strcat(sqltext, CASCADE);
        strcat(sqltext, " ); END;");
        
        G_POSITION = __LINE__;
        EXEC SQL PREPARE sql_state FROM :sqltext;
        if (sqlca.sqlcode < 0) {
            send_err (m$sql_statment, NORMAL, sqltext, "", "", G_STATION);
            exit_code = ERROR;
            goto ENDPROC;
        }
        
        G_POSITION = __LINE__;
        EXEC SQL EXECUTE sql_state USING :schema_name, :tablename;
        if (sqlca.sqlcode < 0) {
            send_err (m$sql_statment, NORMAL, sqltext, "", "", G_STATION);
            exit_code = ERROR;
            goto ENDPROC;
        }
        send_err(m$analyze_table, NORMAL, tablename.arr, "", "", G_STATION);
        goto ENDPROC;
    }

    /*------------------------------*/
    /* テーブル指定なし時の全件処理 */
    /*------------------------------*/
	memset(sqltext, 0x00, sizeof(sqltext));
    strcpy(sqltext, "BEGIN DBMS_STATS.GATHER_SCHEMA_STATS(");
    strcat(sqltext, "OWNNAME => :schema_name, ");
    strcat(sqltext, "CASCADE => ");
    strcat(sqltext, CASCADE);
    strcat(sqltext, "); END;");
    
    G_POSITION = __LINE__;
    EXEC SQL PREPARE sql_state FROM :sqltext;
    if (sqlca.sqlcode < 0) {
        send_err (m$sql_statment, NORMAL, sqltext, "", "", G_STATION);
        exit_code = ERROR;
        goto ENDPROC;
    }
    
    G_POSITION = __LINE__;
    EXEC SQL EXECUTE sql_state USING :schema_name;
    if (sqlca.sqlcode < 0) {
        send_err (m$sql_statment, NORMAL, sqltext, "", "", G_STATION);
        exit_code = ERROR;
        goto ENDPROC;
    }
    send_err(m$analyze_schema, NORMAL, schema_name, "", "", G_STATION);

ENDPROC:

/*==========================================================================*/
/*      TERMINATION                                                         */
/*==========================================================================*/
    /*--------------------------*/
    /* Logged out UDB server    */
    /*--------------------------*/
    if ( exit_code == NORMAL ) {
        EXEC SQL COMMIT WORK RELEASE;
    }
    else {
        EXEC SQL ROLLBACK WORK RELEASE;
    }

    /*---------------------------------*/
    /* Print process terminate message */
    /*---------------------------------*/
    if ( exit_code == NORMAL ) {
        send_err( m$stop_process, NORMAL, "テーブル最適化", "", "", G_STATION );
    } else {
        send_err( m$abend_process, NORMAL, "テーブル最適化", "", "", G_STATION );
    }

    exit(exit_code);
}
