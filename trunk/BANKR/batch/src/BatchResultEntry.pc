/*==========================================================================*/
/* COPYRIGHT Brainyworks,LTD.                                               */
/* LICENSED MATERIAL - PROGRAM PROPERTY OF Brainyworks                      */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : e-MARKETBRAIN PREMIUM                                 */
/*                                                                          */
/* PROGRAM NAME     : バッチ処理結果登録                                    */
/*                                                                          */
/* MODULE NAME      : BatchResultEntry                                      */
/*                                                                          */
/* FUNCTION         : バッチ処理の開始・終了時間、                          */
/*                    場合により処理データ件数を登録する。                  */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : db_connect, send_err, errhandler                      */
/*                                                                          */
/* ENTRY POINT      : Main Module.                                          */
/*                                                                          */
/* INPUT            : argv[1]・・・識別子                                   */
/*                    argv[2]・・・処理開始日時                             */
/*                    argv[3]・・・タスク名                                 */
/*                    argv[4]・・・処理区分                                 */
/*                    argv[5]・・・サイクル                                 */
/*                    argv[6]・・・データ件数                               */
/*                    argv[7]・・・正常件数                                 */
/*                    argv[8]・・・エラー件数                               */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 09/05/25 | K.Miyahara  | First Edition.                            */
/*==========================================================================*/

/****************************************************************************/
/*                                                                          */
/*                            DECLARE DIVISION                              */
/*                                                                          */
/****************************************************************************/

/*--------------------------------------------------------------------------*/
/*                           INCLUDE STATEMENTS                             */
/*--------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "msg.h"
#include "batchcommon.h"
#include "common.h"

 EXEC SQL INCLUDE mbproc.h;
 EXEC SQL INCLUDE TA_BatchResult.h;

/*--------------------------------------------------------------------------*/
/*							DEFINE STATEMENTS								*/
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*							EXTERNAL DECLARES								*/
/*--------------------------------------------------------------------------*/
EXEC SQL BEGIN DECLARE SECTION;
    short	work_count;					/* レコードカウンター */
EXEC SQL END DECLARE SECTION;

/*--------------------------------------------------------------------------*/
/*							STRUCT DECLARATIONS								*/
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*							SUBROUTNE DEFINITION							*/
/*--------------------------------------------------------------------------*/
extern int send_err();
extern int db_connect();
extern void errhandler();

/****************************************************************************/
/*																			*/
/*							PROCEDURE DIVISION								*/
/*																			*/
/****************************************************************************/

/*--------------------------------------------------------------------------*/
/*                              MAIN ROUTINE                                */
/*--------------------------------------------------------------------------*/
main (argc, argv) 
int     argc;
char    *argv[];
{
/*--------------------------------------------------------------------------*/
/*                      LOCAL VARIABLE DECLARATIONS                         */
/*--------------------------------------------------------------------------*/
	char	*homedir;					/* ホームディレクトリ */
	int		exit_code;					/* 終了コード */
	int		return_code;				/* リターンコード */
	int		db_connect_flag;			/* ＤＢ接続フラグ */

/*==========================================================================*/
/*      INITIALIZATION                                                      */
/*==========================================================================*/

	/*-----------------------------*/
	/* Print process start message */
	/*-----------------------------*/
    strcpy( G_STATION, "BatchResultEntry" );
    send_err( m$start_process, 0, "バッチ処理結果登録", NULL, NULL, G_STATION );


	/*-----------------------------*/
	/* Initialize environment      */
	/*-----------------------------*/
	exit_code = NORMAL;
	return_code = 0;
	work_count = 0;
	db_connect_flag=0;

	memset( TABR_processing_start_date, 0x00, sizeof( TABR_processing_start_date ) );
	memset( TABR_processing_end_date, 0x00, sizeof(TABR_processing_end_date ) );
	memset( TABR_task_name.arr, 0x00, sizeof( TABR_task_name.arr ) );
	memset( TABR_processing_division, 0x00, sizeof( TABR_processing_division ) );
	memset( TABR_cycle, 0x00, sizeof( TABR_cycle ) );
	TABR_data_count = 0;
	TABR_success_count = 0;
	TABR_error_count = 0;
	memset( TABR_status, 0x00, sizeof( TABR_status ) );

	/*-----------------------------*/
	/* Get environment variable    */
	/*-----------------------------*/
	if( ( homedir = (char *)getenv( "HOME" ) ) == NULL ) {
		send_err( m$getenv, -1, "HOME", NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto ENDPROC;
	}


    /*-----------------------------*/
    /* Setup error handler routine */
    /*-----------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

	/*-----------------------------*/
	/* Connect to database         */
	/*-----------------------------*/
    G_POSITION = __LINE__;
    return_code = db_connect();
    if( return_code != 0 ) {
        send_err( m$db_connect, -1, NULL, NULL, NULL, G_STATION );
		exit_code = ERROR;
        goto ENDPROC;
    }

	db_connect_flag = 1;

	/*-----------------------------*/
	/* Check parameter             */
	/*-----------------------------*/
	if( argc != 9 ) {
		send_err( m$invalid_parameter, -1, NULL, NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto ENDPROC;
	}
	else {
		strcpy( TABR_status, argv[1] );
		strcpy( TABR_processing_start_date, argv[2] );
		strcpy( TABR_task_name.arr, argv[3] );
		TABR_task_name.len = strlen(TABR_task_name.arr);
		strcpy( TABR_processing_division, argv[4] );
		if( strcmp( argv[5], "M" ) ==0 ){
			strcpy( TABR_cycle, "1" );
		}
		else if( strcmp( argv[5], "W" ) == 0 ){
			strcpy( TABR_cycle, "2" );
		}
		else{
			strcpy( TABR_cycle, "3" );
		}
		TABR_data_count = atoi(argv[6]);
		TABR_success_count = atoi(argv[7]);
		TABR_error_count = atoi(argv[8]);
	}

    /*======================================================================*/
    /*                      メ　イ　ン　処　理                              */
    /*======================================================================*/

	/*----------------------------------------------------------------------*/
	/* TA_バッチ処理結果へ登録                                              */
	/*----------------------------------------------------------------------*/

	/* 識別子(第１引数)が'1'の場合、Insert */
	if( strcmp( TABR_status, "1" ) == 0 ){
		G_POSITION = __LINE__;
		EXEC SQL 
			INSERT INTO
				TA_バッチ処理結果
			(
				処理開始日時,
				処理終了日時,
				タスク名,
				処理区分,
				サイクル,
				データ件数,
				正常件数,
				エラー件数,
				ステータス
			) VALUES (
				:TABR_processing_start_date,
				null,
				:TABR_task_name,
				:TABR_processing_division,
				:TABR_cycle,
				null,
				null,
				null,
				:TABR_status
			);
		if( sqlca.sqlcode < 0 ){
			send_err( m$sql_statment, 0, "INSERT TA_バッチ処理結果 / 識別子(1)", NULL, NULL, G_STATION );
			exit_code = ERROR ;
			goto ENDPROC ;
		}
	}

	/* 識別子≠'1'の場合、データが存在していればUpdate、存在していなければInsert */
	else{
		/* 「処理開始日時」＋「タスク名」で存在チェック */
		G_POSITION = __LINE__;
		EXEC SQL 
			SELECT
				COUNT(*)
			INTO
				:work_count
			FROM
				TA_バッチ処理結果
			WHERE
				処理開始日時 = :TABR_processing_start_date AND
				タスク名 = :TABR_task_name
			;
		if( sqlca.sqlcode < 0 ){
			send_err( m$sql_statment, 0, "SELECT COUNT(*) TA_バッチ処理結果", NULL, NULL, G_STATION );
			exit_code = ERROR ;
			goto ENDPROC ;
		}

		/* データが存在する場合 */
		if( work_count != 0 ){
			G_POSITION = __LINE__;
			EXEC SQL 
				UPDATE
					TA_バッチ処理結果
				SET
					処理終了日時 = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'),
					データ件数 = :TABR_data_count,
					正常件数 = :TABR_success_count,
					エラー件数 = :TABR_error_count,
					ステータス = :TABR_status
				WHERE
					処理開始日時 = :TABR_processing_start_date AND
					タスク名 = :TABR_task_name
				;
			if( sqlca.sqlcode < 0 ){
				send_err( m$sql_statment, 0, "UPDATE TA_バッチ処理結果", NULL, NULL, G_STATION );
				exit_code = ERROR ;
				goto ENDPROC ;
			}
		}
		else {
			G_POSITION = __LINE__;
			EXEC SQL 
				INSERT INTO
					TA_バッチ処理結果
				(
					処理開始日時,
					処理終了日時,
					タスク名,
					処理区分,
					サイクル,
					データ件数,
					正常件数,
					エラー件数,
					ステータス
				) VALUES (
					:TABR_processing_start_date,
					TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'),
					:TABR_task_name,
					:TABR_processing_division,
					:TABR_cycle,
					:TABR_data_count,
					:TABR_success_count,
					:TABR_error_count,
					:TABR_status
				);
			if( sqlca.sqlcode < 0 ){
				send_err( m$sql_statment, 0, "INSERT TA_バッチ処理結果 / 識別子(1以外)", NULL, NULL, G_STATION );
				exit_code = ERROR ;
				goto ENDPROC ;
			}
		}
	}

    /*======================================================================**
    **              終了処理
    **======================================================================*/
ENDPROC:    
	if(exit_code == NORMAL){
		/* 正常終了 */
		if( db_connect_flag == 1){
			EXEC SQL COMMIT WORK RELEASE;
		}
		send_err( m$stop_process, NORMAL, "バッチ処理結果登録", NULL, NULL, G_STATION );
		exit( NORMAL );
	}
	else{
		/* 異常終了 */
		if( db_connect_flag == 1){
			EXEC SQL ROLLBACK WORK RELEASE;
		}
		send_err( m$abend_process, ERROR, "バッチ処理結果登録", NULL, NULL, G_STATION );
		exit( ERROR );
	}
}


