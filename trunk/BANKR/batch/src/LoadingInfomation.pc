/*==========================================================================*/
/* Copyright　Information Services International-Dentsu, Ltd.   　          */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : BANK・R−CC                                           */
/*                                                                          */
/* PROGRAM NAME     : ホストデータ情報セット                                */
/*                                                                          */
/* MODULE NAME      : LoadingInfomation                                     */
/*                                                                          */
/* FUNCTION         : TX_ローディング情報にホストデータ情報をセット。       */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POint      : Main Module.                                          */
/*                                                                          */
/* INPUT            : None                                                  */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 09/06/25 | K.Miyahara  | First Edition.                            */
/*==========================================================================*/
/*--------------------------------------------------------------------------*/
/* Standard include specification                                           */
/*--------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*--------------------------------------------------------------------------*/
/* User defined include specification                                       */
/*--------------------------------------------------------------------------*/
#include "msg.h"
#include "common.h"
#include "batchcommon.h"

EXEC SQL INCLUDE mbproc.h;

/*--------------------------------------------------------------------------*/
/*                            DEFINE STATEMENTS                             */
/*--------------------------------------------------------------------------*/
#define TB_COUNT 9

/*--------------------------------------------------------------------------*/
/*                            EXTERNAL DECLARES                             */
/*--------------------------------------------------------------------------*/
char tb_list[TB_COUNT][128] = {
	"TF_顧客属性",
	"TF_世帯属性",
	"TF_個別明細流動性預金",
	"TF_個別明細固定性預金",
	"TF_個別明細外貨預金",
	"TF_個別明細投信口座",
	"TF_個別明細投信口座明細",
	"TF_個別明細債券",
	"TF_住所"
};

EXEC SQL BEGIN DECLARE SECTION;
    long        record_cnt;
	char        sqlcmd[1024];                   
	char		table_name[128];
EXEC SQL END DECLARE SECTION;

char    process_name[43];
char    g_work[1024];

/*--------------------------------------------------------------------------*/
/*                           STRUCT DECLARATIONS                            */
/*--------------------------------------------------------------------------*/


/*--------------------------------------------------------------------------*/
/*                           SUBROUTNE DEFINITION                           */
/*--------------------------------------------------------------------------*/
extern int send_err();
extern int coredir();
extern int db_connect();
extern void errhandler();

/****************************************************************************/
/*                                                                          */
/*                            PROCEDURE DIVISION                            */
/*                                                                          */
/****************************************************************************/

/*--------------------------------------------------------------------------*/
/*                              MAIN ROUTINE                                */
/*--------------------------------------------------------------------------*/
main()
{
/*--------------------------------------------------------------------------*/
/*                      LOCAL VARIABLE DECLARATIONS                         */
/*--------------------------------------------------------------------------*/
    int     rc;
    int     exitcode;
	int		db_connect_flag;
	int		i;


/*==========================================================================*/
/*      INITIALIZATION                                                      */
/*==========================================================================*/

	/*-----------------------------*/
	/* Initialize environment      */
	/*-----------------------------*/
	rc = 0;
    exitcode = NORMAL;
	db_connect_flag = 0;

	/*-----------------------------*/
	/* Print process start message */
	/*-----------------------------*/
    strcpy( G_STATION, "LoadingInfomation" );

	memset(process_name,0x00,sizeof(process_name));
    strcpy(process_name,"ホストデータ情報セット");

    send_err( m$start_process, NORMAL, process_name, "", "", G_STATION );



    /*-----------------------------*/
    /* Setup error handler routine */
    /*-----------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

	/*-----------------------------*/
	/* Connect to database         */
	/*-----------------------------*/
    G_POSITION = __LINE__;
    rc = db_connect();
    if( rc != 0 ) {
        send_err( m$db_connect, rc, NULL, NULL, NULL, G_STATION );
        exitcode = ERROR;
        goto ENDPROC;
    }

	db_connect_flag = 1;

    /*======================================================================*/
    /*                      メ　イ　ン　処　理                              */
    /*======================================================================*/

	for ( i = 0; i < TB_COUNT ; i++ ) {
		memset ( table_name, 0x0, sizeof( table_name ) );
		strcpy ( table_name, tb_list[i] );

		/* テーブル件数の取得 */
		memset ( sqlcmd, 0x0, sizeof(sqlcmd) );
		strcpy ( sqlcmd, "begin ");
		strcat ( sqlcmd, "SELECT COUNT(*) ");
		strcat ( sqlcmd, "INTO  :record_cnt from ");
		sprintf( g_work, "%s ;", table_name );
		strcat ( sqlcmd, g_work);
		strcat ( sqlcmd, "end; ");

		/*printf("sqlcmd=[%s]\n",sqlcmd);*/


		/* 動的SQL-SQL文の解析 */
		G_POSITION = __LINE__;
		EXEC SQL PREPARE my_stmt01 FROM :sqlcmd;
		if (sqlca.sqlcode < 0) {
			sprintf( g_work,
			        "%s テーブルの件数取得に失敗しました。(sqlca.sqlcode=%d)", table_name,sqlca.sqlcode );
			send_err ( m$emb_error, -1, g_work, NULL, NULL, G_STATION);
			send_err ( m$sql_statment, sqlca.sqlcode, "PREPARE my_stmt01", NULL, NULL, G_STATION);
			exitcode = ERROR;
			goto ENDPROC ;
		}

		/* テーブル件数の取得 */
		G_POSITION = __LINE__;
		EXEC SQL EXECUTE my_stmt01 USING :record_cnt;

		if (sqlca.sqlcode < 0) {
			sprintf( g_work,
			        "%s テーブルの件数取得に失敗しました。(sqlca.sqlcode=%d)", table_name,sqlca.sqlcode );
			send_err ( m$emb_error, -1, g_work, NULL, NULL, G_STATION);
			send_err ( m$sql_statment, sqlca.sqlcode, "EXECUTE my_stmt01", NULL, NULL, G_STATION);
			exitcode = ERROR;
			goto ENDPROC ;
		}

		G_POSITION = __LINE__;
		EXEC SQL 
			UPDATE 
				TX_ローディング情報
			SET 
				データ件数 = :record_cnt,
				作成日付 = SYSDATE,
				データ基準日 = SYSDATE
			WHERE 
			テーブル名 = :table_name
			;
		if( sqlca.sqlcode < 0 ){
			sprintf( g_work,
			        "%s テーブルのUDPATEに失敗しました。(sqlca.sqlcode=%d)", table_name,sqlca.sqlcode );
			send_err ( m$emb_error, -1, g_work, NULL, NULL, G_STATION);
			send_err( m$sql_statment, sqlca.sqlcode, "UPDATE TX_ローディング情報", NULL, NULL, G_STATION );
			exitcode = ERROR;
			goto ENDPROC ;
		}

		if( sqlca.sqlcode == ORA_NOF ) {
			G_POSITION = __LINE__;
			EXEC SQL 
				INSERT INTO 
					TX_ローディング情報
				(
					テーブル名,
					状態区分,
					データ件数,
					作成日付,
					データ基準日
				) VALUES (
					:table_name,
					'0',
					:record_cnt,
					SYSDATE,
					SYSDATE
				);
			if( sqlca.sqlcode < 0 ){
				sprintf( g_work,
			        "%s テーブルのINSERTに失敗しました。(sqlca.sqlcode=%d)", table_name,sqlca.sqlcode );
				send_err ( m$emb_error, -1, g_work, NULL, NULL, G_STATION);
				send_err( m$sql_statment, sqlca.sqlcode, "INSERT TX_ローディング情報", NULL, NULL, G_STATION );
				exitcode = ERROR;
				goto ENDPROC ;
			}
		}


	} /* loop end */


    /*--------------------------------------------------------------------------*/
    /*                              終了処理                                    */
    /*--------------------------------------------------------------------------*/
ENDPROC:
	/* ＤＢ切断 */
	if( db_connect_flag == 1 ){
		if ( exitcode == NORMAL ){
			EXEC SQL COMMIT WORK RELEASE;
		}
		else{
			EXEC SQL ROLLBACK WORK RELEASE;
		}
	}

	/* 終了メッセージ出力 */
	if ( exitcode == NORMAL ){
		send_err( m$stop_process, NORMAL, process_name, "", "", G_STATION );  
    }
	else {
		send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );

	}

    exit( exitcode );

}

