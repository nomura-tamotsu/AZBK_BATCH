/*==========================================================================*/
/* Copyright　Information Services International-Dentsu, Ltd.   　          */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : BANK・R−CC                                           */
/*                                                                          */
/* PROGRAM NAME     :世帯属性差分更新処理                                   */
/*                                                                          */
/* MODULE NAME      : DailyHousehold                                        */
/*                                                                          */
/* FUNCTION         : 世帯属性の差分更新処理を行う                          */
/*                                                                          */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POint      : Main Module.                                          */
/*                                                                          */
/* INPUT            : argv[1]・・・世帯属性差分更新ファイル(ﾌﾙﾊﾟｽ)          */
/*                  : argv[2]・・・処理結果ファイル名(ﾌﾙﾊﾟｽ)                */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 14/04/10 | ISID        | First Edition.                            */
/* %01 | 14/06/20 | ISID        | 電話番号20ｹﾀ対応                          */
/*==========================================================================*/
/*---------------------------------------------------------------------------*/
/* Standard include specification                                            */
/*---------------------------------------------------------------------------*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <errno.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <time.h>

/*---------------------------------------------------------------------------*/
/* User defined include specification                                        */
/*---------------------------------------------------------------------------*/
#include "msg.h"
#include "common.h"
#include "batchcommon.h"
#include "apl_common.h"

EXEC SQL INCLUDE mbproc.h;

/*---------------------------------------------------------------------------*/
/* User defined include specification                                        */
/*---------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------*/
/* Internal macro definition                                                 */
/*---------------------------------------------------------------------------*/

typedef struct _RECV_FILE_DATA {
    char    record_id               [  1];      /* 処理区分 */
    char    change_id               [  1];      /* 変更区分 */
    char    branch_id               [  3];      /* 店番 */
    char    cifno                   [ 10];      /* CIFNO */
    char    kojin_no                [ 11];      /* 個人番号 */
    char    personality             [  1];      /* 人格区分 */
    char    setai_no                [ 11];      /* 世帯番号 */
    char    name_kanji              [ 80];      /* 氏名漢字 */
    char    name_kana               [ 80];      /* 氏名カナ */
    char    sex                     [  1];      /* 性別 */
    char    birthday                [  8];      /* 生年月日 */
    char    address_code            [ 11];      /* 住所コード */
    char    post_no                 [ 10];      /* 郵便番号 */
    char    sub_address             [ 60];      /* 補助住所 */
    char    sub_address_kana        [120];      /* 補助住所カナ */
    char    tel_no                  [ 20];      /* 自宅電話番号 */
    char    fax_no                  [ 20];      /* 自宅FAX番号 */
    char    portable_phone          [ 20];      /* 携帯電話番号 */
    char    mail_address            [ 50];      /* MAILアドレス */
    char    job_name_kanji          [ 80];      /* 勤務先名漢字 */
    char    job_name_kana           [ 80];      /* 勤務先名カナ */
    char    job_tel_no              [ 20];      /* 勤務先電話番号 */
    char    renraku_address_code    [ 11];      /* 連絡先住所コード */
    char    renraku_post_no         [ 10];      /* 連絡先郵便番号 */
    char    renraku_sub_adress      [ 60];      /* 連絡先補助住所 */
    char    renraku_sub_adress_kana [120];      /* 連絡先補助住所カナ */
    char    renraku_tel_no          [ 20];      /* 連絡先電話番号 */
    char    renraku_fax_no          [ 20];      /* 連絡先FAX番号 */
    char    nicchu_tel_no           [ 20];      /* 日中連絡先電話番号 */
    char    start_day               [  8];      /* CIF開設日 */
    char    setai_flg               [  1];      /* 世帯主フラグ */
    char    host_tm                 [  1];      /* ホストTM対象区分 */
    char    host_dm                 [  1];      /* ホストDM対象区分 */
    char    flag01                  [  1];      /* 行員区分 */
    char    flag02                  [  1];      /* 郵便不着 */
    char    flag03                  [  1];      /* 会社寮 */
    char    flag04                  [  1];      /* 電話番号間違い */
    char    flag05                  [  1];      /* 移転 */
    char    flag06                  [  1];      /* 本人死亡 */
    char    zandaka                 [ 16];      /* 当行金融資産残高 */
    char    azukari_shisan1         [ 16];      /* 預り資産残高１ */
    char    azukari_shisan2         [ 16];      /* 預り資産残高２ */
    char    azukari_shisan3         [ 16];      /* 預り資産残高３ */
    char    ryudo_zandaka           [ 16];      /* 流動性預金残高 */
    char    teiki_zandaka           [ 16];      /* 定期性預金残高 */
    char    shikumi_zandaka         [ 16];      /* 仕組預金残高 */
    char    gaika_zandaka           [ 16];      /* 外貨預金残高 */
    char    toushin_zandaka         [ 16];      /* 投信残高 */
    char    saiken_zandaka          [ 16];      /* 債券残高 */
    char    risk_zandaka            [ 16];      /* リスク商品残高 */
    char    IB_contract             [  1];      /* IB契約 */
    char    IB_contract_id          [ 16];      /* IB契約者ID */
    char    IB_branch_id            [  3];      /* IB契約申込店番 */
    char    IB_accnt_id             [  4];      /* IB契約代表口座科目 */
    char    IB_kuchi_no             [  3];      /* IB契約代表口座口番号 */
    char    IB_contract_day         [  8];      /* IB契約日 */
    char    IB_cancel_day           [  8];      /* IB契約解除日 */
    char    IB_update_day           [  8];      /* IB契約最終更新日 */
    char    net_contract            [  1];      /* ネット支店契約 */
    char    net_contract_id         [ 16];      /* ネット支店契約者ID */
    char    net_branch_id           [  3];      /* ネット支店契約申込店番 */
    char    net_accnt_id            [  4];      /* ネット支店契約代表口座科目 */
    char    net_kuchi_no            [  3];      /* ネット支店契約代表口座口番号 */
    char    net_contract_day        [  8];      /* ネット支店契約日 */
    char    net_cancel_day          [  8];      /* ネット支店契約解除日 */
    char    net_update_day          [  8];      /* ネット支店契約最終更新日 */
    char    occp_code               [  4];      /* 職業コード */
    char    income                  [ 15];      /* 年収 */
    char    income_year             [  4];      /* 所得年度 */
    char    torikan                 [  1];      /* 取引管理情報 */
    char    operate_name            [ 24];      /* 担当者名 */
    char    card_sign               [  1];      /* カード発行サイン */
    char    adress1                 [ 10];      /* 自宅住所都道府県 */
    char    adress2                 [ 24];      /* 自宅住所市区町村 */
    char    adress3                 [ 36];      /* 自宅住所大字通称 */
    char    adress4                 [ 40];      /* 自宅住所字丁目 */
    char    adress5                 [ 30];      /* 自宅住所番地 */
    char    adress6                 [ 30];      /* 自宅住所気付 */
    char    adress_kana1            [ 10];      /* 自宅住所都道府県カナ */
    char    adress_kana2            [ 24];      /* 自宅住所市区町村カナ */
    char    adress_kana3            [ 36];      /* 自宅住所大字通称カナ */
    char    adress_kana4            [ 40];      /* 自宅住所字丁目カナ */
    char    adress_kana5            [ 30];      /* 自宅住所番地カナ */
    char    adress_kana6            [ 30];      /* 自宅住所気付カナ */
    char    adress                  [170];      /* 自宅住所 */
    char    adress_kana             [175];      /* 自宅住所カナ */
    char    renraku_adress1         [ 10];      /* 連絡先住所都道府県 */
    char    renraku_adress2         [ 24];      /* 連絡先住所市区町村 */
    char    renraku_adress3         [ 36];      /* 連絡先住所大字通称 */
    char    renraku_adress4         [ 40];      /* 連絡先住所字丁目 */
    char    renraku_adress5         [ 30];      /* 連絡先住所番地 */
    char    renraku_adress6         [ 30];      /* 連絡先住所気付 */
    char    renraku_adress_kana1    [ 10];      /* 連絡先住所都道府県カナ */
    char    renraku_adress_kana2    [ 24];      /* 連絡先住所市区町村カナ */
    char    renraku_adress_kana3    [ 36];      /* 連絡先住所大字通称カナ */
    char    renraku_adress_kana4    [ 40];      /* 連絡先住所字丁目カナ */
    char    renraku_adress_kana5    [ 30];      /* 連絡先住所番地カナ */
    char    renraku_adress_kana6    [ 30];      /* 連絡先住所気付カナ */
    char    renraku_adress          [170];      /* 連絡先住所 */
    char    renraku_adress_kana     [175];      /* 連絡先住所カナ */
    char    data_date               [  8];      /* データ基準日 */
	char    tax_free                [  1];      /* マル優 */
    char    yobi                    [133];      /* 予備 */
    char    lf                      [  1];      /* 改行コード */
} RECV_FILE_DATA;

typedef struct _COUNT {
    int  iRecNum;                              /* 処理レコード件数           */
    int  iOkNum ;                              /* 正常終了レコード件数       */
    int  iOkNumW;                              /* (未commit分)               */
    int  iInsNum;                              /* 正常(うち登録レコード件数) */
    int  iInsNumW;                             /* (未commit分)               */
    int  iUpdNum;                              /* 正常(うち登録レコード件数) */
    int  iUpdNumW;                             /* (未commit分)               */
    int  iDelNum;                              /* 正常(うち削除レコード件数) */
    int  iDelNumW;                             /* (未commit分)               */
    int  iNgNum ;                              /* 異常終了レコード件数       */
} COUNT;

/*---------------------------------------------------------------------------*/
/* User Local defined  specification                                         */
/*---------------------------------------------------------------------------*/
#define L_WRITE_END                     1
#define L_WRITE_LOG                     0

/*---------------------------------------------------------------------------*/
/* Global variable specification                                             */
/*---------------------------------------------------------------------------*/
/* 設定ファイル項目（ホスト変数以外）*/
char g_szRecvFile       [AP_CONFIG_LINE];        /* 世帯属性差分更新ファイル */
char g_szLogFile        [AP_CONFIG_LINE];            /* 処理結果ファイル     */

FILE *g_pfRecvFile;
FILE *g_pfLogFile;
char g_szSyoriDate      [  9];                       /* 処理基準日           */
long g_iCommitSU;                                    /* 分割コミット件数保持 */
/*char g_szChange_Name[AP_GYO_CONFIG_MAX];   */          /* 更新者               */
char g_RecordID[2];                                  /* 処理区分             */
char g_ChangeID[2];                                  /* 処理区分             */

char g_szDtlMsg           [AP_C_NOTE_LEN_H];         /* 事象詳細文字列       */

/*---------------------------------------------------------------------------*/
/* Host Variable                                                             */
/*---------------------------------------------------------------------------*/
EXEC SQL INCLUDE SQLCA;
EXEC SQL BEGIN DECLARE SECTION;
    /* ＤＢ接続情報 */
    char sqlcmd[2048];

    long h_DATA_COUNT;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE TF_SetaiZokusei.h;     /* TF_世帯属性          */

char    process_name[43];
char    g_work[1024];

int file_open_flag1  = 0;		/* ファイルオープンフラグ(データファイル用) */
int file_open_flag2  = 0;		/* ファイルオープンフラグ(処理結果ファイル用)  */
/*---------------------------------------------------------------------------*/
/* Internal function prototype                                               */
/*---------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
/*  #5                       SUBROUTNE DEFINITION                           */
/*--------------------------------------------------------------------------*/
extern int send_err();
extern void errhandler();
extern int db_connect();
void rtrim();
void dump();

static void initialize( int ac, char *av[] );
static int  checkFilles( RECV_FILE_DATA *pData, char *g_szDtlMsg );
static int  checkData( char *pcheck_data, int data_size, char *pmsg,
                       char *pchange_data, char *g_szDtlMsg );
static int  insertTables( char *g_szDtlMsg );
static int  updateTables( char *g_szDtlMsg );
static int  deleteTables( char *g_szDtlMsg );
static int  rollback( void );
static int  commit( void );
static int  putAcctLogFile(int tp,RECV_FILE_DATA *pData,COUNT *dCount,int rc, char *g_szDtlMsg );
static void finalize( int rc, int iRecNum, int iOkNum );



/*****************************************************************************/
/* Function Name:                                                            */
/*   int main( int argc, char *argv[] )                                      */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*      メイン処理                                                           */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*    int    argc       引数の数                                             */
/*    char  *argv[]     													 */
/*                      argv[1]      世帯属性差分更新ファイル(ﾌﾙﾊﾟｽ)         */
/*                      argv[2]      処理結果ファイル名(ﾌﾙﾊﾟｽ)               */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
int main( int argc, char *argv[] )
{
	int     exit_code = NORMAL;
	int		rc = NORMAL;
	unsigned int RecvSt;


    RECV_FILE_DATA    dData;                         /* データ・レコード     */
    COUNT             dCount; 
    long              iCommitCnt;                  /* 分割コミット用カウンタ */
    int               rc_fin;



	/*-----------------------------*/
    /* Print process start message */
    /*-----------------------------*/

    strcpy( G_STATION, "DailyHousehold" );
	
	memset(process_name,0x00,sizeof(process_name));
    strcpy(process_name,"日次世帯属性差分データ取込処理");

    send_err( m$start_process, NORMAL, process_name, "", "", G_STATION );

    memset( &dCount, 0x00, sizeof( dCount ) );
    iCommitCnt = 0;

    /*-------------------------------------------------------*/
    /* Setup error handler routine                           */
    /*-------------------------------------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

    G_POSITION = __LINE__;
    rc = db_connect() ;
    if ( rc != NORMAL ) {
        send_err( m$db_connect, rc, "", "", "", G_STATION );
        rc = ERROR ;
        goto ENDPROC ;
    }


    /* ---------- */
    /* 初期化処理 */
    /* ---------- */
    initialize( argc, argv );



    while( 1 ) {
        memset( g_szDtlMsg, 0x00, sizeof( g_szDtlMsg ) );

        /* ---------------------------------- */
        /* 世帯属性差分更新ファイルからの読込 */
        /* ---------------------------------- */
		RecvSt = (unsigned int)fread( (char *) &dData, sizeof( RECV_FILE_DATA ), 1, g_pfRecvFile );

		if (RecvSt != 1) {
			if (feof( g_pfRecvFile ) != 0) {
				rc = NORMAL;
				break;
			}
			else{
				sprintf(g_szDtlMsg,"世帯属性差分更新ファイル(%s)の読込に失敗しました。",g_szRecvFile);
				send_err ( m$file_read, -1, g_szDtlMsg, NULL, NULL, G_STATION);

				rc = ERROR;
				break;
			}
		}
		else{
			rc = NORMAL;
		}

        dCount.iRecNum++;

        /* １万レコード毎にメッセージ出力 */
        if ( (dCount.iRecNum % 10000) == 0 ){
			sprintf ( g_szDtlMsg ,"[%d]レコード処理完了。。。", dCount.iRecNum);
			send_err ( m$message1, 0, g_szDtlMsg, NULL, NULL, G_STATION);
        }

        /* -------------------------------------- */
        /* 世帯属性差分更新ファイルからのチェック */
        /* -------------------------------------- */
        if ( (rc = checkFilles( &dData, g_szDtlMsg )) != NORMAL ){
            goto WriteFile;
        }


        /* -------------- */
        /* 処理区分：新規 */
        /* -------------- */
        if ( atoi(g_RecordID) == AP_C_SYORI_NEW ){
            if ( ( rc = insertTables(g_szDtlMsg) ) != NORMAL ){
                goto WriteFile;
            }
            dCount.iInsNumW++;
            dCount.iOkNumW++;
        }

        /* -------------- */
        /* 処理区分：変更 */
        /* -------------- */
        else if ( atoi(g_RecordID) == AP_C_SYORI_UPDATE ) {
            if ( ( rc = updateTables(g_szDtlMsg) ) != NORMAL ){
                goto WriteFile;
            }
            dCount.iUpdNumW++;
            dCount.iOkNumW++;
        }
        
        /* -------------- */
        /* 処理区分：削除 */
        /* -------------- */
        else if ( atoi(g_RecordID) == AP_C_SYORI_DELETE ) {
            if ( ( rc = deleteTables(g_szDtlMsg) ) != NORMAL ){
                goto WriteFile;
            }
            dCount.iDelNumW++;
            dCount.iOkNumW++;
        }

        iCommitCnt++;                      /* 世帯属性差分ファイルの処理件数 */

#if 0
		/* 再ランできないのでここでのCOMMITを削除 */
        /* 指定件数に到達したらＤＢのコミット */
        if ( iCommitCnt == g_iCommitSU) {
            dCount.iOkNum = dCount.iOkNum + dCount.iOkNumW;
            dCount.iInsNum = dCount.iInsNum + dCount.iInsNumW;
            dCount.iUpdNum = dCount.iUpdNum + dCount.iUpdNumW;
            dCount.iDelNum = dCount.iDelNum + dCount.iDelNumW;
            iCommitCnt = 0;
            dCount.iOkNumW = 0;
            dCount.iInsNumW = 0;
            dCount.iUpdNumW = 0;
            dCount.iDelNumW = 0;

            if ((rc = commit(g_szDtlMsg)) != NORMAL ){
                goto WriteFile;
            }
        }

#endif
WriteFile:
        if ( rc == ERROR  ) {
            dCount.iOkNumW = 0;
            dCount.iInsNumW = 0;
            dCount.iUpdNumW = 0;
            dCount.iDelNumW = 0;
            rollback();
            iCommitCnt = 0;
			dCount.iNgNum++;
        }

        /* ログ出力 */
        putAcctLogFile(L_WRITE_LOG, &dData, &dCount, rc, g_szDtlMsg );
		if ( rc == ERROR ) {
            break;
        }
		
    } /* while loop end */


    if( rc == NORMAL && dCount.iRecNum == 0 ){
		sprintf ( g_szDtlMsg, "世帯属性差分更新ファイル(%s)は０件ファイルです。", g_szRecvFile );
		send_err (m$message1, NORMAL, g_szDtlMsg, NULL, NULL, G_STATION);
    }

    if ( rc != NORMAL ) {
        rollback();
    }
    else{
        /* ＤＢのコミット */
        if( iCommitCnt > 0 ){
            dCount.iOkNum  = dCount.iOkNum  + iCommitCnt;
            dCount.iInsNum = dCount.iInsNum + dCount.iInsNumW;
            dCount.iUpdNum = dCount.iUpdNum + dCount.iUpdNumW;
            dCount.iDelNum = dCount.iDelNum + dCount.iDelNumW;
            rc = commit();
        }
    }


    rc_fin = putAcctLogFile(L_WRITE_END, &dData, &dCount, rc, g_szDtlMsg );
    if (rc == NORMAL){
        rc = rc_fin;
    }



ENDPROC:

	if ( rc == NORMAL ) {
        send_err( m$stop_process, NORMAL, process_name, "", "", G_STATION );
    } else {
        send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
    }


	finalize( rc, dCount.iRecNum, dCount.iOkNum );

}


/*==========================================================================*/
/* FUNCTION NAME  : initialize                                              */
/*                                                                          */
/* FUNCTION       : 初期化処理                                              */
/*                                                                          */
/*                : 戻り値     無し                                         */
/*                                                                          */
/*==========================================================================*/
static void initialize( int ac, char *av[] )
{
	int exit_code=NORMAL;

    /* コミット件数の取得 */
    g_iCommitSU = 100;


    /* 起動パラメータを使用する */
    if ( ac == 3 ) {
        strcpy(g_szRecvFile,  av[1]); /* 世帯属性差分更新ファイル    */
        strcpy(g_szLogFile,   av[2]); /* 処理結果ファイル            */
    }
    else {
		sprintf (g_szDtlMsg,"世帯属性差分更新ファイル 処理結果ファイル");
		send_err (m$invalid_parameter, ERROR, g_szDtlMsg, NULL, NULL, G_STATION);
		exit_code = ERROR;
		goto initialize_end;
    }


    /* 世帯属性差分更新ファイルのオープン */
    if(( g_pfRecvFile = fopen( g_szRecvFile, "r" )) == NULL ) {
		sprintf( g_szDtlMsg, "ファイル%sのオープンに失敗しました。", g_szRecvFile );
		send_err( m$file_open, errno, g_szDtlMsg, NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto initialize_end;

    }
	file_open_flag1 =1;

    /* 処理結果ファイルへのオープン */
    if (( g_pfLogFile = fopen( g_szLogFile, "w" )) == NULL ) {
		sprintf( g_szDtlMsg, "ファイル%sのオープンに失敗しました。", g_szLogFile );
		send_err( m$file_open, errno, g_szDtlMsg, NULL, NULL, G_STATION );

		exit_code = ERROR;
		goto initialize_end;
    }
	file_open_flag2 =1;

initialize_end:

	if ( exit_code != NORMAL ) {
		send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
		exit ( exit_code );    
	}

}


/*****************************************************************************/
/* Function Name:                                                            */
/*   int checkFilles( RECV_FILE_DATA *pData,char *g_szDtlMsg )              */
/*                                                                           */
/* Description:                                                              */
/*   各種チェック                                                            */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* RECV_FILE_DATA  *pData        I   世帯属性差分ファイル格納エリア          */
/* g_szDtlMsg     char*         I                                           */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*        NORMAL: 正常                                                       */
/*        ERROR : データ不正                                                 */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int checkFilles( RECV_FILE_DATA *pData, char *g_szDtlMsg )
{

    int rc = 0;


    memset( g_RecordID, 0x00, sizeof(g_RecordID) );
    memset( g_ChangeID, 0x00, sizeof(g_ChangeID) );


    /* ----------------------------- */
    /* TF_世帯属性のホスト変数初期化 */
    /* ----------------------------- */
    /* 店番 */
    memset( TMSZs_tenban, 0x00, sizeof(TMSZs_tenban) );
    TMSZsi_tenban=ORA_NULL;

    /* CIFNO */
    memset( TMSZs_cifno, 0x00, sizeof(TMSZs_cifno) );
    TMSZsi_cifno=ORA_NULL;
    
    /* 個人企業番号 */
    memset( TMSZs_kojin_kigyo_no, 0x00, sizeof(TMSZs_kojin_kigyo_no) );
    TMSZsi_kojin_kigyo_no=ORA_NULL;
    
    /* 人格区分 */
    memset( TMSZs_jinkaku_kbn, 0x00, sizeof(TMSZs_jinkaku_kbn) );
    TMSZsi_jinkaku_kbn=ORA_NULL;
    
    /* 世帯番号 */
    memset( TMSZs_setai_no, 0x00, sizeof(TMSZs_setai_no) );
    TMSZsi_setai_no=ORA_NULL;
    
    /* 氏名漢字 */
    memset( &TMSZs_name_knj, 0x00, sizeof(TMSZs_name_knj) );
    TMSZs_name_knj.len = 0;
    TMSZsi_name_knj=ORA_NULL;

    /* 氏名漢字更新フラグ */
    memset( TMSZs_name_knj_flg, 0x00, sizeof(TMSZs_name_knj_flg) );
    TMSZsi_name_knj_flg=ORA_NULL;
    
    /* 氏名カナ */
    memset( &TMSZs_name_kna, 0x00, sizeof(TMSZs_name_kna) );
    TMSZs_name_kna.len = 0;
    TMSZsi_name_kna=ORA_NULL;
    
    /* 氏名カナ更新フラグ */
    memset( TMSZs_name_kna_flg, 0x00, sizeof(TMSZs_name_kna_flg) );
    TMSZsi_name_kna_flg=ORA_NULL;
    
    /* 性別 */
    memset( TMSZs_sex, 0x00, sizeof(TMSZs_sex) );
    TMSZsi_sex=ORA_NULL;
    
    /* 性別更新フラグ */
    memset( TMSZs_sex_flg, 0x00, sizeof(TMSZs_sex_flg) );
    TMSZsi_sex_flg=ORA_NULL;
    
    /* 生年月日 */
    memset( TMSZs_birthday, 0x00, sizeof(TMSZs_birthday) );
    TMSZsi_birthday=ORA_NULL;
    
    /* 生年月日更新フラグ */
    memset( TMSZs_birthday_flg, 0x00, sizeof(TMSZs_birthday_flg) );
    TMSZsi_birthday_flg=ORA_NULL;
    
    /* 住所コード */
    memset( TMSZs_zip_cd, 0x00, sizeof(TMSZs_zip_cd) );
    TMSZsi_zip_cd=ORA_NULL;
    
    /* 郵便番号 */
    memset( TMSZs_zip, 0x00, sizeof(TMSZs_zip) );
    TMSZsi_zip=ORA_NULL;
    
    /* 補助住所 */
    memset( &TMSZs_hojo_jyusyo, 0x00, sizeof(TMSZs_hojo_jyusyo) );
    TMSZs_hojo_jyusyo.len = 0;
    TMSZsi_hojo_jyusyo=ORA_NULL;
    
    /* 住所変更フラグ */
    memset( TMSZs_addressflg, 0x00, sizeof(TMSZs_addressflg) );
    TMSZsi_addressflg=ORA_NULL;
    
    /* 補助住所カナ */
    memset( &TMSZs_hojo_jyusyo_kana, 0x00, sizeof(TMSZs_hojo_jyusyo_kana) );
    TMSZs_hojo_jyusyo_kana.len = 0;
    TMSZsi_hojo_jyusyo_kana=ORA_NULL;
    
    /* 住所カナ変更フラグ */
    memset( TMSZs_address_kana_flg, 0x00, sizeof(TMSZs_address_kana_flg) );
    TMSZsi_address_kana_flg=ORA_NULL;
    
    /* 自宅電話番号 */
    memset( TMSZs_jitakutel, 0x00, sizeof(TMSZs_jitakutel) );
    TMSZsi_jitakutel=ORA_NULL;
    
    /* 自宅電話番号更新フラグ */
    memset( TMSZs_jitakutel_flg, 0x00, sizeof(TMSZs_jitakutel_flg) );
    TMSZsi_jitakutel_flg=ORA_NULL;
    
    /* 自宅FAX番号 */
    memset( TMSZs_jitaku_fax, 0x00, sizeof(TMSZs_jitaku_fax) );
    TMSZsi_jitaku_fax=ORA_NULL;
    
    /* 自宅FAX番号更新フラグ */
    memset( TMSZs_jitaku_fax_flg, 0x00, sizeof(TMSZs_jitaku_fax_flg) );
    TMSZsi_jitaku_fax_flg=ORA_NULL;
    
    /* 携帯電話番号 */
    memset( TMSZs_keitai_tel, 0x00, sizeof(TMSZs_keitai_tel) );
    TMSZsi_keitai_tel=ORA_NULL;
    
    /* 携帯電話番号更新フラグ */
    memset( TMSZs_keitai_tel_flg, 0x00, sizeof(TMSZs_keitai_tel_flg) );
    TMSZsi_keitai_tel_flg=ORA_NULL;
    
    /* MAILアドレス */
    memset( &TMSZs_mail, 0x00, sizeof(TMSZs_mail) );
    TMSZs_mail.len = 0;
    TMSZsi_mail=ORA_NULL;
    
    /* MAILアドレス更新フラグ */
    memset( TMSZs_mail_flg, 0x00, sizeof(TMSZs_mail_flg) );
    TMSZsi_mail_flg=ORA_NULL;
    
    /* 勤務先名漢字 */
    memset( &TMSZs_kinmusaki, 0x00, sizeof(TMSZs_kinmusaki) );
    TMSZs_kinmusaki.len = 0;
    TMSZsi_kinmusaki=ORA_NULL;
    
    /* 勤務先名漢字更新フラグ */
    memset( TMSZs_kinmusaki_flg, 0x00, sizeof(TMSZs_kinmusaki_flg) );
    TMSZsi_kinmusaki_flg=ORA_NULL;
    
    /* 勤務先名カナ */
    memset( &TMSZs_kinmusaki_kana, 0x00, sizeof(TMSZs_kinmusaki_kana) );
    TMSZs_kinmusaki_kana.len = 0;
    TMSZsi_kinmusaki_kana=ORA_NULL;

    /* 勤務先名カナ更新フラグ */
    memset( TMSZs_kinmusaki_kana_flg, 0x00, sizeof(TMSZs_kinmusaki_kana_flg) );
    TMSZsi_kinmusaki_kana_flg=ORA_NULL;
    
    /* 勤務先電話番号 */
    memset( TMSZs_kinmusaki_tel, 0x00, sizeof(TMSZs_kinmusaki_tel) );
    TMSZsi_kinmusaki_tel=ORA_NULL;
    
    /* 勤務先電話番号更新フラグ */
    memset( TMSZs_kinmusaki_tel_flg, 0x00, sizeof(TMSZs_kinmusaki_tel_flg) );
    TMSZsi_kinmusaki_tel_flg=ORA_NULL;
    
    /* 連絡先住所コード */
    memset( TMSZs_renrakusaki_zip_cd, 0x00, sizeof(TMSZs_renrakusaki_zip_cd) );
    TMSZsi_renrakusaki_zip_cd=ORA_NULL;
    
    /* 連絡先郵便番号 */
    memset( TMSZs_renrakusaki_zip, 0x00, sizeof(TMSZs_renrakusaki_zip) );
    TMSZsi_renrakusaki_zip=ORA_NULL;
    
    /* 連絡先補助住所 */
    memset( &TMSZs_renrakusaki_hojo_jyusyo, 0x00, sizeof(TMSZs_renrakusaki_hojo_jyusyo) );
    TMSZs_renrakusaki_hojo_jyusyo.len = 0;
    TMSZsi_renrakusaki_hojo_jyusyo=ORA_NULL;
    
    /* 連絡先住所変更フラグ */
    memset( TMSZs_renrakusaki_addressflg, 0x00, sizeof(TMSZs_renrakusaki_addressflg) );
    TMSZsi_renrakusaki_addressflg=ORA_NULL;
    
    /* 連絡先補助住所カナ */
    memset( &TMSZs_renrakusaki_hojo_jyusyo_kana, 0x00, sizeof(TMSZs_renrakusaki_hojo_jyusyo_kana) );
    TMSZs_renrakusaki_hojo_jyusyo_kana.len = 0;
    TMSZsi_renrakusaki_hojo_jyusyo_kana=ORA_NULL;
    
    /* 連絡先住所変更フラグ */
    memset( TMSZs_renrakusaki_address_kana_flg, 0x00, sizeof(TMSZs_renrakusaki_address_kana_flg) );
    TMSZsi_renrakusaki_address_kana_flg=ORA_NULL;
    
    /* 連絡先電話番号 */
    memset( TMSZs_renrakusaki_tel, 0x00, sizeof(TMSZs_renrakusaki_tel) );
    TMSZsi_renrakusaki_tel=ORA_NULL;
    
    /* 連絡先電話番号更新フラグ */
    memset( TMSZs_renrakusaki_tel_flg, 0x00, sizeof(TMSZs_renrakusaki_tel_flg) );
    TMSZsi_renrakusaki_tel_flg=ORA_NULL;
    
    /* 連絡先FAX番号 */
    memset( TMSZs_renrakusaki_fax, 0x00, sizeof(TMSZs_renrakusaki_fax) );
    TMSZsi_renrakusaki_fax=ORA_NULL;
    
    /* 連絡先FAX番号更新フラグ */
    memset( TMSZs_renrakusaki_fax_flg, 0x00, sizeof(TMSZs_renrakusaki_fax_flg) );
    TMSZsi_renrakusaki_fax_flg=ORA_NULL;
    
    /* 日中連絡先電話番号 */
    memset( TMSZs_nicchu_tel, 0x00, sizeof(TMSZs_nicchu_tel) );
    TMSZsi_nicchu_tel=ORA_NULL;
    
    /* 日中連絡先電話番号更新フラグ */
    memset( TMSZs_nicchu_tel_flg, 0x00, sizeof(TMSZs_nicchu_tel_flg) );
    TMSZsi_nicchu_tel_flg=ORA_NULL;
    
    /* 行員区分 */
    memset( TMSZs_kouin_kbn, 0x00, sizeof(TMSZs_kouin_kbn) );
    TMSZsi_kouin_kbn=ORA_NULL;
    
    /* 郵便不着 */
    memset( TMSZs_futyaku, 0x00, sizeof(TMSZs_futyaku) );
    TMSZsi_futyaku=ORA_NULL;
    
    /* 会社寮 */
    memset( TMSZs_kaisya_ryo, 0x00, sizeof(TMSZs_kaisya_ryo) );
    TMSZsi_kaisya_ryo=ORA_NULL;
    
    /* 電話番号間違い */
    memset( TMSZs_denwa_matigai, 0x00, sizeof(TMSZs_denwa_matigai) );
    TMSZsi_denwa_matigai=ORA_NULL;
    
    /* 移転 */
    memset( TMSZs_iten, 0x00, sizeof(TMSZs_iten) );
    TMSZsi_iten=ORA_NULL;
    
    /* 本人死亡 */
    memset( TMSZs_honnin_sibo, 0x00, sizeof(TMSZs_honnin_sibo) );
    TMSZsi_honnin_sibo=ORA_NULL;
    
    /* ホストTM対象区分 */
    memset( TMSZs_host_tm, 0x00, sizeof(TMSZs_host_tm) );
    TMSZsi_host_tm=ORA_NULL;
    
    /* ホストDM対象区分 */
    memset( TMSZs_host_dm, 0x00, sizeof(TMSZs_host_dm) );
    TMSZsi_host_dm=ORA_NULL;

    /* 取引開始日 */
    memset( TMSZs_deal_day, 0x00, sizeof(TMSZs_deal_day) );
    TMSZsi_deal_day=ORA_NULL;

    /* 世帯主フラグ */
    memset( TMSZs_setai_flg, 0x00, sizeof(TMSZs_setai_flg) );
    TMSZsi_setai_flg=ORA_NULL;

    /* 当行金融資産残高 */
    memset( TMSZs_zandaka, 0x00, sizeof(TMSZs_zandaka) );
    TMSZsi_zandaka=ORA_NULL;

    /* 預り資産残高１ */
    memset( TMSZs_azukari_shisan1, 0x00, sizeof(TMSZs_azukari_shisan1) );
    TMSZsi_azukari_shisan1=ORA_NULL;

    /* 預り資産残高２ */
    memset( TMSZs_azukari_shisan2, 0x00, sizeof(TMSZs_azukari_shisan2) );
    TMSZsi_azukari_shisan2=ORA_NULL;

    /* 預り資産残高３ */
    memset( TMSZs_azukari_shisan3, 0x00, sizeof(TMSZs_azukari_shisan3) );
    TMSZsi_azukari_shisan3=ORA_NULL;

    /* 流動性預金残高 */
    memset( TMSZs_ryudo_zandaka, 0x00, sizeof(TMSZs_ryudo_zandaka) );
    TMSZsi_ryudo_zandaka=ORA_NULL;

    /* 定期性預金残高 */
    memset( TMSZs_teiki_zandaka, 0x00, sizeof(TMSZs_teiki_zandaka) );
    TMSZsi_teiki_zandaka=ORA_NULL;

    /* 仕組預金残高 */
    memset( TMSZs_shikumi_zandaka, 0x00, sizeof(TMSZs_shikumi_zandaka) );
    TMSZsi_shikumi_zandaka=ORA_NULL;

    /* 外貨預金残高 */
    memset( TMSZs_gaika_zandaka, 0x00, sizeof(TMSZs_gaika_zandaka) );
    TMSZsi_gaika_zandaka=ORA_NULL;

    /* 投信残高 */
    memset( TMSZs_toushin_zandaka, 0x00, sizeof(TMSZs_toushin_zandaka) );
    TMSZsi_toushin_zandaka=ORA_NULL;

    /* 債券残高 */
    memset( TMSZs_saiken_zandaka, 0x00, sizeof(TMSZs_saiken_zandaka) );
    TMSZsi_saiken_zandaka=ORA_NULL;

    /* リスク商品残高 */
    memset( TMSZs_risk_zandaka, 0x00, sizeof(TMSZs_risk_zandaka) );
    TMSZsi_risk_zandaka=ORA_NULL;

    /* IB契約 */
    memset( TMSZs_IB_contract, 0x00, sizeof(TMSZs_IB_contract) );
    TMSZsi_IB_contract=ORA_NULL;

    /* IB契約者ID */
    memset( TMSZs_IB_contract_id, 0x00, sizeof(TMSZs_IB_contract_id) );
    TMSZsi_IB_contract_id=ORA_NULL;

    /* IB契約申込店番 */
    memset( TMSZs_IB_branch_id, 0x00, sizeof(TMSZs_IB_branch_id) );
    TMSZsi_IB_branch_id=ORA_NULL;

    /* IB契約代表口座科目 */
    memset( TMSZs_IB_accnt_id, 0x00, sizeof(TMSZs_IB_accnt_id) );
    TMSZsi_IB_accnt_id=ORA_NULL;

    /* IB契約代表口座口番号 */
    memset( TMSZs_IB_kuchi_no, 0x00, sizeof(TMSZs_IB_kuchi_no) );
    TMSZsi_IB_kuchi_no=ORA_NULL;

    /* IB契約日 */
    memset( TMSZs_IB_contract_day, 0x00, sizeof(TMSZs_IB_contract_day) );
    TMSZsi_IB_contract_day=ORA_NULL;

    /* IB契約解除日 */
    memset( TMSZs_IB_cancel_day, 0x00, sizeof(TMSZs_IB_cancel_day) );
    TMSZsi_IB_cancel_day=ORA_NULL;

    /* IB契約最終更新日 */
    memset( TMSZs_IB_update_day, 0x00, sizeof(TMSZs_IB_update_day) );
    TMSZsi_IB_update_day=ORA_NULL;

    /* ネット支店契約 */
    memset( TMSZs_net_contract, 0x00, sizeof(TMSZs_net_contract) );
    TMSZsi_net_contract=ORA_NULL;

    /* ネット支店契約者ID */
    memset( TMSZs_net_contract_id, 0x00, sizeof(TMSZs_net_contract_id) );
    TMSZsi_net_contract_id=ORA_NULL;

    /* ネット支店契約申込店番 */
    memset( TMSZs_net_branch_id, 0x00, sizeof(TMSZs_net_branch_id) );
    TMSZsi_net_branch_id=ORA_NULL;

    /* ネット支店契約代表口座科目 */
    memset( TMSZs_net_accnt_id, 0x00, sizeof(TMSZs_net_accnt_id) );
    TMSZsi_net_accnt_id=ORA_NULL;

    /* ネット支店契約代表口座口番号 */
    memset( TMSZs_net_kuchi_no, 0x00, sizeof(TMSZs_net_kuchi_no) );
    TMSZsi_net_kuchi_no=ORA_NULL;

    /* ネット支店契約日 */
    memset( TMSZs_net_contract_day, 0x00, sizeof(TMSZs_net_contract_day) );
    TMSZsi_net_contract_day=ORA_NULL;

    /* ネット支店契約解除日 */
    memset( TMSZs_net_cancel_day, 0x00, sizeof(TMSZs_net_cancel_day) );
    TMSZsi_net_cancel_day=ORA_NULL;

    /* ネット支店契約最終更新日 */
    memset( TMSZs_net_update_day, 0x00, sizeof(TMSZs_net_update_day) );
    TMSZsi_net_update_day=ORA_NULL;

    /* 職業コード */
    memset( TMSZs_occp_code, 0x00, sizeof(TMSZs_occp_code) );
    TMSZsi_occp_code=ORA_NULL;

    /* 年収 */
    memset( TMSZs_income, 0x00, sizeof(TMSZs_income) );
    TMSZsi_income=ORA_NULL;

    /* 所得年度 */
    memset( TMSZs_income_year, 0x00, sizeof(TMSZs_income_year) );
    TMSZsi_income_year=ORA_NULL;

    /* 取引管理情報 */
    memset( TMSZs_torikan, 0x00, sizeof(TMSZs_torikan) );
    TMSZsi_torikan=ORA_NULL;

    /* 担当者名 */
    memset( TMSZs_operate_name, 0x00, sizeof(TMSZs_operate_name) );
    TMSZsi_operate_name=ORA_NULL;

    /* カード発行サイン */
    memset( TMSZs_card_sign, 0x00, sizeof(TMSZs_card_sign) );
    TMSZsi_card_sign=ORA_NULL;

    /* 自宅住所都道府県 */
    memset( &TMSZs_adress1, 0x00, sizeof(TMSZs_adress1) );
    TMSZs_adress1.len=0;
    TMSZsi_adress1=ORA_NULL;

    /* 自宅住所市区町村 */
    memset( &TMSZs_adress2, 0x00, sizeof(TMSZs_adress2) );
    TMSZs_adress2.len=0;
    TMSZsi_adress2=ORA_NULL;

    /* 自宅住所大字通称 */
    memset( &TMSZs_adress3, 0x00, sizeof(TMSZs_adress3) );
    TMSZs_adress3.len=0;
    TMSZsi_adress3=ORA_NULL;

    /* 自宅住所字丁目 */
    memset( &TMSZs_adress4, 0x00, sizeof(TMSZs_adress4) );
    TMSZs_adress4.len=0;
    TMSZsi_adress4=ORA_NULL;

    /* 自宅住所番地 */
    memset( &TMSZs_adress5, 0x00, sizeof(TMSZs_adress5) );
    TMSZs_adress5.len=0;
    TMSZsi_adress5=ORA_NULL;

    /* 自宅住所気付 */
    memset( &TMSZs_adress6, 0x00, sizeof(TMSZs_adress6) );
    TMSZs_adress6.len=0;
    TMSZsi_adress6=ORA_NULL;

    /* 自宅住所都道府県カナ */
    memset( &TMSZs_adress_kana1, 0x00, sizeof(TMSZs_adress_kana1) );
    TMSZs_adress_kana1.len=0;
    TMSZsi_adress_kana1=ORA_NULL;

    /* 自宅住所市区町村カナ */
    memset( &TMSZs_adress_kana2, 0x00, sizeof(TMSZs_adress_kana2) );
    TMSZs_adress_kana2.len=0;
    TMSZsi_adress_kana2=ORA_NULL;

    /* 自宅住所大字通称カナ */
    memset( &TMSZs_adress_kana3, 0x00, sizeof(TMSZs_adress_kana3) );
    TMSZs_adress_kana3.len=0;
    TMSZsi_adress_kana3=ORA_NULL;

    /* 自宅住所字丁目カナ */
    memset( &TMSZs_adress_kana4, 0x00, sizeof(TMSZs_adress_kana4) );
    TMSZs_adress_kana4.len=0;
    TMSZsi_adress_kana4=ORA_NULL;

    /* 自宅住所番地カナ */
    memset( &TMSZs_adress_kana5, 0x00, sizeof(TMSZs_adress_kana5) );
    TMSZs_adress_kana5.len=0;
    TMSZsi_adress_kana5=ORA_NULL;

    /* 自宅住所気付カナ */
    memset( &TMSZs_adress_kana6, 0x00, sizeof(TMSZs_adress_kana6) );
    TMSZs_adress_kana6.len=0;
    TMSZsi_adress_kana6=ORA_NULL;

    /* 自宅住所 */
    memset( &TMSZs_adress, 0x00, sizeof(TMSZs_adress) );
    TMSZs_adress.len = 0;
    TMSZsi_adress=ORA_NULL;

    /* 自宅住所カナ */
    memset( &TMSZs_adress_kana, 0x00, sizeof(TMSZs_adress_kana) );
    TMSZs_adress_kana.len = 0;
    TMSZsi_adress_kana=ORA_NULL;

    /* 連絡先住所都道府県 */
    memset( &TMSZs_renrakusaki_adress1, 0x00, sizeof(TMSZs_renrakusaki_adress1) );
    TMSZs_renrakusaki_adress1.len=0;
    TMSZsi_renrakusaki_adress1=ORA_NULL;

    /* 連絡先住所市区町村 */
    memset( &TMSZs_renrakusaki_adress2, 0x00, sizeof(TMSZs_renrakusaki_adress2) );
    TMSZs_renrakusaki_adress2.len=0;
    TMSZsi_renrakusaki_adress2=ORA_NULL;

    /* 連絡先住所大字通称 */
    memset( &TMSZs_renrakusaki_adress3, 0x00, sizeof(TMSZs_renrakusaki_adress3) );
    TMSZs_renrakusaki_adress3.len=0;
    TMSZsi_renrakusaki_adress3=ORA_NULL;

    /* 連絡先住所字丁目 */
    memset( &TMSZs_renrakusaki_adress4, 0x00, sizeof(TMSZs_renrakusaki_adress4) );
    TMSZs_renrakusaki_adress4.len=0;
    TMSZsi_renrakusaki_adress4=ORA_NULL;

    /* 連絡先住所番地 */
    memset( &TMSZs_renrakusaki_adress5, 0x00, sizeof(TMSZs_renrakusaki_adress5) );
    TMSZs_renrakusaki_adress5.len=0;
    TMSZsi_renrakusaki_adress5=ORA_NULL;

    /* 連絡先住所気付 */
    memset( &TMSZs_renrakusaki_adress6, 0x00, sizeof(TMSZs_renrakusaki_adress6) );
    TMSZs_renrakusaki_adress6.len=0;
    TMSZsi_renrakusaki_adress6=ORA_NULL;

    /* 連絡先住所都道府県カナ */
    memset( &TMSZs_renrakusaki_adress_kana1, 0x00, sizeof(TMSZs_renrakusaki_adress_kana1) );
    TMSZs_renrakusaki_adress_kana1.len=0;
    TMSZsi_renrakusaki_adress_kana1=ORA_NULL;

    /* 連絡先住所市区町村カナ */
    memset( &TMSZs_renrakusaki_adress_kana2, 0x00, sizeof(TMSZs_renrakusaki_adress_kana2) );
    TMSZs_renrakusaki_adress_kana2.len=0;
    TMSZsi_renrakusaki_adress_kana2=ORA_NULL;

    /* 連絡先住所大字通称カナ */
    memset( &TMSZs_renrakusaki_adress_kana3, 0x00, sizeof(TMSZs_renrakusaki_adress_kana3) );
    TMSZs_renrakusaki_adress_kana3.len=0;
    TMSZsi_renrakusaki_adress_kana3=ORA_NULL;

    /* 連絡先住所字丁目カナ */
    memset( &TMSZs_renrakusaki_adress_kana4, 0x00, sizeof(TMSZs_renrakusaki_adress_kana4) );
    TMSZs_renrakusaki_adress_kana4.len=0;
    TMSZsi_renrakusaki_adress_kana4=ORA_NULL;

    /* 連絡先住所番地カナ */
    memset( &TMSZs_renrakusaki_adress_kana5, 0x00, sizeof(TMSZs_renrakusaki_adress_kana5) );
    TMSZs_renrakusaki_adress_kana5.len=0;
    TMSZsi_renrakusaki_adress_kana5=ORA_NULL;

    /* 連絡先住所気付カナ */
    memset( &TMSZs_renrakusaki_adress_kana6, 0x00, sizeof(TMSZs_renrakusaki_adress_kana6) );
    TMSZs_renrakusaki_adress_kana6.len=0;
    TMSZsi_renrakusaki_adress_kana6=ORA_NULL;

    /* 連絡先住所 */
    memset( &TMSZs_renrakusaki_adress, 0x00, sizeof(TMSZs_renrakusaki_adress) );
    TMSZs_renrakusaki_adress.len = 0;
    TMSZsi_renrakusaki_adress=ORA_NULL;

    /* 連絡先住所カナ */
    memset( &TMSZs_renrakusaki_adress_kana, 0x00, sizeof(TMSZs_renrakusaki_adress_kana) );
    TMSZs_renrakusaki_adress_kana.len = 0;
    TMSZsi_renrakusaki_adress_kana=ORA_NULL;

    /* データ基準日 */
    memset( TMSZs_data_date, 0x00, sizeof(TMSZs_data_date) );
    TMSZsi_data_date=ORA_NULL;



    /* ---------------------------------- */
    /* 世帯属性差分更新ファイルのチェック */
    /* ホスト変数へのデータセット         */
    /* ---------------------------------- */

    /* 改行コード */
    if( pData->lf[0] != 0x0a ) {
        strcpy( g_szDtlMsg,
                "世帯属性差分ファイルに改行コードの設定がありません。");
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }


    /* 処理区分 */
    if( pData->record_id[0] == 0x00 || pData->record_id[0] == 0x20 ) {
        strcpy( g_szDtlMsg, "処理区分の設定がありません。");
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }
    else {
        memcpy( g_RecordID, pData->record_id, sizeof(pData->record_id) );
        if ( atoi(g_RecordID) < AP_C_SYORI_NEW ||
             atoi(g_RecordID) > AP_C_SYORI_DELETE ){
            sprintf( g_szDtlMsg,
                     "世帯属性差分ファイルの処理区分(%s)が異常です。",
                     g_RecordID);
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
            return(ERROR);
        }
    }

    /* 変更区分 */
    if( atoi(g_RecordID) == AP_C_SYORI_UPDATE ){
        if( pData->change_id[0] == 0x00 || pData->change_id[0] == 0x20 ) {
            strcpy( g_szDtlMsg, "変更区分の設定がありません。");
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
            return(ERROR);
        }
        else {
            memcpy( g_ChangeID, pData->change_id, sizeof(pData->change_id) );
            if ( atoi(g_ChangeID) != AP_C_SYORI_NORMAL ){
                sprintf( g_szDtlMsg,
                         "世帯属性差分ファイルの変更区分(%s)が異常です。",
                         g_ChangeID);
                send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
                return(ERROR);
            }
        }
    }


    /* 店番 */
    rc = checkData(pData->branch_id, sizeof(pData->branch_id),
                   "店番", TMSZs_tenban, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_tenban=ORA_NOT_NULL;
    }


    /* CIFNO */
    rc = checkData(pData->cifno, sizeof(pData->cifno),
                   "CIFNO", TMSZs_cifno, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_cifno=ORA_NOT_NULL;
    }

    /* 個人番号 */
    rc = checkData(pData->kojin_no, sizeof(pData->kojin_no),
                   "個人番号", TMSZs_kojin_kigyo_no, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_kojin_kigyo_no=ORA_NOT_NULL;
    }

    /* 人格区分 */
    rc = checkData(pData->personality, sizeof(pData->personality),
                   "人格区分", TMSZs_jinkaku_kbn, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_jinkaku_kbn=ORA_NOT_NULL;
    }

    /* 世帯番号 */
    rc = checkData(pData->setai_no, sizeof(pData->setai_no),
                   "世帯番号", TMSZs_setai_no, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_setai_no=ORA_NOT_NULL;
    }

    /* 世帯属性テーブル確認 */
    h_DATA_COUNT = 0;                            /* 世帯属性カウント         */

	G_POSITION = __LINE__;
    EXEC SQL SELECT COUNT(*) INTO :h_DATA_COUNT FROM TF_世帯属性
        WHERE
             世帯番号 = :TMSZs_setai_no;


    if (sqlca.sqlcode != 0 && sqlca.sqlcode != ORA_NOF){
        sprintf( g_szDtlMsg,
                 "[店番=%s CIFNO=%s 世帯番号=%s]TF_世帯属性テーブルの検索に失敗しました。(sqlca.sqlcode=%d)",
                  TMSZs_tenban, TMSZs_cifno, TMSZs_setai_no, sqlca.sqlcode );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "SELECT COUNT(*) TF_世帯属性", NULL, NULL, G_STATION);
        return(ERROR);
    }


    if ( (atoi(g_RecordID) == AP_C_SYORI_NEW && h_DATA_COUNT > 0) ){
        sprintf( g_szDtlMsg,
                 "[店番=%s CIFNO=%s 世帯番号=%s 処理区分=%s 世帯属性COUNT=%d]既にTF_世帯属性テーブルに存在するデータです。",
                  TMSZs_tenban, TMSZs_cifno, TMSZs_setai_no, g_RecordID, h_DATA_COUNT );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }
    if ( (atoi(g_RecordID) == AP_C_SYORI_UPDATE && h_DATA_COUNT == 0) ||
         (atoi(g_RecordID) == AP_C_SYORI_DELETE && h_DATA_COUNT == 0) ){
        sprintf( g_szDtlMsg,
                 "[店番=%s CIFNO=%s 世帯番号=%s 処理区分=%s 世帯属性COUNT=%d]TF_世帯属性テーブルに存在しないデータです。",
                  TMSZs_tenban, TMSZs_cifno, TMSZs_setai_no, g_RecordID, h_DATA_COUNT );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }


    /* 処理区分＝削除はここまで */
    if ( atoi(g_RecordID) == AP_C_SYORI_DELETE ){
        return(NORMAL);
    }

    /* 氏名漢字 値なし許可 */
    if( pData->name_kanji[0] != 0x00 && pData->name_kanji[0] != 0x20 ) {
        memcpy( TMSZs_name_knj.arr, pData->name_kanji, sizeof(pData->name_kanji) );
        rtrim( TMSZs_name_knj.arr );
        TMSZs_name_knj.len = (unsigned int)(unsigned int)strlen(TMSZs_name_knj.arr);
        TMSZsi_name_knj=ORA_NOT_NULL;
    }

    /* 氏名カナ */
    rc = checkData(pData->name_kana, sizeof(pData->name_kana),
                   "氏名カナ", TMSZs_name_kna.arr, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_name_kna=ORA_NOT_NULL;

        TMSZs_name_kna.len = (unsigned int)(unsigned int)strlen(TMSZs_name_kna.arr);
    }

    /* 性別 */
    rc = checkData(pData->sex, sizeof(pData->sex), "性別", TMSZs_sex, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_sex=ORA_NOT_NULL;
    }

    /* 生年月日 値なし許可 */
    if( pData->birthday[0] != 0x00 && pData->birthday[0] != 0x20 ) {
        memcpy( TMSZs_birthday, pData->birthday, sizeof(pData->birthday) );
        rtrim( TMSZs_birthday );
        TMSZsi_birthday=ORA_NOT_NULL;
    }

    /* 住所コード */
    rc = checkData(pData->address_code, sizeof(pData->address_code),
                   "住所コード", TMSZs_zip_cd, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_zip_cd=ORA_NOT_NULL;
    }

    /* 郵便番号 値なし許可 */
    if( pData->post_no[0] != 0x00 && pData->post_no[0] != 0x20 ) {
        memcpy( TMSZs_zip, pData->post_no, sizeof(pData->post_no) );
        rtrim( TMSZs_zip );
        TMSZsi_zip=ORA_NOT_NULL;
    }

    /* 補助住所 値なし許可 */
    if( pData->sub_address[0] != 0x00 && pData->sub_address[0] != 0x20 ) {
        memcpy( TMSZs_hojo_jyusyo.arr, pData->sub_address, sizeof(pData->sub_address) );
        rtrim( TMSZs_hojo_jyusyo.arr );
        TMSZs_hojo_jyusyo.len = (unsigned int)(unsigned int)strlen(TMSZs_hojo_jyusyo.arr);
        TMSZsi_hojo_jyusyo=ORA_NOT_NULL;
    }

    /* 補助住所カナ 値なし許可 */
    if( pData->sub_address_kana[0] != 0x00 && pData->sub_address_kana[0] != 0x20 ) {
        memcpy( TMSZs_hojo_jyusyo_kana.arr, pData->sub_address_kana, sizeof(pData->sub_address_kana) );
        rtrim( TMSZs_hojo_jyusyo_kana.arr );
        TMSZsi_hojo_jyusyo_kana=ORA_NOT_NULL;


        TMSZs_hojo_jyusyo_kana.len = (unsigned int)(unsigned int)strlen(TMSZs_hojo_jyusyo_kana.arr);
    }

    /* 自宅電話番号 値なし許可 */
    if( pData->tel_no[0] != 0x00 && pData->tel_no[0] != 0x20 ) {
        memcpy( TMSZs_jitakutel, pData->tel_no, sizeof(pData->tel_no) );
        rtrim( TMSZs_jitakutel );
        TMSZsi_jitakutel=ORA_NOT_NULL;
		/* %01 Add */
		if ( strlen(TMSZs_jitakutel) > 15 ) {
			sprintf( g_szDtlMsg,"自宅電話番号桁あふれ カットしました[CIFNO=%s] 番号=[%s]",
						TMSZs_cifno,TMSZs_jitakutel );
			send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
			TMSZs_jitakutel[15] = 0x0;
			
		}
    }

    /* 自宅FAX番号 値なし許可 */
    if( pData->fax_no[0] != 0x00 && pData->fax_no[0] != 0x20 ) {
        memcpy( TMSZs_jitaku_fax, pData->fax_no, sizeof(pData->fax_no) );
        rtrim( TMSZs_jitaku_fax );
        TMSZsi_jitaku_fax=ORA_NOT_NULL;
		/* %01 Add */
		if ( strlen(TMSZs_jitaku_fax) > 15 ) {
			sprintf( g_szDtlMsg,"自宅FAX番号桁あふれ カットしました[CIFNO=%s] 番号=[%s]",
						TMSZs_cifno,TMSZs_jitaku_fax );
			send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
			TMSZs_jitaku_fax[15] = 0x0;
			
		}
    }

    /* 携帯電話番号 値なし許可 */
    if( pData->portable_phone[0] != 0x00 && pData->portable_phone[0] != 0x20 ) {
        memcpy( TMSZs_keitai_tel, pData->portable_phone, sizeof(pData->portable_phone) );
        rtrim( TMSZs_keitai_tel );
        TMSZsi_keitai_tel=ORA_NOT_NULL;
		/* %01 Add */
		if ( strlen(TMSZs_keitai_tel) > 15 ) {
			sprintf( g_szDtlMsg,"携帯電話番号桁あふれ カットしました[CIFNO=%s] 番号=[%s]",
						TMSZs_cifno,TMSZs_keitai_tel );
			send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
			TMSZs_keitai_tel[15] = 0x0;
			
		}
    }

    /* MAILアドレス 値なし許可 */
    if( pData->mail_address[0] != 0x00 && pData->mail_address[0] != 0x20 ) {
        memcpy( TMSZs_mail.arr, pData->mail_address, sizeof(pData->mail_address) );
        rtrim( TMSZs_mail.arr );
        TMSZs_mail.len = (unsigned int)(unsigned int)strlen(TMSZs_mail.arr);
        TMSZsi_mail=ORA_NOT_NULL;
    }

    /* 勤務先名漢字 値なし許可 */
    if( pData->job_name_kanji[0] != 0x00 && pData->job_name_kanji[0] != 0x20 ) {
        memcpy( TMSZs_kinmusaki.arr, pData->job_name_kanji, sizeof(pData->job_name_kanji) );
        rtrim( TMSZs_kinmusaki.arr );
        TMSZs_kinmusaki.len = (unsigned int)(unsigned int)strlen(TMSZs_kinmusaki.arr);
        TMSZsi_kinmusaki=ORA_NOT_NULL;
    }

    /* 勤務先名カナ 値なし許可 */
    if( pData->job_name_kana[0] != 0x00 && pData->job_name_kana[0] != 0x20 ) {
        memcpy( TMSZs_kinmusaki_kana.arr, pData->job_name_kana, sizeof(pData->job_name_kana) );
        rtrim( TMSZs_kinmusaki_kana.arr );
        TMSZsi_kinmusaki_kana=ORA_NOT_NULL;

        TMSZs_kinmusaki_kana.len = (unsigned int)(unsigned int)strlen(TMSZs_kinmusaki_kana.arr);
    }

    /* 勤務先電話番号 値なし許可 */
    if( pData->job_tel_no[0] != 0x00 && pData->job_tel_no[0] != 0x20 ) {
        memcpy( TMSZs_kinmusaki_tel, pData->job_tel_no, sizeof(pData->job_tel_no) );
        rtrim( TMSZs_kinmusaki_tel );
        TMSZsi_kinmusaki_tel=ORA_NOT_NULL;
		/* %01 Add */
		if ( strlen(TMSZs_kinmusaki_tel) > 15 ) {
			sprintf( g_szDtlMsg,"勤務先電話番号桁あふれ カットしました[CIFNO=%s] 番号=[%s]",
						TMSZs_cifno,TMSZs_kinmusaki_tel );
			send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
			TMSZs_kinmusaki_tel[15] = 0x0;
			
		}
    }

    /* 連絡先住所コード 値なし許可*/
    if( pData->renraku_address_code[0] != 0x00 && pData->renraku_address_code[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_zip_cd, pData->renraku_address_code, sizeof(pData->renraku_address_code) );
        rtrim( TMSZs_renrakusaki_zip_cd );
        TMSZsi_renrakusaki_zip_cd=ORA_NOT_NULL;
    }

    /* 連絡先郵便番号 値なし許可 */
    if( pData->renraku_post_no[0] != 0x00 && pData->renraku_post_no[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_zip, pData->renraku_post_no, sizeof(pData->renraku_post_no) );
        rtrim( TMSZs_renrakusaki_zip );
        TMSZsi_renrakusaki_zip=ORA_NOT_NULL;
    }

    /* 連絡先補助住所 値なし許可 */
    if( pData->renraku_sub_adress[0] != 0x00 && pData->renraku_sub_adress[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_hojo_jyusyo.arr, pData->renraku_sub_adress, sizeof(pData->renraku_sub_adress) );
        rtrim( TMSZs_renrakusaki_hojo_jyusyo.arr );
        TMSZs_renrakusaki_hojo_jyusyo.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_hojo_jyusyo.arr);
        TMSZsi_renrakusaki_hojo_jyusyo=ORA_NOT_NULL;
    }

    /* 連絡先補助住所カナ 値なし許可 */
    if( pData->renraku_sub_adress_kana[0] != 0x00 && pData->renraku_sub_adress_kana[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_hojo_jyusyo_kana.arr, pData->renraku_sub_adress_kana, sizeof(pData->renraku_sub_adress_kana) );
        rtrim( TMSZs_renrakusaki_hojo_jyusyo_kana.arr );
        TMSZsi_renrakusaki_hojo_jyusyo_kana=ORA_NOT_NULL;

        TMSZs_renrakusaki_hojo_jyusyo_kana.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_hojo_jyusyo_kana.arr);
    }

    /* 連絡先電話番号 値なし許可 */
    if( pData->renraku_tel_no[0] != 0x00 && pData->renraku_tel_no[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_tel, pData->renraku_tel_no, sizeof(pData->renraku_tel_no) );
        rtrim( TMSZs_renrakusaki_tel );
        TMSZsi_renrakusaki_tel=ORA_NOT_NULL;
		/* %01 Add */
		if ( strlen(TMSZs_renrakusaki_tel) > 15 ) {
			sprintf( g_szDtlMsg,"連絡先電話番号桁あふれ カットしました[CIFNO=%s] 番号=[%s]",
						TMSZs_cifno,TMSZs_renrakusaki_tel );
			send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
			TMSZs_renrakusaki_tel[15] = 0x0;
			
		}
    }

    /* 連絡先FAX番号 値なし許可 */
    if( pData->renraku_fax_no[0] != 0x00 && pData->renraku_fax_no[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_fax, pData->renraku_fax_no, sizeof(pData->renraku_fax_no) );
        rtrim( TMSZs_renrakusaki_fax );
        TMSZsi_renrakusaki_fax=ORA_NOT_NULL;
		/* %01 Add */
		if ( strlen(TMSZs_renrakusaki_fax) > 15 ) {
			sprintf( g_szDtlMsg,"連絡先FAX番号桁あふれ カットしました[CIFNO=%s] 番号=[%s]",
						TMSZs_cifno,TMSZs_renrakusaki_fax );
			send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
			TMSZs_renrakusaki_fax[15] = 0x0;
			
		}
    }

    /* 日中連絡先電話番号 値なし許可 */
    if( pData->nicchu_tel_no[0] != 0x00 && pData->nicchu_tel_no[0] != 0x20 ) {
        memcpy( TMSZs_nicchu_tel, pData->nicchu_tel_no, sizeof(pData->nicchu_tel_no) );
        rtrim( TMSZs_nicchu_tel );
        TMSZsi_nicchu_tel=ORA_NOT_NULL;
		/* %01 Add */
		if ( strlen(TMSZs_nicchu_tel) > 15 ) {
			sprintf( g_szDtlMsg,"日中連絡先電話番号桁あふれ カットしました[CIFNO=%s] 番号=[%s]",
						TMSZs_cifno,TMSZs_nicchu_tel );
			send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
			TMSZs_nicchu_tel[15] = 0x0;
			
		}
    }

    /* CIF開設日 */
    rc = checkData(pData->start_day, sizeof(pData->start_day),
                   "CIF開設日", TMSZs_deal_day, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_deal_day=ORA_NOT_NULL;
    }

    /* 世帯主フラグ */
    rc = checkData(pData->setai_flg, sizeof(pData->setai_flg),
                   "世帯主フラグ", TMSZs_setai_flg, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_setai_flg=ORA_NOT_NULL;
    }

    /* ホストTM対象区分 */
    rc = checkData(pData->host_tm, sizeof(pData->host_tm),
                   "ホストTM対象区分", TMSZs_host_tm, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_host_tm=ORA_NOT_NULL;
    }

    /* ホストDM対象区分 */
    rc = checkData(pData->host_dm, sizeof(pData->host_dm),
                   "ホストDM対象区分", TMSZs_host_dm, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_host_dm=ORA_NOT_NULL;
    }

    /* 行員区分 */
    rc = checkData(pData->flag01, sizeof(pData->flag01),
                   "行員区分", TMSZs_kouin_kbn, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_kouin_kbn=ORA_NOT_NULL;
    }

    /* 郵便不着 */
    rc = checkData(pData->flag02, sizeof(pData->flag02),
                   "郵便不着", TMSZs_futyaku, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_futyaku=ORA_NOT_NULL;
    }

    /* 会社寮 */
    rc = checkData(pData->flag03, sizeof(pData->flag03),
                   "会社寮", TMSZs_kaisya_ryo, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_kaisya_ryo=ORA_NOT_NULL;
    }

    /* 電話番号間違い */
    rc = checkData(pData->flag04, sizeof(pData->flag04),
                   "電話番号間違い", TMSZs_denwa_matigai, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_denwa_matigai=ORA_NOT_NULL;
    }

    /* 移転 */
    rc = checkData(pData->flag05, sizeof(pData->flag05),
                   "移転", TMSZs_iten, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_iten=ORA_NOT_NULL;
    }

    /* 本人死亡 */
    rc = checkData(pData->flag06, sizeof(pData->flag06),
                   "本人死亡", TMSZs_honnin_sibo, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_honnin_sibo=ORA_NOT_NULL;
    }

    /* 当行金融資産残高 */
    rc = checkData(pData->zandaka, sizeof(pData->zandaka),
                   "当行金融資産残高", TMSZs_zandaka, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_zandaka=ORA_NOT_NULL;
    }

    /* 預り資産残高１ */
    rc = checkData(pData->azukari_shisan1, sizeof(pData->azukari_shisan1),
                   "預り資産残高１", TMSZs_azukari_shisan1, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_azukari_shisan1=ORA_NOT_NULL;
    }

    /* 預り資産残高２ */
    rc = checkData(pData->azukari_shisan2, sizeof(pData->azukari_shisan2),
                   "預り資産残高２", TMSZs_azukari_shisan2, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_azukari_shisan2=ORA_NOT_NULL;
    }

    /* 預り資産残高３ */
    rc = checkData(pData->azukari_shisan3, sizeof(pData->azukari_shisan3),
                   "預り資産残高３", TMSZs_azukari_shisan3, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_azukari_shisan3=ORA_NOT_NULL;
    }

    /* 流動性預金残高 */
    rc = checkData(pData->ryudo_zandaka, sizeof(pData->ryudo_zandaka),
                   "流動性預金残高", TMSZs_ryudo_zandaka, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_ryudo_zandaka=ORA_NOT_NULL;
    }

    /* 定期性預金残高 */
    rc = checkData(pData->teiki_zandaka, sizeof(pData->teiki_zandaka),
                   "定期性預金残高", TMSZs_teiki_zandaka, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_teiki_zandaka=ORA_NOT_NULL;
    }

    /* 仕組預金残高 */
    rc = checkData(pData->shikumi_zandaka, sizeof(pData->shikumi_zandaka),
                   "仕組預金残高", TMSZs_shikumi_zandaka, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_shikumi_zandaka=ORA_NOT_NULL;
    }

    /* 外貨預金残高 */
    rc = checkData(pData->gaika_zandaka, sizeof(pData->gaika_zandaka),
                   "外貨預金残高", TMSZs_gaika_zandaka, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_gaika_zandaka=ORA_NOT_NULL;
    }

    /* 投信残高 */
    rc = checkData(pData->toushin_zandaka, sizeof(pData->toushin_zandaka),
                   "投信残高", TMSZs_toushin_zandaka, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_toushin_zandaka=ORA_NOT_NULL;
    }

    /* 債券残高 */
    rc = checkData(pData->saiken_zandaka, sizeof(pData->saiken_zandaka),
                   "債券残高", TMSZs_saiken_zandaka, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_saiken_zandaka=ORA_NOT_NULL;
    }

    /* リスク商品残高 */
    rc = checkData(pData->risk_zandaka, sizeof(pData->risk_zandaka),
                   "リスク商品残高", TMSZs_risk_zandaka, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_risk_zandaka=ORA_NOT_NULL;
    }

    /* IB契約 */
    rc = checkData(pData->IB_contract, sizeof(pData->IB_contract),
                   "IB契約", TMSZs_IB_contract, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_IB_contract=ORA_NOT_NULL;
    }

    /* IB契約者ID 値なし許可 */
    if( pData->IB_contract_id[0] != 0x00 && pData->IB_contract_id[0] != 0x20 ) {
        memcpy( TMSZs_IB_contract_id, pData->IB_contract_id, sizeof(pData->IB_contract_id) );
        rtrim( TMSZs_IB_contract_id );
        TMSZsi_IB_contract_id=ORA_NOT_NULL;
    }

    /* IB契約申込店番 値なし許可 */
    if( pData->IB_branch_id[0] != 0x00 && pData->IB_branch_id[0] != 0x20 ) {
        memcpy( TMSZs_IB_branch_id, pData->IB_branch_id, sizeof(pData->IB_branch_id) );
        rtrim( TMSZs_IB_branch_id );
        TMSZsi_IB_branch_id=ORA_NOT_NULL;
    }

    /* IB契約代表口座科目 値なし許可 */
    if( pData->IB_accnt_id[0] != 0x00 && pData->IB_accnt_id[0] != 0x20 ) {
        memcpy( TMSZs_IB_accnt_id, pData->IB_accnt_id, sizeof(pData->IB_accnt_id) );
        rtrim( TMSZs_IB_accnt_id );
        TMSZsi_IB_accnt_id=ORA_NOT_NULL;
    }

    /* IB契約代表口座口番号 値なし許可 */
    if( pData->IB_kuchi_no[0] != 0x00 && pData->IB_kuchi_no[0] != 0x20 ) {
        memcpy( TMSZs_IB_kuchi_no, pData->IB_kuchi_no, sizeof(pData->IB_kuchi_no) );
        rtrim( TMSZs_IB_kuchi_no );
        TMSZsi_IB_kuchi_no=ORA_NOT_NULL;
    }

    /* IB契約日 値なし許可 */
    if( pData->IB_contract_day[0] != 0x00 && pData->IB_contract_day[0] != 0x20 ) {
        memcpy( TMSZs_IB_contract_day, pData->IB_contract_day, sizeof(pData->IB_contract_day) );
        rtrim( TMSZs_IB_contract_day );
        TMSZsi_IB_contract_day=ORA_NOT_NULL;
    }

    /* IB契約解除日 値なし許可 */
    if( pData->IB_cancel_day[0] != 0x00 && pData->IB_cancel_day[0] != 0x20 ) {
        memcpy( TMSZs_IB_cancel_day, pData->IB_cancel_day, sizeof(pData->IB_cancel_day) );
        rtrim( TMSZs_IB_cancel_day );
        TMSZsi_IB_cancel_day=ORA_NOT_NULL;
    }

    /* IB契約最終更新日 値なし許可 */
    if( pData->IB_update_day[0] != 0x00 && pData->IB_update_day[0] != 0x20 ) {
        memcpy( TMSZs_IB_update_day, pData->IB_update_day, sizeof(pData->IB_update_day) );
        rtrim( TMSZs_IB_update_day );
        TMSZsi_IB_update_day=ORA_NOT_NULL;
    }

    /* ネット支店契約 */
    rc = checkData(pData->net_contract, sizeof(pData->net_contract),
                   "ネット支店契約", TMSZs_net_contract, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_net_contract=ORA_NOT_NULL;
    }

    /* ネット支店契約者ID 値なし許可 */
    if( pData->net_contract_id[0] != 0x00 && pData->net_contract_id[0] != 0x20 ) {
        memcpy( TMSZs_net_contract_id, pData->net_contract_id, sizeof(pData->net_contract_id) );
        rtrim( TMSZs_net_contract_id );
        TMSZsi_net_contract_id=ORA_NOT_NULL;
    }

    /* ネット支店契約申込店番 値なし許可 */
    if( pData->net_branch_id[0] != 0x00 && pData->net_branch_id[0] != 0x20 ) {
        memcpy( TMSZs_net_branch_id, pData->net_branch_id, sizeof(pData->net_branch_id) );
        rtrim( TMSZs_net_branch_id );
        TMSZsi_net_branch_id=ORA_NOT_NULL;
    }

    /* ネット支店契約代表口座科目 値なし許可 */
    if( pData->net_accnt_id[0] != 0x00 && pData->net_accnt_id[0] != 0x20 ) {
        memcpy( TMSZs_net_accnt_id, pData->net_accnt_id, sizeof(pData->net_accnt_id) );
        rtrim( TMSZs_net_accnt_id );
        TMSZsi_net_accnt_id=ORA_NOT_NULL;
    }

    /* ネット支店契約代表口座口番号 値なし許可 */
    if( pData->net_kuchi_no[0] != 0x00 && pData->net_kuchi_no[0] != 0x20 ) {
        memcpy( TMSZs_net_kuchi_no, pData->net_kuchi_no, sizeof(pData->net_kuchi_no) );
        rtrim( TMSZs_net_kuchi_no );
        TMSZsi_net_kuchi_no=ORA_NOT_NULL;
    }

    /* ネット支店契約日 値なし許可 */
    if( pData->net_contract_day[0] != 0x00 && pData->net_contract_day[0] != 0x20 ) {
        memcpy( TMSZs_net_contract_day, pData->net_contract_day, sizeof(pData->net_contract_day) );
        rtrim( TMSZs_net_contract_day );
        TMSZsi_net_contract_day=ORA_NOT_NULL;
    }

    /* ネット支店契約解除日 値なし許可 */
    if( pData->net_cancel_day[0] != 0x00 && pData->net_cancel_day[0] != 0x20 ) {
        memcpy( TMSZs_net_cancel_day, pData->net_cancel_day, sizeof(pData->net_cancel_day) );
        rtrim( TMSZs_net_cancel_day );
        TMSZsi_net_cancel_day=ORA_NOT_NULL;
    }

    /* ネット支店契約最終更新日 値なし許可 */
    if( pData->net_update_day[0] != 0x00 && pData->net_update_day[0] != 0x20 ) {
        memcpy( TMSZs_net_update_day, pData->net_update_day, sizeof(pData->net_update_day) );
        rtrim( TMSZs_net_update_day );
        TMSZsi_net_update_day=ORA_NOT_NULL;
    }

    /* 職業コード 値なし許可 */
    if( pData->occp_code[0] != 0x00 && pData->occp_code[0] != 0x20 ) {
        memcpy( TMSZs_occp_code, pData->occp_code, sizeof(pData->occp_code) );
        rtrim( TMSZs_occp_code );
        TMSZsi_occp_code=ORA_NOT_NULL;
    }

    /* 年収 値なし許可 */
    if( pData->income[0] != 0x00 && pData->income[0] != 0x20 ) {
        memcpy( TMSZs_income, pData->income, sizeof(pData->income) );
        rtrim( TMSZs_income );
        TMSZsi_income=ORA_NOT_NULL;
    }
    else {
        strcpy(TMSZs_income, "0");
        TMSZsi_income=ORA_NOT_NULL;
    }

    /* 所得年度 値なし許可 */
    if( pData->income_year[0] != 0x00 && pData->income_year[0] != 0x20 ) {
        memcpy( TMSZs_income_year, pData->income_year, sizeof(pData->income_year) );
        rtrim( TMSZs_income_year );
        TMSZsi_income_year=ORA_NOT_NULL;
    }

    /* 取引管理情報 */
    rc = checkData(pData->torikan, sizeof(pData->torikan),
                   "取引管理情報", TMSZs_torikan, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_torikan=ORA_NOT_NULL;
    }

    /* 担当者名 値なし許可 */
    if( pData->operate_name[0] != 0x00 && pData->operate_name[0] != 0x20 ) {
        memcpy( TMSZs_operate_name, pData->operate_name, sizeof(pData->operate_name) );
        rtrim( TMSZs_operate_name );
        TMSZsi_operate_name=ORA_NOT_NULL;
    }

    /* カード発行サイン */
    rc = checkData(pData->card_sign, sizeof(pData->card_sign),
                   "カード発行サイン", TMSZs_card_sign, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_card_sign=ORA_NOT_NULL;
    }

    /* 自宅住所都道府県 */
    /* 処理区分＝変更は値なし許可 */
    if ( atoi(g_RecordID) == AP_C_SYORI_UPDATE ){
        if( pData->adress1[0] != 0x00 && pData->adress1[0] != 0x20 ) {
            memcpy( TMSZs_adress1.arr, pData->adress1,
                    sizeof(pData->adress1) );
            rtrim( TMSZs_adress1.arr );
            TMSZs_adress1.len = (unsigned int)(unsigned int)strlen(TMSZs_adress1.arr);
            TMSZsi_adress1=ORA_NOT_NULL;
        }
    }
    else {
        rc = checkData(pData->adress1, sizeof(pData->adress1),
                       "自宅住所都道府県", TMSZs_adress1.arr, g_szDtlMsg);
        if (rc != NORMAL){
            return(ERROR);
        }
        else {
            TMSZs_adress1.len = (unsigned int)(unsigned int)strlen(TMSZs_adress1.arr);
            TMSZsi_adress1=ORA_NOT_NULL;
        }
    }


    /* 自宅住所市区町村 */
    if( pData->adress2[0] != 0x00 && pData->adress2[0] != 0x20 ) {
        memcpy( TMSZs_adress2.arr, pData->adress2, sizeof(pData->adress2) );
        rtrim( TMSZs_adress2.arr );
        TMSZs_adress2.len = (unsigned int)(unsigned int)strlen(TMSZs_adress2.arr);
        TMSZsi_adress2=ORA_NOT_NULL;
    }

    /* 自宅住所大字通称 */
    if( pData->adress3[0] != 0x00 && pData->adress3[0] != 0x20 ) {
        memcpy( TMSZs_adress3.arr, pData->adress3, sizeof(pData->adress3) );
        rtrim( TMSZs_adress3.arr );
        TMSZs_adress3.len = (unsigned int)(unsigned int)strlen(TMSZs_adress3.arr);
        TMSZsi_adress3=ORA_NOT_NULL;
    }

    /* 自宅住所字丁目 */
    if( pData->adress4[0] != 0x00 && pData->adress4[0] != 0x20 ) {
        memcpy( TMSZs_adress4.arr, pData->adress4, sizeof(pData->adress4) );
        rtrim( TMSZs_adress4.arr );
        TMSZs_adress4.len = (unsigned int)(unsigned int)strlen(TMSZs_adress4.arr);
        TMSZsi_adress4=ORA_NOT_NULL;
    }

    /* 自宅住所番地 */
    if( pData->adress5[0] != 0x00 && pData->adress5[0] != 0x20 ) {
        memcpy( TMSZs_adress5.arr, pData->adress5, sizeof(pData->adress5) );
        rtrim( TMSZs_adress5.arr );
        TMSZs_adress5.len = (unsigned int)(unsigned int)strlen(TMSZs_adress5.arr);
        TMSZsi_adress5=ORA_NOT_NULL;
    }

    /* 自宅住所気付 */
    if( pData->adress6[0] != 0x00 && pData->adress6[0] != 0x20 ) {
        memcpy( TMSZs_adress6.arr, pData->adress6, sizeof(pData->adress6) );
        rtrim( TMSZs_adress6.arr );
        TMSZs_adress6.len = (unsigned int)(unsigned int)strlen(TMSZs_adress6.arr);
        TMSZsi_adress6=ORA_NOT_NULL;
    }

    /* 自宅住所都道府県カナ */
    /* 処理区分＝変更は値なし許可 */
    if ( atoi(g_RecordID) == AP_C_SYORI_UPDATE ){
        if( pData->adress_kana1[0] != 0x00 && pData->adress_kana1[0] != 0x20 ) {
            memcpy( TMSZs_adress_kana1.arr, pData->adress_kana1,
                    sizeof(pData->adress_kana1) );
            rtrim( TMSZs_adress_kana1.arr );
            TMSZs_adress_kana1.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana1.arr);
            TMSZsi_adress_kana1=ORA_NOT_NULL;
        }
    }
    else {
        rc = checkData(pData->adress_kana1, sizeof(pData->adress_kana1),
                       "自宅住所都道府県カナ", TMSZs_adress_kana1.arr, g_szDtlMsg);
        if (rc != NORMAL){
            return(ERROR);
        }
        else {
            TMSZsi_adress_kana1=ORA_NOT_NULL;
        }
    }
    if (TMSZsi_adress_kana1 == ORA_NOT_NULL){

        TMSZs_adress_kana1.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana1.arr);
    }

    /* 自宅住所市区町村カナ */
    if( pData->adress_kana2[0] != 0x00 && pData->adress_kana2[0] != 0x20 ) {
        memcpy( TMSZs_adress_kana2.arr, pData->adress_kana2,
                sizeof(pData->adress_kana2) );
        rtrim( TMSZs_adress_kana2.arr );
        TMSZs_adress_kana2.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana2.arr);
        TMSZsi_adress_kana2=ORA_NOT_NULL;
    }
    if (TMSZsi_adress_kana2 == ORA_NOT_NULL){

        TMSZs_adress_kana2.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana2.arr);
    }

    /* 自宅住所大字通称カナ */
    if( pData->adress_kana3[0] != 0x00 && pData->adress_kana3[0] != 0x20 ) {
        memcpy( TMSZs_adress_kana3.arr, pData->adress_kana3,
                sizeof(pData->adress_kana3) );
        rtrim( TMSZs_adress_kana3.arr );
        TMSZs_adress_kana3.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana3.arr);
        TMSZsi_adress_kana3=ORA_NOT_NULL;
    }

    if (TMSZsi_adress_kana3 == ORA_NOT_NULL){

        TMSZs_adress_kana3.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana3.arr);
    }

    /* 自宅住所字丁目カナ */
    if( pData->adress_kana4[0] != 0x00 && pData->adress_kana4[0] != 0x20 ) {
        memcpy( TMSZs_adress_kana4.arr, pData->adress_kana4,
                sizeof(pData->adress_kana4) );
        rtrim( TMSZs_adress_kana4.arr );
        TMSZs_adress_kana4.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana4.arr);
        TMSZsi_adress_kana4=ORA_NOT_NULL;
    }

    if (TMSZsi_adress_kana4 == ORA_NOT_NULL){

        TMSZs_adress_kana4.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana4.arr);
    }

    /* 自宅住所番地カナ */
    if( pData->adress_kana5[0] != 0x00 && pData->adress_kana5[0] != 0x20 ) {
        memcpy( TMSZs_adress_kana5.arr, pData->adress_kana5,
                sizeof(pData->adress_kana5) );
        rtrim( TMSZs_adress_kana5.arr );
        TMSZs_adress_kana5.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana5.arr);
        TMSZsi_adress_kana5=ORA_NOT_NULL;
    }

    if (TMSZsi_adress_kana5 == ORA_NOT_NULL){

        TMSZs_adress_kana5.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana5.arr);
    }

    /* 自宅住所気付カナ */
    if( pData->adress_kana6[0] != 0x00 && pData->adress_kana6[0] != 0x20 ) {
        memcpy( TMSZs_adress_kana6.arr, pData->adress_kana6,
                sizeof(pData->adress_kana6) );
        rtrim( TMSZs_adress_kana6.arr );
        TMSZs_adress_kana6.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana6.arr);
        TMSZsi_adress_kana6=ORA_NOT_NULL;
    }

    if (TMSZsi_adress_kana6 == ORA_NOT_NULL){

        TMSZs_adress_kana6.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana6.arr);
    }

    /* 自宅住所 */
    /* 処理区分＝変更は値なし許可 */
    if ( atoi(g_RecordID) == AP_C_SYORI_UPDATE ){
        if( pData->adress[0] != 0x00 && pData->adress[0] != 0x20 ) {
            memcpy( TMSZs_adress.arr, pData->adress,
                    sizeof(pData->adress) );
            rtrim( TMSZs_adress.arr );
            TMSZs_adress.len = (unsigned int)(unsigned int)strlen(TMSZs_adress.arr);
            TMSZsi_adress=ORA_NOT_NULL;
        }
    }
    else {
        rc = checkData(pData->adress, sizeof(pData->adress),
                       "自宅住所", TMSZs_adress.arr, g_szDtlMsg);
        if (rc != NORMAL){
            TMSZs_adress.len = (unsigned int)(unsigned int)strlen(TMSZs_adress.arr);
            return(ERROR);
        }
        else {
            TMSZs_adress.len = (unsigned int)(unsigned int)strlen(TMSZs_adress.arr);
            TMSZsi_adress=ORA_NOT_NULL;
        }
    }

    /* 自宅住所カナ */
    /* 処理区分＝変更は値なし許可 */
    if ( atoi(g_RecordID) == AP_C_SYORI_UPDATE ){
        if( pData->adress_kana[0] != 0x00 && pData->adress_kana[0] != 0x20 ) {
            memcpy( TMSZs_adress_kana.arr, pData->adress_kana,
                    sizeof(pData->adress_kana) );
            rtrim( TMSZs_adress_kana.arr );
            TMSZs_adress_kana.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana.arr);
            TMSZsi_adress_kana=ORA_NOT_NULL;
        }
    }
    else {
        rc = checkData(pData->adress_kana, sizeof(pData->adress_kana),
                       "自宅住所カナ", TMSZs_adress_kana.arr, g_szDtlMsg);
        if (rc != NORMAL){
            TMSZs_adress_kana.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana.arr);
            return(ERROR);
        }
        else {
            TMSZs_adress_kana.len = (unsigned int)(unsigned int)strlen(TMSZs_adress_kana.arr);
            TMSZsi_adress_kana=ORA_NOT_NULL;
        }
    }

    /* 連絡先住所都道府県 値なし許可 */
    if( pData->renraku_adress1[0] != 0x00 && pData->renraku_adress1[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_adress1.arr, pData->renraku_adress1,
                sizeof(pData->renraku_adress1) );
        rtrim( TMSZs_renrakusaki_adress1.arr );
        TMSZs_renrakusaki_adress1.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_adress1.arr);
        TMSZsi_renrakusaki_adress1=ORA_NOT_NULL;
    }

    /* 連絡先住所市区町村 値なし許可 */
    if( pData->renraku_adress2[0] != 0x00 && pData->renraku_adress2[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_adress2.arr, pData->renraku_adress2,
                sizeof(pData->renraku_adress2) );
        rtrim( TMSZs_renrakusaki_adress2.arr );
        TMSZs_renrakusaki_adress2.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_adress2.arr);
        TMSZsi_renrakusaki_adress2=ORA_NOT_NULL;
    }

    /* 連絡先住所大字通称 値なし許可 */
    if( pData->renraku_adress3[0] != 0x00 && pData->renraku_adress3[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_adress3.arr, pData->renraku_adress3,
                sizeof(pData->renraku_adress3) );
        rtrim( TMSZs_renrakusaki_adress3.arr );
        TMSZs_renrakusaki_adress3.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_adress3.arr);
        TMSZsi_renrakusaki_adress3=ORA_NOT_NULL;
    }

    /* 連絡先住所字丁目 値なし許可 */
    if( pData->renraku_adress4[0] != 0x00 && pData->renraku_adress4[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_adress4.arr, pData->renraku_adress4,
                sizeof(pData->renraku_adress4) );
        rtrim( TMSZs_renrakusaki_adress4.arr );
        TMSZs_renrakusaki_adress4.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_adress4.arr);
        TMSZsi_renrakusaki_adress4=ORA_NOT_NULL;
    }

    /* 連絡先住所番地 値なし許可 */
    if( pData->renraku_adress5[0] != 0x00 && pData->renraku_adress5[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_adress5.arr, pData->renraku_adress5,
                sizeof(pData->renraku_adress5) );
        rtrim( TMSZs_renrakusaki_adress5.arr );
        TMSZs_renrakusaki_adress5.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_adress5.arr);
        TMSZsi_renrakusaki_adress5=ORA_NOT_NULL;
    }

    /* 連絡先住所気付 値なし許可 */
    if( pData->renraku_adress6[0] != 0x00 && pData->renraku_adress6[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_adress6.arr, pData->renraku_adress6,
                sizeof(pData->renraku_adress6) );
        rtrim( TMSZs_renrakusaki_adress6.arr );
        TMSZs_renrakusaki_adress6.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_adress6.arr);
        TMSZsi_renrakusaki_adress6=ORA_NOT_NULL;
    }

    /* 連絡先住所都道府県カナ 値なし許可 */
    if( pData->renraku_adress_kana1[0] != 0x00 && pData->renraku_adress_kana1[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_adress_kana1.arr, pData->renraku_adress_kana1,
                sizeof(pData->renraku_adress_kana1) );
        rtrim( TMSZs_renrakusaki_adress_kana1.arr );
        TMSZsi_renrakusaki_adress_kana1=ORA_NOT_NULL;


        TMSZs_renrakusaki_adress_kana1.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_adress_kana1.arr);
    }

    /* 連絡先住所市区町村カナ 値なし許可 */
    if( pData->renraku_adress_kana2[0] != 0x00 && pData->renraku_adress_kana2[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_adress_kana2.arr, pData->renraku_adress_kana2,
                sizeof(pData->renraku_adress_kana2) );
        rtrim( TMSZs_renrakusaki_adress_kana2.arr );
        TMSZsi_renrakusaki_adress_kana2=ORA_NOT_NULL;


        TMSZs_renrakusaki_adress_kana2.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_adress_kana2.arr);
    }

    /* 連絡先住所大字通称カナ 値なし許可 */
    if( pData->renraku_adress_kana3[0] != 0x00 && pData->renraku_adress_kana3[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_adress_kana3.arr, pData->renraku_adress_kana3,
                sizeof(pData->renraku_adress_kana3) );
        rtrim( TMSZs_renrakusaki_adress_kana3.arr );
        TMSZsi_renrakusaki_adress_kana3=ORA_NOT_NULL;


        TMSZs_renrakusaki_adress_kana3.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_adress_kana3.arr);
    }

    /* 連絡先住所字丁目カナ 値なし許可 */
    if( pData->renraku_adress_kana4[0] != 0x00 && pData->renraku_adress_kana4[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_adress_kana4.arr, pData->renraku_adress_kana4,
                sizeof(pData->renraku_adress_kana4) );
        rtrim( TMSZs_renrakusaki_adress_kana4.arr );
        TMSZsi_renrakusaki_adress_kana4=ORA_NOT_NULL;

        TMSZs_renrakusaki_adress_kana4.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_adress_kana4.arr);
    }

    /* 連絡先住所番地カナ 値なし許可 */
    if( pData->renraku_adress_kana5[0] != 0x00 && pData->renraku_adress_kana5[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_adress_kana5.arr, pData->renraku_adress_kana5,
                sizeof(pData->renraku_adress_kana5) );
        rtrim( TMSZs_renrakusaki_adress_kana5.arr );
        TMSZsi_renrakusaki_adress_kana5=ORA_NOT_NULL;


        TMSZs_renrakusaki_adress_kana5.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_adress_kana5.arr);
    }

    /* 連絡先住所気付カナ 値なし許可 */
    if( pData->renraku_adress_kana6[0] != 0x00 && pData->renraku_adress_kana6[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_adress_kana6.arr, pData->renraku_adress_kana6,
                sizeof(pData->renraku_adress_kana6) );
        rtrim( TMSZs_renrakusaki_adress_kana6.arr );
        TMSZsi_renrakusaki_adress_kana6=ORA_NOT_NULL;


        TMSZs_renrakusaki_adress_kana6.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_adress_kana6.arr);
    }

    /* 連絡先住所 値なし許可 */
    if( pData->renraku_adress[0] != 0x00 && pData->renraku_adress[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_adress.arr, pData->renraku_adress,
                sizeof(pData->renraku_adress) );
        rtrim( TMSZs_renrakusaki_adress.arr );
        TMSZs_renrakusaki_adress.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_adress.arr);
        TMSZsi_renrakusaki_adress=ORA_NOT_NULL;
    }

    /* 連絡先住所カナ 値なし許可 */
    if( pData->renraku_adress_kana[0] != 0x00 && pData->renraku_adress_kana[0] != 0x20 ) {
        memcpy( TMSZs_renrakusaki_adress_kana.arr, pData->renraku_adress_kana,
                sizeof(pData->renraku_adress_kana) );
        rtrim( TMSZs_renrakusaki_adress_kana.arr );
        TMSZs_renrakusaki_adress_kana.len = (unsigned int)(unsigned int)strlen(TMSZs_renrakusaki_adress_kana.arr);
        TMSZsi_renrakusaki_adress_kana=ORA_NOT_NULL;
    }

    /* データ基準日 */
    rc = checkData(pData->data_date, sizeof(pData->data_date),
                   "データ基準日", TMSZs_data_date, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_data_date=ORA_NOT_NULL;
    }

	/* マル優 */
    rc = checkData(pData->tax_free, sizeof(pData->tax_free),
                   "マル優", TMSZs_tax_free, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        TMSZsi_tax_free=ORA_NOT_NULL;
    }


    return(NORMAL);

}


/*****************************************************************************/
/* Function Name:                                                            */
/*   int checkData( char *pcheck_data, int data_size, char *pmsg,            */
/*                  char *change_data )                                      */
/*                                                                           */
/* Description:                                                              */
/*   各種チェック                                                            */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* char            *pchack_data  I   チェック対象データ                      */
/* int             data_size     I   チェック対象データサイズ                */
/* char            *pmsg         I   メッセージ文字列                        */
/* char            *pchange_data O   チェック後データ                        */
/* g_szDtlMsg     char*         I/O  事象詳細文字列                         */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*        NORMAL: 正常                                                       */
/*        ERROR : データ不正                                                 */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int checkData( char *pcheck_data, int data_size, char *pmsg,
                      char *pchange_data, char *g_szDtlMsg )
{

    if( pcheck_data[0] == 0x00 || pcheck_data[0] == 0x20 ) {
        sprintf( g_szDtlMsg,
                 "[店番=%s CIFNO=%s 世帯番号=%s] %s の設定がありません。",
                 TMSZs_tenban,TMSZs_cifno, TMSZs_setai_no, pmsg);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }
    else {
        memcpy( pchange_data, pcheck_data, data_size);
        rtrim( pchange_data );
    }

    return(NORMAL);
}


/*****************************************************************************/
/* Function Name:                                                            */
/*          int insertTables( char *g_szDtlMsg )               　            */
/* Made by:                                                                  */
/* Description : テーブルの登録                                              */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* g_szDtlMsg       char*        I/O  事象詳細文字列                         */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 挿入エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int insertTables( char *g_szDtlMsg )
{



    /* ------------------------- */
    /* TF_世帯属性テーブルの登録 */
    /* ------------------------- */
	G_POSITION = __LINE__;
    EXEC SQL INSERT INTO TF_世帯属性
       (   店番,
           CIFNO,
           個人企業番号,
           人格区分,
           世帯番号,
           氏名漢字,           氏名漢字更新フラグ,
           氏名カナ,           氏名カナ更新フラグ,
           性別,               性別更新フラグ,
           生年月日,           生年月日更新フラグ,
           住所コード,
           郵便番号,
           補助住所,           住所変更フラグ,
           補助住所カナ,       住所カナ変更フラグ,
           自宅電話番号,       自宅電話番号更新フラグ,
           自宅FAX番号,        自宅FAX番号更新フラグ,
           携帯電話番号,       携帯電話番号更新フラグ,
           MAILアドレス,       MAILアドレス更新フラグ,
           勤務先名,           勤務先名更新フラグ,
           勤務先名カナ,       勤務先名カナ更新フラグ,
           勤務先電話番号,     勤務先電話番号更新フラグ,
           連絡先住所コード,
           連絡先郵便番号,
           連絡先補助住所,     連絡先住所変更フラグ,
           連絡先補助住所カナ, 連絡先住所カナ変更フラグ,
           連絡先電話番号,     連絡先電話番号更新フラグ,
           連絡先FAX番号,      連絡先FAX番号更新フラグ,
           日中連絡先電話番号, 日中連絡先電話番号更新フラグ,
           取引開始日,
           世帯主フラグ,
           行員区分,
           郵便不着,
           会社寮,
           電話番号間違い,
           移転,
           本人死亡,
           マル優申告額,
           マル優利用額,
           マル特申告額,
           マル特利用額,
           当行金融資産残高,
           預り資産残高１,
           預り資産残高２,
           預り資産残高３,
           流動性預金残高,
           定期性預金残高,
           仕組預金残高,
           外貨預金残高,
           投信残高,
           債券残高,
           リスク商品残高,
           テレバン契約,
           テレバン契約日,
           IB契約,
           IB契約者ID,
           IB契約申込店番,
           IB契約代表口座科目,
           IB契約代表口座口番号,
           IB契約日,
           IB契約解除日,
           IB契約最終更新日,
           ネット支店契約,
           ネット支店契約者ID,
           ネット支店契約申込店番,
           ネット支店契約代表口座科目,
           ネット支店契約代表口座口番号,
           ネット支店契約日,
           ネット支店契約解除日,
           ネット支店契約最終更新日,
           ホストTM対象区分,
           TM対象区分,
           ホストDM対象区分,
           DM対象区分,
           職業コード,
           年収,
           所得年度,
           取引管理情報,
           担当者名,
           カード発行サイン,
           自宅住所都道府県,
           自宅住所市区町村,
           自宅住所大字通称,
           自宅住所字丁目,
           自宅住所番地,
           自宅住所気付,
           自宅住所都道府県カナ,
           自宅住所市区町村カナ,
           自宅住所大字通称カナ,
           自宅住所字丁目カナ,
           自宅住所番地カナ,
           自宅住所気付カナ,
           自宅住所,
           自宅住所カナ,
           連絡先住所都道府県,
           連絡先住所市区町村,
           連絡先住所大字通称,
           連絡先住所字丁目,
           連絡先住所番地,
           連絡先住所気付,
           連絡先住所都道府県カナ,
           連絡先住所市区町村カナ,
           連絡先住所大字通称カナ,
           連絡先住所字丁目カナ,
           連絡先住所番地カナ,
           連絡先住所気付カナ,
           連絡先住所,
           連絡先住所カナ,
           データ基準日,
           マル優
        )  VALUES (
           :TMSZs_tenban :TMSZsi_tenban,
           :TMSZs_cifno :TMSZsi_cifno,
           :TMSZs_kojin_kigyo_no :TMSZsi_kojin_kigyo_no,
           :TMSZs_jinkaku_kbn :TMSZsi_jinkaku_kbn,
           :TMSZs_setai_no :TMSZsi_setai_no,
           :TMSZs_name_knj :TMSZsi_name_knj, ' ',
           SUBSTRB(:TMSZs_name_kna :TMSZsi_name_kna,1,40), ' ',
           :TMSZs_sex :TMSZsi_sex, ' ',
           :TMSZs_birthday :TMSZsi_birthday, ' ',
           :TMSZs_zip_cd :TMSZsi_zip_cd,
           :TMSZs_zip :TMSZsi_zip,
           :TMSZs_hojo_jyusyo :TMSZsi_hojo_jyusyo, ' ',
           SUBSTRB(:TMSZs_hojo_jyusyo_kana :TMSZsi_hojo_jyusyo_kana,1,60), ' ',
           :TMSZs_jitakutel :TMSZsi_jitakutel, ' ',
           :TMSZs_jitaku_fax :TMSZsi_jitaku_fax, ' ',
           :TMSZs_keitai_tel :TMSZsi_keitai_tel, ' ',
           :TMSZs_mail :TMSZsi_mail, ' ',
           :TMSZs_kinmusaki :TMSZsi_kinmusaki, ' ',
           SUBSTRB(:TMSZs_kinmusaki_kana :TMSZsi_kinmusaki_kana,1,40), ' ',
           :TMSZs_kinmusaki_tel :TMSZsi_kinmusaki_tel, ' ',
           :TMSZs_renrakusaki_zip_cd :TMSZsi_renrakusaki_zip_cd,
           :TMSZs_renrakusaki_zip :TMSZsi_renrakusaki_zip,
           :TMSZs_renrakusaki_hojo_jyusyo :TMSZsi_renrakusaki_hojo_jyusyo, ' ',
           SUBSTRB(:TMSZs_renrakusaki_hojo_jyusyo_kana :TMSZsi_renrakusaki_hojo_jyusyo_kana,1,60), ' ',
           :TMSZs_renrakusaki_tel :TMSZsi_renrakusaki_tel, ' ',
           :TMSZs_renrakusaki_fax :TMSZsi_renrakusaki_fax, ' ',
           :TMSZs_nicchu_tel :TMSZsi_nicchu_tel, ' ',
           :TMSZs_deal_day :TMSZsi_deal_day,
           :TMSZs_setai_flg :TMSZsi_setai_flg,
           :TMSZs_kouin_kbn :TMSZsi_kouin_kbn,
           :TMSZs_futyaku :TMSZsi_futyaku,
           :TMSZs_kaisya_ryo :TMSZsi_kaisya_ryo,
           :TMSZs_denwa_matigai :TMSZsi_denwa_matigai,
           :TMSZs_iten :TMSZsi_iten,
           :TMSZs_honnin_sibo :TMSZsi_honnin_sibo,
           0.00,
           0.00,
           0.00,
           0.00,
           TO_NUMBER(:TMSZs_zandaka, '999999999999999'),
           TO_NUMBER(:TMSZs_azukari_shisan1, '999999999999999'),
           TO_NUMBER(:TMSZs_azukari_shisan2, '999999999999999'),
           TO_NUMBER(:TMSZs_azukari_shisan3, '999999999999999'),
           TO_NUMBER(:TMSZs_ryudo_zandaka, '999999999999999'),
           TO_NUMBER(:TMSZs_teiki_zandaka, '999999999999999'),
           TO_NUMBER(:TMSZs_shikumi_zandaka, '999999999999999'),
           TO_NUMBER(:TMSZs_gaika_zandaka, '999999999999999'),
           TO_NUMBER(:TMSZs_toushin_zandaka, '999999999999999'),
           TO_NUMBER(:TMSZs_saiken_zandaka, '999999999999999'),
           TO_NUMBER(:TMSZs_risk_zandaka, '999999999999999'),
           '0',
           ' ',
           :TMSZs_IB_contract :TMSZsi_IB_contract,
           :TMSZs_IB_contract_id :TMSZsi_IB_contract_id,
           :TMSZs_IB_branch_id :TMSZsi_IB_branch_id,
           :TMSZs_IB_accnt_id :TMSZsi_IB_accnt_id,
           :TMSZs_IB_kuchi_no :TMSZsi_IB_kuchi_no,
           :TMSZs_IB_contract_day :TMSZsi_IB_contract_day,
           :TMSZs_IB_cancel_day :TMSZsi_IB_cancel_day,
           :TMSZs_IB_update_day :TMSZsi_IB_update_day,
           :TMSZs_net_contract :TMSZsi_net_contract,
           :TMSZs_net_contract_id :TMSZsi_net_contract_id,
           :TMSZs_net_branch_id :TMSZsi_net_branch_id,
           :TMSZs_net_accnt_id :TMSZsi_net_accnt_id,
           :TMSZs_net_kuchi_no :TMSZsi_net_kuchi_no,
           :TMSZs_net_contract_day :TMSZsi_net_contract_day,
           :TMSZs_net_cancel_day :TMSZsi_net_cancel_day,
           :TMSZs_net_update_day :TMSZsi_net_update_day,
           :TMSZs_host_tm :TMSZsi_host_tm,
           '0',
           :TMSZs_host_dm :TMSZsi_host_dm,
           '0',
           :TMSZs_occp_code :TMSZsi_occp_code,
           TO_NUMBER(:TMSZs_income, '999999999999999'),
           :TMSZs_income_year :TMSZsi_income_year,
           :TMSZs_torikan :TMSZsi_torikan,
           :TMSZs_operate_name :TMSZsi_operate_name,
           :TMSZs_card_sign :TMSZsi_card_sign,
           :TMSZs_adress1 :TMSZsi_adress1,
           :TMSZs_adress2 :TMSZsi_adress2,
           :TMSZs_adress3 :TMSZsi_adress3,
           :TMSZs_adress4 :TMSZsi_adress4,
           :TMSZs_adress5 :TMSZsi_adress5,
           :TMSZs_adress6 :TMSZsi_adress6,
           :TMSZs_adress_kana1 :TMSZsi_adress_kana1,
           :TMSZs_adress_kana2 :TMSZsi_adress_kana2,
           :TMSZs_adress_kana3 :TMSZsi_adress_kana3,
           :TMSZs_adress_kana4 :TMSZsi_adress_kana4,
           :TMSZs_adress_kana5 :TMSZsi_adress_kana5,
           :TMSZs_adress_kana6 :TMSZsi_adress_kana6,
           :TMSZs_adress :TMSZsi_adress,
           SUBSTRB(:TMSZs_adress_kana :TMSZsi_adress_kana,1,170),
           :TMSZs_renrakusaki_adress1 :TMSZsi_renrakusaki_adress1,
           :TMSZs_renrakusaki_adress2 :TMSZsi_renrakusaki_adress2,
           :TMSZs_renrakusaki_adress3 :TMSZsi_renrakusaki_adress3,
           :TMSZs_renrakusaki_adress4 :TMSZsi_renrakusaki_adress4,
           :TMSZs_renrakusaki_adress5 :TMSZsi_renrakusaki_adress5,
           :TMSZs_renrakusaki_adress6 :TMSZsi_renrakusaki_adress6,
           :TMSZs_renrakusaki_adress_kana1 :TMSZsi_renrakusaki_adress_kana1,
           :TMSZs_renrakusaki_adress_kana2 :TMSZsi_renrakusaki_adress_kana2,
           :TMSZs_renrakusaki_adress_kana3 :TMSZsi_renrakusaki_adress_kana3,
           :TMSZs_renrakusaki_adress_kana4 :TMSZsi_renrakusaki_adress_kana4,
           :TMSZs_renrakusaki_adress_kana5 :TMSZsi_renrakusaki_adress_kana5,
           :TMSZs_renrakusaki_adress_kana6 :TMSZsi_renrakusaki_adress_kana6,
           :TMSZs_renrakusaki_adress :TMSZsi_renrakusaki_adress,
           SUBSTRB(:TMSZs_renrakusaki_adress_kana :TMSZsi_renrakusaki_adress_kana,1,170),
           :TMSZs_data_date :TMSZsi_data_date,
		   :TMSZs_tax_free :TMSZsi_tax_free

       );


    /* エラーチェック */
    if (sqlca.sqlcode != 0){
        sprintf( g_szDtlMsg,
                 "世帯属性テーブルの登録に失敗しました。(sqlca.sqlcode=%d)",
                 sqlca.sqlcode );

		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "INSERT TF_世帯属性", NULL, NULL, G_STATION);
        return ERROR;
    }

    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*          int updateTables( g_szDtlMsg )                                   */
/* Made by:                                                                  */
/* Description : テーブルの更新                                              */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* g_szDtlMsg       char*        I/O  事象詳細文字列                         */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 更新エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int updateTables( char *g_szDtlMsg )
{


	G_POSITION = __LINE__;
    EXEC SQL UPDATE TF_世帯属性
        SET

            店番 = :TMSZs_tenban :TMSZsi_tenban,
            CIFNO = :TMSZs_cifno :TMSZsi_cifno,
            個人企業番号 = :TMSZs_kojin_kigyo_no :TMSZsi_kojin_kigyo_no,
            人格区分 = :TMSZs_jinkaku_kbn :TMSZsi_jinkaku_kbn,

            氏名漢字 = :TMSZs_name_knj :TMSZsi_name_knj,
            氏名カナ = SUBSTRB(:TMSZs_name_kna :TMSZsi_name_kna,1,40),
            性別 = :TMSZs_sex :TMSZsi_sex,
            生年月日 = :TMSZs_birthday :TMSZsi_birthday,
            住所コード = :TMSZs_zip_cd :TMSZsi_zip_cd,
            郵便番号 = :TMSZs_zip :TMSZsi_zip,
            補助住所 = :TMSZs_hojo_jyusyo :TMSZsi_hojo_jyusyo,
            補助住所カナ = SUBSTRB(:TMSZs_hojo_jyusyo_kana :TMSZsi_hojo_jyusyo_kana,1,60),
            自宅電話番号 = :TMSZs_jitakutel :TMSZsi_jitakutel,
            自宅FAX番号 = :TMSZs_jitaku_fax :TMSZsi_jitaku_fax,
            携帯電話番号 = :TMSZs_keitai_tel :TMSZsi_keitai_tel,
            MAILアドレス = :TMSZs_mail :TMSZsi_mail,
            勤務先名 = :TMSZs_kinmusaki :TMSZsi_kinmusaki,
            勤務先名カナ = SUBSTRB(:TMSZs_kinmusaki_kana :TMSZsi_kinmusaki_kana,1,40),
            勤務先電話番号 = :TMSZs_kinmusaki_tel :TMSZsi_kinmusaki_tel,
            連絡先住所コード = :TMSZs_renrakusaki_zip_cd :TMSZsi_renrakusaki_zip_cd,
            連絡先郵便番号 = :TMSZs_renrakusaki_zip :TMSZsi_renrakusaki_zip,
            連絡先補助住所 = :TMSZs_renrakusaki_hojo_jyusyo :TMSZsi_renrakusaki_hojo_jyusyo,
            連絡先補助住所カナ = SUBSTRB(:TMSZs_renrakusaki_hojo_jyusyo_kana :TMSZsi_renrakusaki_hojo_jyusyo_kana,1,60),
            連絡先電話番号 = :TMSZs_renrakusaki_tel :TMSZsi_renrakusaki_tel,
            連絡先FAX番号 = :TMSZs_renrakusaki_fax :TMSZsi_renrakusaki_fax,
            日中連絡先電話番号 = :TMSZs_nicchu_tel :TMSZsi_nicchu_tel,
            取引開始日 = :TMSZs_deal_day :TMSZsi_deal_day,
            世帯主フラグ = :TMSZs_setai_flg :TMSZsi_setai_flg,
            行員区分 = :TMSZs_kouin_kbn :TMSZsi_kouin_kbn,
            郵便不着 = :TMSZs_futyaku :TMSZsi_futyaku,
            会社寮 = :TMSZs_kaisya_ryo :TMSZsi_kaisya_ryo,
            電話番号間違い = :TMSZs_denwa_matigai :TMSZsi_denwa_matigai,
            移転 = :TMSZs_iten :TMSZsi_iten,
            本人死亡 = :TMSZs_honnin_sibo :TMSZsi_honnin_sibo,
            当行金融資産残高 = TO_NUMBER(:TMSZs_zandaka :TMSZsi_zandaka, '999999999999999'),
            預り資産残高１ = TO_NUMBER(:TMSZs_azukari_shisan1 :TMSZsi_azukari_shisan1, '999999999999999'),
            預り資産残高２ = TO_NUMBER(:TMSZs_azukari_shisan2 :TMSZsi_azukari_shisan2, '999999999999999'),
            預り資産残高３ = TO_NUMBER(:TMSZs_azukari_shisan3 :TMSZsi_azukari_shisan3, '999999999999999'),
            流動性預金残高 = TO_NUMBER(:TMSZs_ryudo_zandaka :TMSZsi_ryudo_zandaka, '999999999999999'),
            定期性預金残高 = TO_NUMBER(:TMSZs_teiki_zandaka :TMSZsi_teiki_zandaka, '999999999999999'),
            仕組預金残高 = TO_NUMBER(:TMSZs_shikumi_zandaka :TMSZsi_shikumi_zandaka, '999999999999999'),
            外貨預金残高 = TO_NUMBER(:TMSZs_gaika_zandaka :TMSZsi_gaika_zandaka, '999999999999999'),
            投信残高 = TO_NUMBER(:TMSZs_toushin_zandaka :TMSZsi_toushin_zandaka, '999999999999999'),
            債券残高 = TO_NUMBER(:TMSZs_saiken_zandaka :TMSZsi_saiken_zandaka, '999999999999999'),
            リスク商品残高 = TO_NUMBER(:TMSZs_risk_zandaka :TMSZsi_risk_zandaka, '999999999999999'),
            IB契約 = :TMSZs_IB_contract :TMSZsi_IB_contract,
            IB契約者ID = :TMSZs_IB_contract_id :TMSZsi_IB_contract_id,
            IB契約申込店番 = :TMSZs_IB_branch_id :TMSZsi_IB_branch_id,
            IB契約代表口座科目 = :TMSZs_IB_accnt_id :TMSZsi_IB_accnt_id,
            IB契約代表口座口番号 = :TMSZs_IB_kuchi_no :TMSZsi_IB_kuchi_no,
            IB契約日 = :TMSZs_IB_contract_day :TMSZsi_IB_contract_day,
            IB契約解除日 = :TMSZs_IB_cancel_day :TMSZsi_IB_cancel_day,
            IB契約最終更新日 = :TMSZs_IB_update_day :TMSZsi_IB_update_day,
            ネット支店契約 = :TMSZs_net_contract :TMSZsi_net_contract,
            ネット支店契約者ID = :TMSZs_net_contract_id :TMSZsi_net_contract_id,
            ネット支店契約申込店番 = :TMSZs_net_branch_id :TMSZsi_net_branch_id,
            ネット支店契約代表口座科目 = :TMSZs_net_accnt_id :TMSZsi_net_accnt_id,
            ネット支店契約代表口座口番号 = :TMSZs_net_kuchi_no :TMSZsi_net_kuchi_no,
            ネット支店契約日 = :TMSZs_net_contract_day :TMSZsi_net_contract_day,
            ネット支店契約解除日 = :TMSZs_net_cancel_day :TMSZsi_net_cancel_day,
            ネット支店契約最終更新日 = :TMSZs_net_update_day :TMSZsi_net_update_day,
            ホストTM対象区分 = :TMSZs_host_tm :TMSZsi_host_tm,
            ホストDM対象区分 = :TMSZs_host_dm :TMSZsi_host_dm,
            職業コード = :TMSZs_occp_code :TMSZsi_occp_code,
            年収 = TO_NUMBER(:TMSZs_income :TMSZsi_income, '999999999999999'),
            所得年度 = :TMSZs_income_year :TMSZsi_income_year,
            取引管理情報 = :TMSZs_torikan :TMSZsi_torikan,
            担当者名 = :TMSZs_operate_name :TMSZsi_operate_name,
            カード発行サイン = :TMSZs_card_sign :TMSZsi_card_sign,
            自宅住所都道府県 = :TMSZs_adress1 :TMSZsi_adress1,
            自宅住所市区町村 = :TMSZs_adress2 :TMSZsi_adress2,
            自宅住所大字通称 = :TMSZs_adress3 :TMSZsi_adress3,
            自宅住所字丁目 = :TMSZs_adress4 :TMSZsi_adress4,
            自宅住所番地 = :TMSZs_adress5 :TMSZsi_adress5,
            自宅住所気付 = :TMSZs_adress6 :TMSZsi_adress6,
            自宅住所都道府県カナ = :TMSZs_adress_kana1 :TMSZsi_adress_kana1,
            自宅住所市区町村カナ = :TMSZs_adress_kana2 :TMSZsi_adress_kana2,
            自宅住所大字通称カナ = :TMSZs_adress_kana3 :TMSZsi_adress_kana3,
            自宅住所字丁目カナ = :TMSZs_adress_kana4 :TMSZsi_adress_kana4,
            自宅住所番地カナ = :TMSZs_adress_kana5 :TMSZsi_adress_kana5,
            自宅住所気付カナ = :TMSZs_adress_kana6 :TMSZsi_adress_kana6,
            自宅住所 = :TMSZs_adress :TMSZsi_adress,
            自宅住所カナ = SUBSTRB(:TMSZs_adress_kana :TMSZsi_adress_kana,1,170),
            連絡先住所都道府県 = :TMSZs_renrakusaki_adress1 :TMSZsi_renrakusaki_adress1,
            連絡先住所市区町村 = :TMSZs_renrakusaki_adress2 :TMSZsi_renrakusaki_adress2,
            連絡先住所大字通称 = :TMSZs_renrakusaki_adress3 :TMSZsi_renrakusaki_adress3,
            連絡先住所字丁目 = :TMSZs_renrakusaki_adress4 :TMSZsi_renrakusaki_adress4,
            連絡先住所番地 = :TMSZs_renrakusaki_adress5 :TMSZsi_renrakusaki_adress5,
            連絡先住所気付 = :TMSZs_renrakusaki_adress6 :TMSZsi_renrakusaki_adress6,
            連絡先住所都道府県カナ = :TMSZs_renrakusaki_adress_kana1 :TMSZsi_renrakusaki_adress_kana1,
            連絡先住所市区町村カナ = :TMSZs_renrakusaki_adress_kana2 :TMSZsi_renrakusaki_adress_kana2,
            連絡先住所大字通称カナ = :TMSZs_renrakusaki_adress_kana3 :TMSZsi_renrakusaki_adress_kana3,
            連絡先住所字丁目カナ = :TMSZs_renrakusaki_adress_kana4 :TMSZsi_renrakusaki_adress_kana4,
            連絡先住所番地カナ = :TMSZs_renrakusaki_adress_kana5 :TMSZsi_renrakusaki_adress_kana5,
            連絡先住所気付カナ = :TMSZs_renrakusaki_adress_kana6 :TMSZsi_renrakusaki_adress_kana6,
            連絡先住所 = :TMSZs_renrakusaki_adress :TMSZsi_renrakusaki_adress,
            連絡先住所カナ = SUBSTRB(:TMSZs_renrakusaki_adress_kana :TMSZsi_renrakusaki_adress_kana,1,170),
            データ基準日 = :TMSZs_data_date :TMSZsi_data_date,
            マル優= :TMSZs_tax_free :TMSZsi_tax_free

        WHERE
            世帯番号 = :TMSZs_setai_no;


    if( sqlca.sqlcode != 0 ){
        sprintf( g_szDtlMsg, "TF_世帯属性テーブル更新エラー(sqlca.sqlcode=%d)", sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "UPDATE TF_世帯属性", NULL, NULL, G_STATION);
        return(ERROR);
    }

    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*          int deleteTables( g_szDtlMsg )                                   */
/* Made by:                                                                  */
/* Description : テーブルの削除                                              */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* g_szDtlMsg       char*        I/O  事象詳細文字列                         */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 削除エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int deleteTables( char *g_szDtlMsg )
{


    /* TF_世帯属性テーブルの削除 */
	G_POSITION = __LINE__;
    EXEC SQL DELETE FROM TF_世帯属性
        WHERE 
             世帯番号 = :TMSZs_setai_no;

    if (sqlca.sqlcode != 0){
        sprintf( g_szDtlMsg, 
                 "TF_世帯属性テーブルの削除に失敗しました。(sqlca.sqlcode=%d)",
                 sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "DELETE FROM TF_世帯属性", NULL, NULL, G_STATION);
        return ERROR;
    }

    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*     putAcctLogFile(int tp, RECV_FILE_DATA *pData, COUNT *dCount, int rc,  */
/*                                                          char *g_szDtlMsg ) */
/* Made by:                                                                  */
/* Description : ログファイル出力                                            */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* tp                int         I    ログタイプ識別                         */
/* RECV_FILE_DATA    *pData      I    更新対象レコード情報を格納している     */
/* COUNT             *dCount     I    処理件数を格納している                 */
/* rc                int         I    処理結果を格納している                 */
/* g_szDtlMsg       char*        I/O  事象詳細文字列                          */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL        : 正常                                                 */
/*    ERROR : ファイルアクセスエラー                               */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int putAcctLogFile(int tp, RECV_FILE_DATA *pData, COUNT *dCount, int rc,
                          char *g_szDtlMsg )
{
    AP_D_BTLOG log;
    char    szTime[EMB_C_DTIME_LEN + 1];
    time_t  t = time( NULL );

    /* バッファ初期化 */
    memset( &log, ' ', sizeof(log));
    log.szDelimit[0] =  0X0A;
    log.szDelimit1[0] = 0X0A;

    if (tp == L_WRITE_END){
        sprintf( log.szNote, 
                 "[ RECORD COUNT:%d <OK>:%d (INS:%d UPD:%d DEL:%d ) <NG>:%d ]",
                 dCount->iRecNum,                    /* 処理件数             */
                 dCount->iOkNum,                     /* 正常終了             */
                 dCount->iInsNum,                    /* 正常終了（新規登録） */
                 dCount->iUpdNum,                    /* 正常終了（更新）     */
                 dCount->iDelNum,                    /* 正常終了（削除）     */
                 dCount->iNgNum );					 /* ERROR終了            */

        /* 処理結果ファイルへの書き込み */
        if ( fwrite( &log, sizeof(AP_D_BTLOG) - sizeof(log.szNote1) - sizeof(log.szDelimit1),
                     1, g_pfLogFile ) != 1 ) {
			send_err ( m$file_write, errno, g_szLogFile, log , NULL, G_STATION);
            return ERROR;
        }

		sprintf ( g_szDtlMsg,
				"[ RECORD COUNT:%d <OK>:%d (INS:%d UPD:%d DEL:%d ) <NG>:%d ]",
                 dCount->iRecNum,                    /* 処理件数             */
                 dCount->iOkNum,                     /* 正常終了             */
                 dCount->iInsNum,                    /* 正常終了（新規登録） */
                 dCount->iUpdNum,                    /* 正常終了（更新）     */
                 dCount->iDelNum,                    /* 正常終了（削除）     */
                 dCount->iNgNum );					 /* ERROR終了            */

		send_err (  m$message1, NORMAL, g_szDtlMsg, NULL , NULL, G_STATION);


    }else{
        /* 現状NORMAL正常時は処理しない。（以下に処理だけは残しておく）*/
        if ( rc == NORMAL ) return NORMAL;

        /* リターンコード編集 */
        switch( rc ) {
            case NORMAL:
                memcpy( log.szRtInfo, "NORMAL",       6); /* 正常終了                  */
                break;
            case ERROR:
                memcpy( log.szRtInfo, "ERROR",        5); /* エラー                    */
                break;
            default:
                memcpy( log.szRtInfo, "NONE",         4); /* その他                    */
                break;
        }

        if (rc != NORMAL){
            memcpy( log.szRtType, " NG ", 4); /* エラー表示    */
        }
        else{
            memcpy( log.szRtType, " OK ", 4); /* 正常終了表示  */
        }
        /* 日時 */
        strftime( szTime, EMB_C_DTIME_LEN + 1, "%Y-%m-%d %H:%M:%S", localtime( &t ));
        memcpy( log.szDateTime,szTime, EMB_C_DTIME_LEN );

        /* 備考(世帯属性差分ファイルの処理データ表示） */
        sprintf( log.szNote, "[ DATA ]%.*s,%.*s,%.*s,%.*s,%.*s",
             sizeof(pData->record_id), pData->record_id,
             sizeof(pData->change_id), pData->change_id,
             sizeof(pData->cifno), pData->cifno,
             sizeof(pData->setai_no), pData->setai_no,
             sizeof(pData->data_date), pData->data_date
        );

        /* 事象発生詳細レコード番号、事象詳細文字列 */
        sprintf( log.szNote1, "(%d) %.*s", dCount->iRecNum,
                                           (unsigned int)(unsigned int)strlen(g_szDtlMsg), g_szDtlMsg );

        /* 処理結果ログファイルへの書き込み */
        if ( fwrite( &log, sizeof(AP_D_BTLOG), 1, g_pfLogFile ) != 1 ){
			send_err ( m$file_write, errno, g_szLogFile, log , NULL, G_STATION);
            return ERROR;
        }
    }

    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*     commit( char *g_szDtlMsg )                                             */
/* Made by:                                                                  */
/* Description:ＤＢのコミット                                                */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*  g_szDtlMsg      *char         O    事象詳細文字列                         */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL          : 正常                                               */
/*    ERROR  : コミットエラー（システムエラー）                   */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int commit( VOID )
{

    /* ＤＢのコミット */
    EXEC SQL COMMIT;
    if (sqlca.sqlcode < 0) {
        sprintf(g_szDtlMsg,
                "ＤＢのコミットに失敗しました。(CODE=%ld)",
                sqlca.sqlcode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return ERROR;
    }


    return NORMAL;
}



/*****************************************************************************/
/* Function Name:                                                            */
/*     rollback( void )                                                      */
/* Made by:                                                                  */
/* Description:ＤＢのロールバック                                            */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL : 正常                                                          */
/*    ERROR  : ロールバックエラー（システムエラー）                          */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int rollback( )
{
    
	/* ＤＢのロールバック */
    EXEC SQL ROLLBACK WORK;
    if (sqlca.sqlcode < 0) {
        sprintf(g_szDtlMsg,
                "ＤＢのロールバックに失敗しました。(CODE=%ld)",
                sqlca.sqlcode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return ERROR;
    }

    return NORMAL;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*     finalize( int rc, int iRecNum, int iOkNum )                           */
/* Made by:                                                                  */
/* Description:終了処理                                                      */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* rc              int           i   リターンコード                          */
/* iRecNum         int           i   入力件数                                */
/* iOkNum          int           i   成功件数                                */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static void finalize( int rc, int iRecNum, int iOkNum )
{


    /* ファイルのクローズ */
	if ( file_open_flag1 == 1 ) {
		fclose( g_pfRecvFile );
	}
	if ( file_open_flag2 == 1 ) {
		fclose( g_pfLogFile );
	}

    /* ＤＢ接続解除 */
	/*
    EXEC SQL CONNECT RESET;
    if ( sqlca.sqlcode != 0 ){
        send_err( LOG_C_TYPERR, 
            "ＤＢ接続の解除が失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
    }

    send_err( LOG_C_TYPINF,
                       "プロセス(tf_setai_u)を終了します。(終了コード=%d 処理件数=%d/%d)",
                       rc, iOkNum, iRecNum );
	*/

    exit( rc );

}



void dump(i_buf,size,name)
char *i_buf;
int size;
char *name;
{
    char o_buf[1024];

    memset(o_buf,0x00,sizeof(o_buf));
    memcpy(o_buf,i_buf,size);

    printf("%s=[%s]\n",name,o_buf);

}