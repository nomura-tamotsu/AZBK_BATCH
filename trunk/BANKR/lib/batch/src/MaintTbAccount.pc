/*==========================================================================*/
/* Copyright　Information Services International-Dentsu, Ltd.   　          */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : BANK・R−CC                                           */
/*                                                                          */
/* PROGRAM NAME     : テレバン利用口座メンテナンス                          */
/*                                                                          */
/* MODULE NAME      : MaintTbAccount                                        */
/*                                                                          */
/* FUNCTION         : テレバン利用口座メンテナンスを行う                    */
/*                                                                          */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POint      : Main Module.                                          */
/*                                                                          */
/* INPUT            : None                                                  */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 20/06/29 | Y.Maruyama  | First Edition.                            */
/* %01 | 20/12/27 | S.Ishihara  | 定期性・外貨預金口座に枝番号の条件追加    */
/* %02 | 21/01/06 | A.Miyamoto  | 投信口座登録対象のカウント方法を修正      */
/*                              | テレバン契約属性の承認日等更新処理を追加  */
/*                              | 口座情報を保持する変数のメモリ初期化修正  */
/* %03 | 21/01/15 | K.Takeichi  | SQLをバインド変数を使用するよう修正       */
/* %04 | 21/01/18 | A.Miyamoto  | 51件以上の口座情報取得時のメッセージ追加  */
/*                              | 投信の抽出条件変更                        */
/*                              | (口座開設日2020/12/20以降のBANK支店を抽出)*/
/*                              | 口座登録可能件数を20件から21件に修正      */
/*                              | テレバン契約口座の存在チェック条件を修正  */
/* %05 | 21/01/18 | A.Miyamoto  | 口座情報取得上限チェックの位置を変更      */
/* %06 | 21/01/21 | A.Miyamoto  | 科目変換対象外のメッセージ出力廃止        */
/* %07 | 21/12/13 | A.Miyamoto  | 成人年齢引き下げ対応 20歳→18歳           */
/* %08 | 23/03/15 | A.Miyamoto  | 処理時間短縮の為投信口座の取込を廃止      */
/*==========================================================================*/
/*---------------------------------------------------------------------------*/
/* Standard include specification                                            */
/*---------------------------------------------------------------------------*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <errno.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <time.h>

/*---------------------------------------------------------------------------*/
/* User defined include specification                                        */
/*---------------------------------------------------------------------------*/
#include "msg.h"
#include "common.h"
#include "batchcommon.h"
#include "apl_common.h"

EXEC SQL INCLUDE mbproc.h;

/*---------------------------------------------------------------------------*/
/* Internal macro definition                                                 */
/*---------------------------------------------------------------------------*/

typedef struct _KOZA_DATA {
    char    branch_id        [6];     /* 店番 */
    char    accnt_type       [6];     /* 科目ID */
    char    accnt_no        [16];     /* 口座番号 */
    char    shikumi_yokin    [2];     /* 仕組預金 */
    char    tsusho_kbn_id    [5];     /* 通証区分ID */
    char    tsuka_ryakusyo  [11];     /* 通貨略称 */
    char    start_date       [9];     /* 口座開設年月日・登録年月日 */
    char    flg_toshin       [2];     /* 投信口座フラグ */
    char    flg_mousikomiten [2];     /* TB申込店フラグ */
    char    flg_not_ins      [2];     /* 対象外フラグ */
    int     sort_kamoku         ;     /* ソート順（科目） */
    int     flg_no_furikomisaki ;     /* 振込先未登録フラグ */
    char    flg_is_bank      [2];     /* BANK支店フラグ */
} KOZA_DATA ;

/*---------------------------------------------------------------------------*/
/* User Local defined  specification                                         */
/*---------------------------------------------------------------------------*/
#define NOMAL                    0
#define TRUE                     1
#define FALSE                    0
#define NODATA                   -1
#define FLG_ON                  "*"
#define YAKKAN_DATE             "'20201221'"
#define BANK_SHITEN             "'181','182','183','184','185'"
#define NOT_YUJINTEN            "'001','100','181','182','183','184','185'"
#define KBN_KAIYAKU             "9"
#define TENBAN_CC_HONNBU        "'001','100'"
#define REGIST_DATE             "'20060412'"
#define BANK_ID_JIGYOU          "'0398'"
#define KAMOKU_FUTSU_TOSHIN     "1"
#define MAX_DATA                50
/* %04 MOD START */
/* #define MAX_KOZA_COUNT          20 */
#define MAX_KOZA_COUNT          21
/* %04 MOD END */
#define KAMOKU_FUTSU            "2050"

/*---------------------------------------------------------------------------*/
/* Global variable specification                                             */
/*---------------------------------------------------------------------------*/
/* 設定ファイル項目（ホスト変数以外）*/
char g_szDtlMsg           [AP_C_NOTE_LEN_H];         /* 事象詳細文字列               */

int  count_line;                                     /* カウント（ライン）           */


int  tm_year;                                        /* 現在年         　　　　　　  */
int  tm_mon;                                         /* 現在月           　　　　　  */
int  tm_mday;                                        /* 現在日           　　　　　  */

int  i;
int  j;

char    process_name[56];
/* %02 ADD START */
char    keiyakuZokuseiUpdFlg[2];                     /* テレバン契約属性更新済みフラグ */
/* %02 ADD END */
/* %04 ADD START */
char    accntNoMaxDataFlg[2];                        /* 口座取得上限超過フラグ */
/* %04 ADD END */

/*---------------------------------------------------------------------------*/
/* Host Variable                                                             */
/*---------------------------------------------------------------------------*/
EXEC SQL INCLUDE SQLCA;
EXEC SQL BEGIN DECLARE SECTION;
    /* ＤＢ接続情報 */
    char sqlcmd[2048];
    char sqlcmd_local[2048];

    /* 共通 */
    char    h_ContractorID       [11];                  /*  契約者番号                */
    short    h_ind_ContractorID;
    char    h_CIFNO              [11];                  /*  CIFNO                     */
    short    h_ind_CIFNO;
    
    /* TF_顧客属性テーブル */
    char    h_TBContract          [2];                  /* テレバン契約               */
    short    h_ind_TBContract;
    
    /* TFB_テレバン契約属性 */
    char    h_ZentenFlg           [2];                  /* 全店口座登録フラグ         */
    short    h_ind_ZentenFlg;
    char    h_TBMoushikomiten     [4];                  /* TB申込店                   */
    short    h_ind_TBMoushikomiten;
    char    h_DateOfBirth         [9];                  /* 生年月日                   */
    short    h_ind_DateOfBirth;
    
    /* 各口座テーブル */
    char    h_BranchId            [4];                  /* 店番                       */
    short    h_ind_BranchId;
    char    h_AccntType           [6];                  /* 科目ID                     */
    short    h_ind_AccntType;
    char    h_AccntNo            [15];                  /* 口座番号                   */
    short    h_ind_AccntNo;
    char    h_ShikumiYokin        [2];                  /* 仕組預金                   */
    short    h_ind_ShikumiYokin;
    char    h_TsushoKbnId         [5];                  /* 通証区分ID                 */
    short    h_ind_TsushoKbnId;
    char    h_TsukaRyakusyo      [11];                  /* 通貨略称                   */
    short    h_ind_TsukaRyakusyo;
    char    h_StartDate           [9];                  /* 口座開設年月日・登録年月日 */
    short    h_ind_StartDate;
    char    h_IsBankFlg           [2];                  /* BANK支店フラグ         */
    short    h_ind_IsBankFlg;
    
    /* 投信口座テーブル */
    char    h_FurikomiBankID   [6];                     /* 振込銀行ID                 */
    short    h_ind_FurikomiBankID;
    char    h_FurikomiShitenID    [6];                  /* 振込支店ID                 */
    short    h_ind_FurikomiShitenID;
    char    h_AccntTypeTsn        [6];                  /* 科目ID（投信口座）         */
    short    h_ind_AccntTypeTsn;
    char    h_AccntNoTsn         [15];                  /* 振込口座                   */
    short    h_ind_AccntNoTsn;
    
    /* 登録項目 */
    char    h_ins_ContractorID    [11];                 /* 契約者番号（登録）         */
    char    h_ins_BranchId         [5];                 /* 店番（登録）               */
    char    h_ins_CIFNO           [11];                 /* CIFNO（登録）              */
    char    h_ins_AccntType        [6];                 /* 科目ID（登録）             */
    char    h_ins_AccntNo         [15];                 /* 口座番号（登録）           */
    char    h_ins_TsukaId          [4];                 /* 通貨ID（登録）             */
    
    long    h_TB_COUNT;                                 /* カウント                   */
    
    

EXEC SQL END DECLARE SECTION;

/*---------------------------------------------------------------------------*/
/* Internal function prototype                                               */
/*---------------------------------------------------------------------------*/
extern int send_err();
extern void errhandler();
extern int db_connect();
void rtrim();

static int chkDaihyoKoza( char *g_szDtlMsg );
static int chkKeiyakusyaState( char *g_szDtlMsg );
static int getKoteisei( KOZA_DATA **data, int data_count, char *g_szDtlMsg );
static int getRyudosei( KOZA_DATA **data, int data_count, char *g_szDtlMsg );
static int getGaika( KOZA_DATA **data, int data_count, char *g_szDtlMsg );
static int getToshin( KOZA_DATA **data, int data_count, char *g_szDtlMsg );
static void chgAccntType( KOZA_DATA **data, int count_all );
static int compare( const void *p, const void *q );
static int compareKozaNo( const void *p, const void *q );
static int compareStartDate( const void *p, const void *q );
static int compareKamoku( const void *p, const void *q );
static int compareFlgMousikomiten( const void *p, const void *q );
static int compareFlgToshin( const void *p, const void *q );
static int chkBeforeIns(  KOZA_DATA *data, char *h_ContractorID, char *g_szDtlMsg );
static int chkToshinKozaState( KOZA_DATA *data, char *g_szDtlMsg );
static int insKoza( KOZA_DATA *data, char *h_ContractorID, char *g_szDtlMsg );
static int updFurikomiSaki( KOZA_DATA *data, char *g_szDtlMsg );
/* %02 ADD START */
static int updKeiyakuZokusei( char *g_szDtlMsg );
/* %02 ADD END */
static int chkDateOfBirth( char *start_date );
static int Trim(char *s);

static int  memoryFree( KOZA_DATA *data_1, KOZA_DATA **data_2, int count_all );
static int  commit( void );
static int  rollback( void );


/*****************************************************************************/
/* Function Name:                                                            */
/*   int main( int argc, char *argv[] )                                      */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*      メイン処理                                                           */
/*                                                                           */
/* Arguments:                                                                */
/* Type     Name              I/O    Content                                 */
/* -------- ----------------- --- ------------------------------------------ */
/*    int    argc              I  引数の数                                   */
/*    char  *argv[]                                                          */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
int main( int argc, char *argv[] )
{
/*--------------------------------------------------------------------------*/
/*                      LOCAL VARIABLE DECLARATIONS                         */
/*--------------------------------------------------------------------------*/
    int         rc;
    int         exitcode;
    int         db_connect_flag;                /* ＤＢ接続フラグ               */
    KOZA_DATA   *dData; 
    KOZA_DATA   **pData; 
    KOZA_DATA   *tmp; 
    int         count_kokyaku = 0; 
    int         count_line = 0; 
    
/*==========================================================================*/
/*      INITIALIZATION                                                      */
/*==========================================================================*/


    /*-----------------------------*/
    /* Initialize environment      */
    /*-----------------------------*/
    exitcode = NORMAL;
    db_connect_flag = 0;

    /*-----------------------------*/
    /* Print process start message */
    /*-----------------------------*/
    strcpy( G_STATION, "MaintTbAccount" );

    memset(process_name,0x00,sizeof(process_name));
    strcpy(process_name,"テレバン利用口座メンテナンス");

    send_err( m$start_process, NORMAL, process_name, "", "", G_STATION );

    /*-----------------------------*/
    /* Setup error handler routine */
    /*-----------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler() ;

    /*-----------------------------*/
    /* Connect to database         */
    /*-----------------------------*/
    G_POSITION = __LINE__;
    rc = db_connect();
    if( rc != 0 ) {
        send_err( m$db_connect, rc, NULL, NULL, NULL, G_STATION );
        exitcode = ERROR;
        goto ENDPROC;
    }
    db_connect_flag = 1;
 
    /*----------------------------------------*/
    /*      テレバン利用口座メンテナンス      */
    /*----------------------------------------*/

    /*
    **  テレバン契約済みの顧客情報を取得し、Loopする。
    */
    
    memset(sqlcmd, 0x00, sizeof(sqlcmd));
    strcpy(sqlcmd, "SELECT ");    
    strcat(sqlcmd, "TF_顧客属性.CIFNO, ");
    strcat(sqlcmd, "TF_顧客属性.テレバン契約, ");
    strcat(sqlcmd, "TFB_テレバン契約属性.契約者番号, ");
    strcat(sqlcmd, "CASE WHEN ");
    strcat(sqlcmd, "TFB_テレバン契約属性.約款同意日 >= ");
    strcat(sqlcmd, YAKKAN_DATE);
    strcat(sqlcmd, " THEN '");
    strcat(sqlcmd, FLG_ON);
    strcat(sqlcmd, "' ELSE '' ");
    strcat(sqlcmd, "END AS 全店口座登録フラグ, ");
    strcat(sqlcmd, "TRIM(TFB_テレバン契約属性.TB申込店), ");
    strcat(sqlcmd, "TFB_テレバン契約属性.生年月日 ");
    strcat(sqlcmd, "FROM ");
    strcat(sqlcmd, "TFB_テレバン契約属性 LEFT JOIN ");
    strcat(sqlcmd, "TF_顧客属性 ON TRIM(TF_顧客属性.CIFNO) = TRIM(TFB_テレバン契約属性.CIFNO) ");
    strcat(sqlcmd, "WHERE ");
    strcat(sqlcmd, "TF_顧客属性.テレバン契約 != '");
    strcat(sqlcmd, KBN_KAIYAKU);    
    strcat(sqlcmd, "' "); 
    strcat(sqlcmd, "AND TFB_テレバン契約属性.処理区分 != '");
    strcat(sqlcmd, KBN_KAIYAKU);    
    strcat(sqlcmd, "' "); 
    
    G_POSITION = __LINE__;
    EXEC SQL PREPARE sqlcommand_kokyaku FROM :sqlcmd;
    if( sqlca.sqlcode != 0 ){
        sprintf( g_szDtlMsg,
                "顧客情報の検索(PREPARE)に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode);
        send_err( m$emb_error, sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err( m$sql_statment, sqlca.sqlcode, "顧客情報の取得(PREPARE)に失敗", NULL, NULL, G_STATION );
        exitcode = ERROR;
        goto ENDPROC;
    }

    G_POSITION = __LINE__;
    EXEC SQL DECLARE CUR_KOKYAKU CURSOR FOR sqlcommand_kokyaku;   
    
    if( sqlca.sqlcode < 0 ) {
        sprintf( g_szDtlMsg,
                "顧客情報の検索(DECLARE)に失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode);
        send_err( m$emb_error, sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err( m$sql_statment, sqlca.sqlcode, "顧客情報の取得(DECLARE)に失敗", NULL, NULL, G_STATION );
        exitcode = ERROR;
        goto ENDPROC;
    }

    G_POSITION = __LINE__;
    EXEC SQL OPEN CUR_KOKYAKU;
    
    if( sqlca.sqlcode < 0 ) {
        sprintf( g_szDtlMsg,
                "カーソル(CUR_KOKYAKU)オープン・エラー(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                      sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        exitcode = ERROR;
        goto ENDPROC;
    }

    while( 1 ) {
        dData = NULL;
        pData = NULL;
        /* %02 MOD START */
        /* memset( &dData,                          0x00, sizeof(KOZA_DATA) ); */
        memset( &dData,                          0x00, sizeof(KOZA_DATA*) );
        /* %02 MOD END */
        memset( &pData,                          0x00, sizeof(KOZA_DATA*) );
        memset( h_CIFNO,                         0x00, sizeof(h_CIFNO) );
        memset( h_TBContract,                    0x00, sizeof(h_TBContract) );
        memset( h_ContractorID,                  0x00, sizeof(h_ContractorID) );
        memset( h_ZentenFlg,                     0x00, sizeof(h_ZentenFlg) );
        memset( h_TBMoushikomiten,               0x00, sizeof(h_TBMoushikomiten) );
        memset( h_DateOfBirth,                   0x00, sizeof(h_DateOfBirth) );  
        
        count_line = 0;

        /* %02 ADD START */
        memset(keiyakuZokuseiUpdFlg, 0x00,sizeof(keiyakuZokuseiUpdFlg));
        strcpy(keiyakuZokuseiUpdFlg, "");
        /* %02 ADD END */
        /* %04 ADD START */
        memset(accntNoMaxDataFlg, 0x00,sizeof(accntNoMaxDataFlg));
        strcpy(accntNoMaxDataFlg, "");
        /* %04 ADD END */
        
        G_POSITION = __LINE__;
        EXEC SQL FETCH CUR_KOKYAKU INTO
            :h_CIFNO              :h_ind_CIFNO,                /* CIFNO */
            :h_TBContract         :h_ind_TBContract,           /* テレバン契約 */
            :h_ContractorID       :h_ind_ContractorID,         /* 契約者番号 */
            :h_ZentenFlg          :h_ind_ZentenFlg,            /* 全店口座登録フラグ */
            :h_TBMoushikomiten    :h_ind_TBMoushikomiten,      /* TB申込店 */
            :h_DateOfBirth        :h_ind_DateOfBirth;          /* 生年月日 */
        
        if( sqlca.sqlcode < 0 ){
            send_err( m$sql_statment, sqlca.sqlcode, "FETCH CUR_KOKYAKU", NULL, NULL, G_STATION );
            exitcode = ERROR;
            goto ENDPROC;
        }
        
        if( sqlca.sqlcode == ORA_NOF ){
            if( count_kokyaku == 0 ){
                send_err ( m$message1,NORMAL,"TF_顧客属性、TFB_テレバン契約属性に該当データなし"
                    ,NULL,NULL,G_STATION);
            }
            goto ENDPROC;
        }
        
        /* 顧客のデータカウントを回す */
        count_kokyaku++;

        /* ------------------------------------------------- */
        /* テレバン契約口座に代表口座が設定済みの顧客か確認  */
        /* ------------------------------------------------- */
        if ( (rc = chkDaihyoKoza( g_szDtlMsg )) != NORMAL ){
            continue;
        }
        
        /* ----------------------------------------------------------------- */
        /* テレバン契約者の編集中（承認待ちまたは却下待ち）のチェックを行う  */
        /* ----------------------------------------------------------------- */
        if ( (rc = chkKeiyakusyaState( g_szDtlMsg )) != NORMAL ){
            continue;
        }
        
        /* ------------------------------------------ */
        /* 登録対象の口座を取得する                   */
        /* ------------------------------------------ */ 
        
        /* 配列のメモリを確保する */
        dData = (KOZA_DATA*)malloc(MAX_DATA * sizeof(KOZA_DATA));
        pData = (KOZA_DATA**)malloc(MAX_DATA * sizeof(KOZA_DATA*));

        for (i = 0; i < MAX_DATA; i++){
            /* %02 ADD START */
            memset( &dData[i],                          0x00, sizeof(KOZA_DATA) );
            /* %02 ADD END */
            pData[i] = &dData[i];
        }

        /* TF_個別明細固定性預金から契約口座情報を取得する */
        rc = getKoteisei( pData, count_line, g_szDtlMsg );
        if ( rc == -1 ){
            /* メモリ開放 */
            memoryFree( dData, pData, MAX_DATA );
                
            continue;
        }
        count_line += rc;
        
        /* TF_個別明細流動性預金から契約口座情報を取得する */
        rc = getRyudosei( pData, count_line,  g_szDtlMsg );
        if ( rc == -1 ){
            /* メモリ開放 */
            memoryFree( dData, pData, MAX_DATA );
                
            continue;
        }
        count_line += rc;

        /* TF_個別明細外貨預金から契約口座情報を取得する */
        rc = getGaika( pData, count_line,  g_szDtlMsg );
        if ( rc == -1 ){
            /* メモリ開放 */
            memoryFree( dData, pData, MAX_DATA );
                
            continue;
        }
        count_line += rc;
                
		/* %08 DEL START */
        /* TF_個別明細投信口座から契約口座情報を取得する */
        //rc = getToshin( pData, count_line,  g_szDtlMsg );
        //if ( rc == -1 ){
        //    /* メモリ開放 */
        //    memoryFree( dData, pData, MAX_DATA );
            
        //    continue;
        //}
        //count_line += rc;
        /* %08 DEL END */
                
        /* %04 ADD START */
        /* 口座情報取得件数が51件以上ある場合はメッセージを出力する */
        if( strcmp( accntNoMaxDataFlg, FLG_ON ) == 0 ){
            sprintf( g_szDtlMsg,
                "【翌営業日連絡】対象顧客の口座取得上限数を超過しました。店：%s、CIFNO：%s", h_TBMoushikomiten, h_CIFNO);
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        }
        /* %04 ADD END */
        
        /* ------------------------------------------ */
        /* 科目IDを変換する                           */
        /* ------------------------------------------ */        
        chgAccntType( pData, count_line );
                
        /* ------------------------------------------ */
        /* 口座情報を並び替える                       */
        /* ------------------------------------------ */    
        
        for(i = 0; i < count_line; i++){
            for(j = i+1; j < count_line; j++){
                if( compare(pData[i], pData[j]) > 0){
                     tmp = pData[i];
                     pData[i] = pData[j];
                     pData[j] = tmp;
                }
            }
        }
                
        /* ------------------------------------------ */
        /* 口座登録処理                               */
        /* ------------------------------------------ */    
        
        for(i = 0; i < count_line; i++)
        {         
            /* 登録対象外のデータの場合は処理を抜ける */
            if( strcmp( pData[i]->flg_not_ins, FLG_ON ) == 0 ){
                continue;
            }
            
            /* 口座登録処理前の各種チェックを行う */
            if ( (rc = chkBeforeIns( pData[i], h_ContractorID, g_szDtlMsg )) != NORMAL ){                
                    continue;
            }
            
            /* TFB_テレバン契約口座登録処理 */
            if ( (rc = insKoza( pData[i], h_ContractorID, g_szDtlMsg )) == NORMAL ) {
                /* ＤＢのコミット */
                rc = commit();
            }
            else{
                rollback();
            }
        }
        
        /* メモリ開放 */
        memoryFree( dData, pData, count_line );
        
    } /* while loop end */


    /*--------------------------------------------------------------------------*/
    /*                              終了処理                                    */
    /*--------------------------------------------------------------------------*/

ENDPROC:    
    
    /* ＤＢ切断 */
    
    EXEC SQL CLOSE CUR_KOKYAKU;
    
    if( db_connect_flag == 1 ){
        if ( exitcode == NORMAL ){
            EXEC SQL COMMIT WORK RELEASE;
        }
        else{
            EXEC SQL ROLLBACK WORK RELEASE;
        }
    }

    /* 終了メッセージ出力 */
    if ( exitcode == NORMAL ){
        send_err( m$stop_process, NORMAL, process_name, "", "", G_STATION );  
    }
    else {
        send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
    }

    exit(exitcode);

}

/*****************************************************************************/
/* Function Name:                                                            */
/*          int chkDaihyoKoza( char *g_szDtlMsg )                            */
/* Made by:                                                                  */
/* Description : テレバン契約口座に代表口座が設定済みの顧客か確認            */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* g_szDtlMsg      char*        I/O  事象詳細文字列                          */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 挿入エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int chkDaihyoKoza( char *g_szDtlMsg )
{

    /* テレバン契約口座に代表口座が設定済みの顧客か確認 */
    h_TB_COUNT = 0;      /* テーブルカウント */
    
    G_POSITION = __LINE__;
    EXEC SQL SELECT COUNT(*) INTO :h_TB_COUNT
    FROM TFB_テレバン契約口座
    WHERE 契約者番号 = :h_ContractorID
    AND 代表口座区分 = '1'
    ; 
   
    if( sqlca.sqlcode != 0 ) {
        sprintf( g_szDtlMsg,
                "TFB_テレバン契約口座テーブルの検索に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err ( m$sql_statment, sqlca.sqlcode, "SELECT TFB_テレバン契約口座", NULL, NULL, G_STATION);
        return(ERROR);
    }
    else if (h_TB_COUNT == 0 || h_TB_COUNT > 1){
        return(ERROR);
    }
                    
    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*          int chkKeiyakusyaState( char *g_szDtlMsg )                       */
/* Made by:                                                                  */
/* Description : テレバン契約者の編集中（承認待ちまたは却下待ち）            */
/*               のチェックを行う                                            */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* g_szDtlMsg      char*        I/O  事象詳細文字列                          */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 挿入エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int chkKeiyakusyaState( char *g_szDtlMsg )
{

    /* TFB_テレバン契約属性受付に契約者が存在するか確認 */
    h_TB_COUNT = 0;      /* テーブルカウント */
    
    G_POSITION = __LINE__;
    EXEC SQL SELECT COUNT(*) INTO :h_TB_COUNT
    FROM TFB_テレバン契約属性受付
    WHERE 契約者番号 = :h_ContractorID
    ; 
   
    if( sqlca.sqlcode != 0 ) {
        sprintf( g_szDtlMsg,
                "TFB_テレバン契約属性受付テーブルの検索に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err ( m$sql_statment, sqlca.sqlcode, "SELECT TFB_テレバン契約属性受付", NULL, NULL, G_STATION);
        return(ERROR);
    }
    else if (h_TB_COUNT >= 1){
        sprintf( g_szDtlMsg,
               "【翌営業日連絡】承認処理中の顧客です。BANK・R画面より承認または却下をしてください。契約者番号:%s、CIFNO:%s ",
               h_ContractorID, h_CIFNO);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }
    
    /* TFB_テレバン契約口座受付に事前口座が存在するか確認 */
    h_TB_COUNT = 0;
    
    G_POSITION = __LINE__;
    EXEC SQL SELECT COUNT(*) INTO :h_TB_COUNT
    FROM TFB_テレバン契約口座受付
    WHERE 契約者番号 = :h_ContractorID
    ;
    if( sqlca.sqlcode != 0 ) {
        sprintf( g_szDtlMsg,
                "TFB_テレバン契約口座受付テーブルの検索に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err ( m$sql_statment, sqlca.sqlcode, "SELECT TFB_テレバン契約口座受付", NULL, NULL, G_STATION);
        return(ERROR);
    }
    else if (h_TB_COUNT >= 1){
        sprintf( g_szDtlMsg,
               "【翌営業日連絡】承認処理中の顧客です。BANK・R画面より承認または却下をしてください。契約者番号:%s、CIFNO:%s ",
               h_ContractorID, h_CIFNO);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }
    
    /* TFB_テレバン契約振込先受付に振込口座が存在するか確認 */
    
    h_TB_COUNT = 0;
    
    G_POSITION = __LINE__;
    EXEC SQL SELECT COUNT(*) INTO :h_TB_COUNT
    FROM TFB_テレバン契約振込先受付
    WHERE 契約者番号 = :h_ContractorID
    ;
    if( sqlca.sqlcode != 0 ) {
        sprintf( g_szDtlMsg,
                "TFB_テレバン契約振込先受付テーブルの検索に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err ( m$sql_statment, sqlca.sqlcode, "SELECT TFB_テレバン契約振込先受付", NULL, NULL, G_STATION);
        return(ERROR);
    }
    else if (h_TB_COUNT >= 1){
        sprintf( g_szDtlMsg,
               "【翌営業日連絡】承認処理中の顧客です。BANK・R画面より承認または却下をしてください。契約者番号:%s、CIFNO:%s ",
               h_ContractorID, h_CIFNO);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }
    
    return NORMAL;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*          int getKoteisei( KOZA_DATA **data, char *g_szDtlMsg )            */
/* Made by:                                                                  */
/* Description : 個別明細固定性預金から契約口座情報を取得する                */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* data            KOZA_DATA**  I/O  構造体配列                              */
/* g_szDtlMsg      char*        I/O  事象詳細文字列                          */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 挿入エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int getKoteisei( KOZA_DATA **data, int data_count, char *g_szDtlMsg )
{

    /* TF_個別明細固定性預金から契約口座情報を取得する */
    int getCount = 0;
    memset(sqlcmd_local, 0x00, sizeof(sqlcmd_local));
    strcpy(sqlcmd_local, "SELECT ");    
    strcat(sqlcmd_local, "TRIM(店番), ");
    strcat(sqlcmd_local, "科目ID, ");
    strcat(sqlcmd_local, "口座番号, ");
    strcat(sqlcmd_local, "仕組預金, ");
    strcat(sqlcmd_local, "通証区分ID, ");
    strcat(sqlcmd_local, "口座開設年月日, ");
    strcat(sqlcmd_local, "CASE WHEN 店番 IN ( ");
    strcat(sqlcmd_local, BANK_SHITEN);
    strcat(sqlcmd_local, " ) THEN '");
    strcat(sqlcmd_local, FLG_ON);
    strcat(sqlcmd_local, "' ELSE '' END ");
    strcat(sqlcmd_local, "FROM ");
    strcat(sqlcmd_local, "TF_個別明細固定性預金 ");
    strcat(sqlcmd_local, "WHERE ");
    /* %03 MOD START */
    //バインド変数対応
    strcat(sqlcmd_local, "CIFNO = :h_CIFNO ");
    //strcat(sqlcmd_local, "CIFNO = ");
    //strcat(sqlcmd_local, "'");
    //strcat(sqlcmd_local, h_CIFNO);    
    //strcat(sqlcmd_local, "' "); 
    /* %03 MOD END */
    strcat(sqlcmd_local, "AND 店番 NOT IN ( ");
    strcat(sqlcmd_local, TENBAN_CC_HONNBU);
    strcat(sqlcmd_local, " ) ");
    /* %01 ADD START */
    strcat(sqlcmd_local, "AND 枝番号 = '0000000' ");
    /* %01 ADD END */
    if( strncmp(h_ZentenFlg, FLG_ON, 1) != 0 ){
        /* %03 MOD START */
        //バインド変数対応
        strcat(sqlcmd_local, "AND ( 店番 = :h_TBMoushikomiten ");
        //strcat(sqlcmd_local, "AND ( 店番 = ");
        //strcat(sqlcmd_local, "'");
        //strcat(sqlcmd_local, h_TBMoushikomiten);    
        //strcat(sqlcmd_local, "' "); 
        /* %03 MOD END */
        strcat(sqlcmd_local, "OR ( 店番 IN ( ");
        strcat(sqlcmd_local, BANK_SHITEN);
        strcat(sqlcmd_local, " ) ");
        strcat(sqlcmd_local, "AND 口座開設年月日 >= ");
        strcat(sqlcmd_local, YAKKAN_DATE);
        strcat(sqlcmd_local, " ) ) ");
    }
    strcat(sqlcmd_local, "ORDER  BY 口座開設年月日");
                
    G_POSITION = __LINE__;
    EXEC SQL PREPARE sqlcommand_koteisei FROM :sqlcmd_local;
    if( sqlca.sqlcode != 0 ){
        sprintf( g_szDtlMsg,
                "TF_個別明細固定性預金の検索(PREPARE)に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err( m$emb_error, sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err( m$sql_statment, sqlca.sqlcode, "個別明細固定性預金の取得(PREPARE)に失敗", NULL, NULL, G_STATION );
        return NODATA;
    }

    G_POSITION = __LINE__;
    EXEC SQL DECLARE CUR_KOTEISEI CURSOR FOR sqlcommand_koteisei;
    
    if( sqlca.sqlcode < 0 ) {
        sprintf( g_szDtlMsg,
                "TF_個別明細固定性預金の検索(DECLARE)に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err( m$emb_error, sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err( m$sql_statment, sqlca.sqlcode, "個別明細固定性預金の取得(DECLARE)に失敗", NULL, NULL, G_STATION );
        return NODATA;
    }
                
    G_POSITION = __LINE__;
    /* %03 MOD START */
    //バインド変数対応
    //EXEC SQL OPEN CUR_KOTEISEI;
    if( strncmp(h_ZentenFlg, FLG_ON, 1) != 0 ){
        EXEC SQL OPEN CUR_KOTEISEI USING :h_CIFNO, :h_TBMoushikomiten;
    } else {
        EXEC SQL OPEN CUR_KOTEISEI USING :h_CIFNO;
    }

    if( sqlca.sqlcode < 0 ) {
        sprintf( g_szDtlMsg,
                "カーソル(CUR_KOTEISEI)オープン・エラー(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                      sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        return NODATA;
    }
    
    i = data_count;
     while (1)
    {
        /* %05 DEL START */ 
        /* 配列の最大件数を超えた場合は処理を終了する */
        //if( i >= MAX_DATA){
        //    /* %04 ADD START */
        //    strcpy(accntNoMaxDataFlg, FLG_ON);
        //    /* %04 ADD END */
        //    break;
        //}
        /* %05 DEL END */ 

        memset( h_BranchId,                 0x00, sizeof(h_BranchId) );
        memset( h_AccntType,                0x00, sizeof(h_AccntType) );
        memset( h_AccntNo,                  0x00, sizeof(h_AccntNo) );
        memset( h_ShikumiYokin,             0x00, sizeof(h_ShikumiYokin) );
        memset( h_TsushoKbnId,              0x00, sizeof(h_TsushoKbnId) );
        memset( h_StartDate,                0x00, sizeof(h_StartDate) );
        memset( h_IsBankFlg,                0x00, sizeof(h_IsBankFlg) );
        
        G_POSITION = __LINE__;
        EXEC SQL FETCH CUR_KOTEISEI INTO 
            :h_BranchId      :h_ind_BranchId,
            :h_AccntType     :h_ind_AccntType,      
            :h_AccntNo       :h_ind_AccntNo,        
            :h_ShikumiYokin  :h_ind_ShikumiYokin,        
            :h_TsushoKbnId   :h_ind_TsushoKbnId,        
            :h_StartDate     :h_ind_StartDate,           
            :h_IsBankFlg     :h_ind_IsBankFlg      
            ;
        
            if (sqlca.sqlcode == ORA_NOF){
                break;
            }
            else if (sqlca.sqlcode < 0){
                send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_KOTEISEI) FETCHエラー", NULL, NULL, G_STATION);
                return NODATA;
            }
            /* %05 ADD START */ 
            /* 配列の最大件数を超えた場合は処理を終了する */
            else if( i >= MAX_DATA){
                strcpy(accntNoMaxDataFlg, FLG_ON);
                break;
            }
            /* %05 ADD END */ 
                
        strcpy(data[i]->branch_id, h_BranchId);
        strcpy(data[i]->accnt_type, h_AccntType);
        strcpy(data[i]->accnt_no, h_AccntNo);
        strcpy(data[i]->shikumi_yokin, h_ShikumiYokin);
        strcpy(data[i]->tsusho_kbn_id, h_TsushoKbnId);
        strcpy(data[i]->tsuka_ryakusyo, "JPY");
        strcpy(data[i]->start_date, h_StartDate);
        strcpy(data[i]->flg_toshin, "0");
        if( strcmp( data[i]->branch_id, h_TBMoushikomiten ) == 0){
            strcpy(data[i]->flg_mousikomiten, FLG_ON);
        }
        else{
            strcpy(data[i]->flg_mousikomiten, "");
        }
        strcpy(data[i]->flg_not_ins, "");
        strcpy(data[i]->flg_is_bank, h_IsBankFlg);
        data[i]->sort_kamoku = 1;
        data[i]->flg_no_furikomisaki = 0;
        
        i++;
        getCount++;

    }
    
    G_POSITION = __LINE__;
    EXEC SQL CLOSE CUR_KOTEISEI;
    
    return getCount;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*          int getRyudosei( KOZA_DATA **data, int data_count                */
/*                            , int get_data_count, char *g_szDtlMsg )       */
/* Made by:                                                                  */
/* Description : 個別明細流動性預金から契約口座情報を取得する                */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* data            KOZA_DATA*   I/O  構造体ポインタ                          */
/* g_szDtlMsg      char*        I/O  事象詳細文字列                          */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 挿入エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int getRyudosei( KOZA_DATA **data, int data_count, char *g_szDtlMsg )
{

    /* TF_個別明細流動性預金から契約口座情報を取得する */
    int getCount = 0;
    
    memset(sqlcmd_local, 0x00, sizeof(sqlcmd_local));
    strcpy(sqlcmd_local, "SELECT ");    
    strcat(sqlcmd_local, "TRIM(店番), ");
    strcat(sqlcmd_local, "科目ID, ");
    strcat(sqlcmd_local, "口座番号, ");
    strcat(sqlcmd_local, "通証区分ID, ");
    strcat(sqlcmd_local, "口座開設年月日, ");
    strcat(sqlcmd_local, "CASE WHEN 店番 IN ( ");
    strcat(sqlcmd_local, BANK_SHITEN);
    strcat(sqlcmd_local, " ) THEN '");
    strcat(sqlcmd_local, FLG_ON);
    strcat(sqlcmd_local, "' ELSE '' END ");
    strcat(sqlcmd_local, "FROM ");
    strcat(sqlcmd_local, "TF_個別明細流動性預金 ");
    strcat(sqlcmd_local, "WHERE ");
    /* %03 MOD START */
    //バインド変数対応
    strcat(sqlcmd_local, "CIFNO = :h_CIFNO ");
    /* %03 MOD END */
    //strcat(sqlcmd_local, "CIFNO = ");
    //strcat(sqlcmd_local, "'");
    //strcat(sqlcmd_local, h_CIFNO);    
    //strcat(sqlcmd_local, "' "); 
    strcat(sqlcmd_local, "AND 店番 NOT IN ( ");
    strcat(sqlcmd_local, TENBAN_CC_HONNBU);
    strcat(sqlcmd_local, " ) ");
    if( strncmp(h_ZentenFlg, FLG_ON, 1) != 0 ){
        /* %03 MOD START */
        //バインド変数対応
        strcat(sqlcmd_local, "AND ( 店番 = :h_TBMoushikomiten ");
        //strcat(sqlcmd_local, "AND ( 店番 = ");
        //strcat(sqlcmd_local, "'");
        //strcat(sqlcmd_local, h_TBMoushikomiten);    
        //strcat(sqlcmd_local, "' "); 
        /* %03 MOD END */
        strcat(sqlcmd_local, "OR ( 店番 IN ( ");
        strcat(sqlcmd_local,     BANK_SHITEN);
        strcat(sqlcmd_local,     " ) ");
        strcat(sqlcmd_local,     "AND 口座開設年月日 >= ");
        strcat(sqlcmd_local,         YAKKAN_DATE);
        strcat(sqlcmd_local, " ) ) ");
    }
    strcat(sqlcmd_local, "ORDER  BY 口座開設年月日");
    
    G_POSITION = __LINE__;
    EXEC SQL PREPARE sqlcommand_ryudousei FROM :sqlcmd_local;
    if( sqlca.sqlcode != 0 ){
        sprintf( g_szDtlMsg,
                "TF_個別明細流動性預金の検索(PREPARE)に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err( m$emb_error, sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err( m$sql_statment, sqlca.sqlcode, "個別明細流動性預金の取得(PREPARE)に失敗", NULL, NULL, G_STATION );
        return NODATA;
    }

    G_POSITION = __LINE__;
    EXEC SQL DECLARE CUR_RYUDOSEI CURSOR FOR sqlcommand_ryudousei; 
        
    if( sqlca.sqlcode < 0 ) {
        sprintf( g_szDtlMsg,
                "TF_個別明細流動性預金の検索(DECLARE)に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err( m$emb_error, sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err( m$sql_statment, sqlca.sqlcode, "個別明細流動性預金の取得(DECLARE)に失敗", NULL, NULL, G_STATION );
        return NODATA;
    }

    G_POSITION = __LINE__;
    /* %03 MOD START */
    //バインド変数対応
    //EXEC SQL OPEN CUR_RYUDOSEI;
    if( strncmp(h_ZentenFlg, FLG_ON, 1) != 0 ){
        EXEC SQL OPEN CUR_RYUDOSEI USING :h_CIFNO, :h_TBMoushikomiten;
    } else {
        EXEC SQL OPEN CUR_RYUDOSEI USING :h_CIFNO;
    }

    if( sqlca.sqlcode < 0 ) {
        sprintf( g_szDtlMsg,
                "カーソル(CUR_RYUDOSEI)オープン・エラー(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                      sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        return NODATA;
    }

    i = data_count;
    
     while (1)
    {
        /* %05 DEL START */ 
        /* 配列の最大件数を超えた場合は処理を終了する */
        //if( i >= MAX_DATA){
        //    /* %04 ADD START */
        //    strcpy(accntNoMaxDataFlg, FLG_ON);
        //    /* %04 ADD END */
        //    break;
        //}
        /* %05 DEL END */ 

        memset( h_BranchId,                 0x00, sizeof(h_BranchId) );
        memset( h_AccntType,                0x00, sizeof(h_AccntType) );
        memset( h_AccntNo,                  0x00, sizeof(h_AccntNo) );
        memset( h_TsushoKbnId,              0x00, sizeof(h_TsushoKbnId) );
        memset( h_StartDate,                0x00, sizeof(h_StartDate) );
        memset( h_IsBankFlg,                0x00, sizeof(h_IsBankFlg) );
        
        G_POSITION = __LINE__;
        EXEC SQL FETCH CUR_RYUDOSEI INTO 
            :h_BranchId      :h_ind_BranchId,
            :h_AccntType     :h_ind_AccntType,      
            :h_AccntNo       :h_ind_AccntNo,          
            :h_TsushoKbnId   :h_ind_TsushoKbnId,       
            :h_StartDate     :h_ind_StartDate,           
            :h_IsBankFlg     :h_ind_IsBankFlg      
            ;
            
        if (sqlca.sqlcode == ORA_NOF){
            break;
        }
        else if (sqlca.sqlcode < 0){
            send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_RYUDOSEI) FETCHエラー", NULL, NULL, G_STATION);
            return NODATA;
        }
        /* %05 ADD START */
        else if( i >= MAX_DATA){
            strcpy(accntNoMaxDataFlg, FLG_ON);
            break;
        }
        /* %05 ADD END */ 
        strcpy(data[i]->branch_id, h_BranchId);
        strcpy(data[i]->accnt_type, h_AccntType);
        strcpy(data[i]->accnt_no, h_AccntNo);
        strcpy(data[i]->shikumi_yokin, "");
        strcpy(data[i]->tsusho_kbn_id, h_TsushoKbnId);
        strcpy(data[i]->tsuka_ryakusyo, "JPY");
        strcpy(data[i]->start_date, h_StartDate);
        strcpy(data[i]->flg_toshin, "0");
        if( strcmp( data[i]->branch_id, h_TBMoushikomiten ) == 0){
            strcpy(data[i]->flg_mousikomiten, FLG_ON);
        }
        else
        {
            strcpy(data[i]->flg_mousikomiten, "");
        }
        strcpy(data[i]->flg_not_ins, "");
        strcpy(data[i]->flg_is_bank, h_IsBankFlg);
        data[i]->sort_kamoku = 1;
        data[i]->flg_no_furikomisaki = 0;
        
        i++;
        getCount++;
    }
    
    G_POSITION = __LINE__;
    EXEC SQL CLOSE CUR_RYUDOSEI;
    
    return getCount;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*          int getGaika( KOZA_DATA **data, int data_count                   */
/*                        , int get_data_count, char *g_szDtlMsg )           */
/* Made by:                                                                  */
/* Description : 個別明細外貨預金から契約口座情報を取得する                  */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* data            KOZA_DATA*   I/O  構造体ポインタ                          */
/* g_szDtlMsg      char*        I/O  事象詳細文字列                          */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 挿入エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int getGaika( KOZA_DATA **data, int data_count, char *g_szDtlMsg )
{

    /* TF_個別明細外貨預金から契約口座情報を取得する */
    int getCount = 0;
    int len = 0;
    
    memset(sqlcmd_local, 0x00, sizeof(sqlcmd_local));
    strcpy(sqlcmd_local, "SELECT ");    
    strcat(sqlcmd_local, "TRIM(TF_個別明細外貨預金.店番), ");
    strcat(sqlcmd_local, "TF_個別明細外貨預金.科目ID, ");
    strcat(sqlcmd_local, "TF_個別明細外貨預金.口座番号, ");
    strcat(sqlcmd_local, "TF_個別明細外貨預金.登録年月日, ");
    strcat(sqlcmd_local, "TRIM(TM_通貨.通貨略称), ");
    strcat(sqlcmd_local, "CASE WHEN TF_個別明細外貨預金.店番 IN ( ");
    strcat(sqlcmd_local, BANK_SHITEN);
    strcat(sqlcmd_local, " ) THEN '");
    strcat(sqlcmd_local, FLG_ON);
    strcat(sqlcmd_local, "' ELSE '' END ");
    strcat(sqlcmd_local, "FROM ");
    strcat(sqlcmd_local, "TF_個別明細外貨預金 ");
    strcat(sqlcmd_local, "LEFT JOIN ");
    strcat(sqlcmd_local, "TM_通貨 ");
    strcat(sqlcmd_local, "ON ");
    strcat(sqlcmd_local, "TF_個別明細外貨預金.通貨ID = TM_通貨.通貨ID ");
    strcat(sqlcmd_local, "WHERE ");
    /* %03 MOD START */
    //バインド変数対応
    strcat(sqlcmd_local, "CIFNO = :h_CIFNO ");
    //strcat(sqlcmd_local, "CIFNO = ");
    //strcat(sqlcmd_local, "'");
    //strcat(sqlcmd_local, h_CIFNO);    
    //strcat(sqlcmd_local, "' ");
    /* %03 MOD END */ 
    strcat(sqlcmd_local, "AND 店番 NOT IN ( ");
    strcat(sqlcmd_local, TENBAN_CC_HONNBU);
    strcat(sqlcmd_local, " ) ");
    /* %01 ADD START */
    strcat(sqlcmd_local, "AND 枝番号 = '00000' ");
    /* %01 ADD END */

    strcat(sqlcmd_local, "AND ( 科目ID = '711' ");
    strcat(sqlcmd_local, "OR ( 科目ID = '702' ");
    strcat(sqlcmd_local, "AND NOT EXISTS ( ");
    strcat(sqlcmd_local, "SELECT 1 FROM TMB_自動登録対象外口座 ");
    strcat(sqlcmd_local, "WHERE TMB_自動登録対象外口座.店番 =  TF_個別明細外貨預金.店番 ");
    strcat(sqlcmd_local, "AND TMB_自動登録対象外口座.CIFNO =  TF_個別明細外貨預金.CIFNO ");
    strcat(sqlcmd_local, "AND TMB_自動登録対象外口座.科目ID =  TF_個別明細外貨預金.科目ID ");
    strcat(sqlcmd_local, "AND TMB_自動登録対象外口座.口座番号 =  TF_個別明細外貨預金.口座番号 ");
    strcat(sqlcmd_local, "AND TMB_自動登録対象外口座.通貨ID =  TM_通貨.通貨略称 ");
    strcat(sqlcmd_local, ") ) ) ");
    
    if( strncmp(h_ZentenFlg, FLG_ON, 1) != 0 ){
        /* %03 MOD START */
        //バインド変数対応
        strcat(sqlcmd_local, "AND 店番 = :h_TBMoushikomiten ");
        //strcat(sqlcmd_local, "AND 店番 = ");
        //strcat(sqlcmd_local, "'");
        //strcat(sqlcmd_local, h_TBMoushikomiten);    
        //strcat(sqlcmd_local, "' "); 
        /* %03 MOD END */
    }
    
    strcat(sqlcmd_local, "ORDER  BY 登録年月日");
    
    G_POSITION = __LINE__;
    EXEC SQL PREPARE sqlcommand_gaika FROM :sqlcmd_local;
    if( sqlca.sqlcode != 0 ){
        sprintf( g_szDtlMsg,
                "TF_個別明細外貨預金の検索(PREPARE)に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err( m$emb_error, sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err( m$sql_statment, sqlca.sqlcode, "個別明細外貨預金の取得(PREPARE)に失敗", NULL, NULL, G_STATION );
        return NODATA;
    }

    G_POSITION = __LINE__;
    EXEC SQL DECLARE CUR_GAIKA CURSOR FOR sqlcommand_gaika; 
        
    if( sqlca.sqlcode < 0 ) {
        sprintf( g_szDtlMsg,
                "TF_個別明細外貨預金の検索(DECLARE)に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err( m$emb_error, sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err( m$sql_statment, sqlca.sqlcode, "個別明細外貨預金の取得(DECLARE)に失敗", NULL, NULL, G_STATION );
        return NODATA;
    }

    G_POSITION = __LINE__;
    /* %03 MOD START */
    //バインド変数対応
    //EXEC SQL OPEN CUR_GAIKA;
    if( strncmp(h_ZentenFlg, FLG_ON, 1) != 0 ){
        EXEC SQL OPEN CUR_GAIKA USING :h_CIFNO, :h_TBMoushikomiten;
    } else {
        EXEC SQL OPEN CUR_GAIKA USING :h_CIFNO;
    }
    /* %03 MOD END */

    if( sqlca.sqlcode < 0 ) {
        sprintf( g_szDtlMsg,
                "カーソル(CUR_GAIKA)オープン・エラー(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                      sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        return NODATA;
    }

    i = data_count;
    
     while (1)
    {
        /* %05 DEL START */ 
        /* 配列の最大件数を超えた場合は処理を終了する */
        //if( i >= MAX_DATA){
        //    /* %04 ADD START */
        //    strcpy(accntNoMaxDataFlg, FLG_ON);
        //    /* %04 ADD END */
        //    break;
        //}
        /* %05 DEL END */ 

        memset( h_BranchId,                 0x00, sizeof(h_BranchId) );
        memset( h_AccntType,                0x00, sizeof(h_AccntType) );
        memset( h_AccntNo,                  0x00, sizeof(h_AccntNo) );
        memset( h_StartDate,                0x00, sizeof(h_StartDate) );
        memset( h_TsukaRyakusyo,            0x00, sizeof(h_TsukaRyakusyo) );
        memset( h_IsBankFlg,                0x00, sizeof(h_IsBankFlg) );
        
        G_POSITION = __LINE__;
        EXEC SQL FETCH CUR_GAIKA INTO 
            :h_BranchId        :h_ind_BranchId,
            :h_AccntType       :h_ind_AccntType,      
            :h_AccntNo         :h_ind_AccntNo,        
            :h_StartDate       :h_ind_StartDate,      
            :h_TsukaRyakusyo   :h_ind_TsukaRyakusyo,           
            :h_IsBankFlg       :h_ind_IsBankFlg  
            ;
            
        if (sqlca.sqlcode == ORA_NOF){
            break;
        }
        else if (sqlca.sqlcode < 0){
            send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_GAIKA) FETCHエラー", NULL, NULL, G_STATION);
            return NODATA;
        }
        /* %05 ADD START */ 
        /* 配列の最大件数を超えた場合は処理を終了する */
        else if( i >= MAX_DATA){
            strcpy(accntNoMaxDataFlg, FLG_ON);
            break;
        }
        /* %05 ADD END */ 
        
        strcpy(data[i]->branch_id, h_BranchId);
        strcpy(data[i]->accnt_type, h_AccntType);
        strcpy(data[i]->accnt_no, h_AccntNo);
        strcpy(data[i]->shikumi_yokin, "");
        strcpy(data[i]->tsusho_kbn_id, "");
        if(h_TsukaRyakusyo != NULL || strcmp( h_TsukaRyakusyo, "" ) != 0 ){
	        len =Trim( h_TsukaRyakusyo );
        }
        strcpy(data[i]->tsuka_ryakusyo, h_TsukaRyakusyo);
        strcpy(data[i]->start_date, h_StartDate);
        strcpy(data[i]->flg_toshin, "0");
        if( strcmp( data[i]->branch_id, h_TBMoushikomiten ) == 0){
            strcpy(data[i]->flg_mousikomiten, FLG_ON);
        }
        else
        {
            strcpy(data[i]->flg_mousikomiten, "");
        }
        strcpy(data[i]->flg_not_ins, "");
        strcpy(data[i]->flg_is_bank, h_IsBankFlg);
        data[i]->sort_kamoku = 1;
        data[i]->flg_no_furikomisaki = 0;
        
        i++;
        getCount++;
    }
    
    G_POSITION = __LINE__;
    EXEC SQL CLOSE CUR_GAIKA;
    
    return getCount;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*          int getToshin( KOZA_DATA **data, int data_count                  */
/*                            , int get_data_count, char *g_szDtlMsg )       */
/* Made by:                                                                  */
/* Description : 個別明細投信から契約口座情報を取得する                      */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* data            KOZA_DATA*   I/O  構造体ポインタ                          */
/* g_szDtlMsg      char*        I/O  事象詳細文字列                          */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 挿入エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int getToshin( KOZA_DATA **data, int data_count, char *g_szDtlMsg )
{

    /* TF_個別明細投信口座から契約口座情報を取得する */
    int getCount = 0;
    
    memset(sqlcmd_local, 0x00, sizeof(sqlcmd_local));
    strcpy(sqlcmd_local, "SELECT ");    
    strcat(sqlcmd_local, "TRIM(店番), ");
    strcat(sqlcmd_local, "科目ID, ");
    strcat(sqlcmd_local, "口座番号, ");
    strcat(sqlcmd_local, "口座開設年月日, ");
    strcat(sqlcmd_local, "CASE WHEN 店番 IN ( ");
    strcat(sqlcmd_local, BANK_SHITEN);
    strcat(sqlcmd_local, " ) THEN '");
    strcat(sqlcmd_local, FLG_ON);
    strcat(sqlcmd_local, "' ELSE '' END ");
    strcat(sqlcmd_local, "FROM ");
    strcat(sqlcmd_local, "TF_個別明細投信口座 ");
    strcat(sqlcmd_local, "WHERE ");
    /* %03 MOD START */
    //バインド変数対応
    strcat(sqlcmd_local, "CIFNO = :h_CIFNO ");
    //strcat(sqlcmd_local, "CIFNO = ");
    //strcat(sqlcmd_local, "'");
    //strcat(sqlcmd_local, h_CIFNO);    
    //strcat(sqlcmd_local, "' "); 
    /* %03 MOD END */
    strcat(sqlcmd_local, "AND 店番 NOT IN ( ");
    strcat(sqlcmd_local, TENBAN_CC_HONNBU);
    strcat(sqlcmd_local, " ) ");
    strcat(sqlcmd_local, "AND 振込銀行ID = ");
    strcat(sqlcmd_local, BANK_ID_JIGYOU);
    strcat(sqlcmd_local, " ");
    if( strncmp(h_ZentenFlg, FLG_ON, 1) != 0 ){
        /* %03 MOD START */
        //バインド変数対応
        strcat(sqlcmd_local, "AND ( 店番 = :h_TBMoushikomiten ");
        //strcat(sqlcmd_local, "AND ( 店番 = ");
        //strcat(sqlcmd_local, "'");
        //strcat(sqlcmd_local, h_TBMoushikomiten);    
        //strcat(sqlcmd_local, "' "); 
        /* %03 MOD END */
        /* %04 MOD START */
        /* strcat(sqlcmd_local, "OR ( 店番 IN ( "); */
        /* strcat(sqlcmd_local, BANK_SHITEN); */
        /* strcat(sqlcmd_local, " ) "); */
        /* strcat(sqlcmd_local, "AND 口座開設年月日 >= "); */
        /* strcat(sqlcmd_local, YAKKAN_DATE); */
        /* strcat(sqlcmd_local, " ) ) "); */
        strcat(sqlcmd_local, "OR 口座開設年月日 >= ");
        strcat(sqlcmd_local, YAKKAN_DATE);
        strcat(sqlcmd_local, " ) ");
        /* %04 MOD END */
    }
    strcat(sqlcmd_local, "AND 科目ID = '");
    strcat(sqlcmd_local, KAMOKU_FUTSU_TOSHIN);
    strcat(sqlcmd_local, "' ORDER  BY 口座開設年月日");
    
    G_POSITION = __LINE__;
    EXEC SQL PREPARE sqlcommand_toshin FROM :sqlcmd_local;
    if( sqlca.sqlcode != 0 ){
        sprintf( g_szDtlMsg,
                "TF_個別明細投信口座の検索(PREPARE)に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err( m$emb_error, sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err( m$sql_statment, sqlca.sqlcode, "個別明細投信口座の取得(PREPARE)に失敗", NULL, NULL, G_STATION );
        return NODATA;
    }

    G_POSITION = __LINE__;
    EXEC SQL DECLARE CUR_TOUSHIN CURSOR FOR sqlcommand_toshin;  
        
    if( sqlca.sqlcode < 0 ) {
        sprintf( g_szDtlMsg,
                "TF_個別明細投信口座の検索(DECLARE)に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err( m$emb_error, sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err( m$sql_statment, sqlca.sqlcode, "個別明細投信口座の取得(DECLARE)に失敗", NULL, NULL, G_STATION );
        return NODATA;
    }

    G_POSITION = __LINE__;
    /* %03 MOD START */
    //バインド変数対応
    //EXEC SQL OPEN CUR_TOUSHIN;
    if( strncmp(h_ZentenFlg, FLG_ON, 1) != 0 ){
        EXEC SQL OPEN CUR_TOUSHIN USING :h_CIFNO, :h_TBMoushikomiten;
    } else {
        EXEC SQL OPEN CUR_TOUSHIN USING :h_CIFNO;
    }
    /* %03 MOD START */

    if( sqlca.sqlcode < 0 ) {
        sprintf( g_szDtlMsg,
                "カーソル(CUR_TOUSHIN)オープン・エラー(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                      sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        return NODATA;
    }

    i = data_count;
    
     while (1)
    {
        /* %05 DEL START */ 
        /* 配列の最大件数を超えた場合は処理を終了する */
        //if( i >= MAX_DATA){
        //    /* %04 ADD START */
        //    strcpy(accntNoMaxDataFlg, FLG_ON);
        //    /* %04 ADD END */
        //    break;
        //}
        /* %05 DEL END */ 

        memset( h_BranchId,                 0x00, sizeof(h_BranchId) );
        memset( h_AccntType,                0x00, sizeof(h_AccntType) );
        memset( h_AccntNo,                  0x00, sizeof(h_AccntNo) );
        memset( h_StartDate,                0x00, sizeof(h_StartDate) );
        memset( h_IsBankFlg,                0x00, sizeof(h_IsBankFlg) );
        
        G_POSITION = __LINE__;
        EXEC SQL FETCH CUR_TOUSHIN INTO 
            :h_BranchId      :h_ind_BranchId,
            :h_AccntType     :h_ind_AccntType,      
            :h_AccntNo       :h_ind_AccntNo,       
            :h_StartDate     :h_ind_StartDate,           
            :h_IsBankFlg     :h_ind_IsBankFlg        
            ;
            
        if (sqlca.sqlcode == ORA_NOF){
            break;
        }
        else if (sqlca.sqlcode < 0){
            send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_TOUSHIN) FETCHエラー", NULL, NULL, G_STATION);
            return NODATA;
        }
        /* %05 ADD START */ 
        /* 配列の最大件数を超えた場合は処理を終了する */
        else if( i >= MAX_DATA){
            strcpy(accntNoMaxDataFlg, FLG_ON);
            break;
        }
        /* %05 ADD END */ 
        
        /* 生年月日と口座開設年月日から年齢を算出し、 
        ** 20歳以上の場合は利用口座の登録対象のため、
        */
        if( chkDateOfBirth( h_StartDate ) == TRUE){
            strcpy(data[i]->branch_id, h_BranchId);
            strcpy(data[i]->accnt_type, "9000");
            strcpy(data[i]->accnt_no, h_AccntNo);
            strcpy(data[i]->shikumi_yokin, "");
            strcpy(data[i]->tsusho_kbn_id, "");
            strcpy(data[i]->tsuka_ryakusyo, "JPY");
            strcpy(data[i]->start_date, h_StartDate);
            strcpy(data[i]->flg_toshin, "1");
            if( strcmp( data[i]->branch_id, h_TBMoushikomiten ) == 0){
                strcpy(data[i]->flg_mousikomiten, FLG_ON);
            }
            else {
                strcpy(data[i]->flg_mousikomiten, "");
            }
            strcpy(data[i]->flg_not_ins, "");
            strcpy(data[i]->flg_is_bank, h_IsBankFlg);
            data[i]->sort_kamoku = 1;
            data[i]->flg_no_furikomisaki = 0;
            /* %02 ADD START */
            i++;
            getCount++;
            /* %02 ADD END */
        }
        /* %02 DEL START */
        /* i++; */
        /* getCount++; */
        /* %02 DEL END */
    }
    
    G_POSITION = __LINE__;
    EXEC SQL CLOSE CUR_TOUSHIN;
    
    return getCount;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*          void chgAccntType( KOZA_DATA **data )                            */
/* Made by:                                                                  */
/* Description : 科目IDを変換する                                            */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* data            KOZA_DATA*   I/O  構造体ポインタ                          */
/* g_szDtlMsg      char*        I/O  事象詳細文字列                          */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 挿入エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static void chgAccntType( KOZA_DATA **data, int count_all )
{
    int len = 0;

    /* 
     * 科目IDの変換処理
     * 併せてソート順を設定
     */
    for(i = 0; i < count_all; i++){
        
       /* 比較前に文字列の空白を除去 */
       if(data[i]->accnt_type != NULL || strcmp( data[i]->accnt_type, "" ) != 0 ){
        len =Trim( data[i]->accnt_type );
       }
       if(data[i]->tsusho_kbn_id != NULL || strcmp( data[i]->tsusho_kbn_id, "" ) != 0 ){
        len =Trim( data[i]->tsusho_kbn_id );
       }
       
       /* 投信口座の場合 */ 
       if( strcmp( data[i]->accnt_type, "9000" ) == 0 ){
        data[i]->sort_kamoku = 6;
       }

       /* 普通預金の場合 */ 
       else if( strcmp( data[i]->accnt_type, "1221" ) == 0 ){
           strcpy(data[i]->accnt_type, "2050");
        data[i]->sort_kamoku = 1;
       }
       
       /* 仕組預金の場合 */ 
       else if( strcmp( data[i]->accnt_type, "2011" ) == 0 
           && strcmp( data[i]->shikumi_yokin, "1" ) == 0 
           && ( strcmp( data[i]->tsusho_kbn_id, "2" ) == 0 )
           ){
           strcpy(data[i]->accnt_type, "2039");
        data[i]->sort_kamoku = 3;
       }
       else if( strcmp( data[i]->accnt_type, "2000" ) == 0 
           && strcmp( data[i]->shikumi_yokin, "1" ) == 0 
           && ( strcmp( data[i]->tsusho_kbn_id, "2" ) == 0 )
           ){
           strcpy(data[i]->accnt_type, "2039");
        data[i]->sort_kamoku = 3;
       }

       /* 個人向け外貨普通預金の場合 */ 
       else if( strcmp( data[i]->accnt_type, "702" ) == 0 ){
           strcpy(data[i]->accnt_type, "2750");
        data[i]->sort_kamoku = 4;
       }

       /* 個人向け外貨定期預金の場合 */ 
       else if( strcmp( data[i]->accnt_type, "711" ) == 0 ){
           strcpy(data[i]->accnt_type, "2730");
        data[i]->sort_kamoku = 5;
       }

       /* 定期預金の場合 */ 
       else if( strncmp(h_ZentenFlg, FLG_ON, 1) == 0 || strcmp( data[i]->flg_mousikomiten, FLG_ON ) == 0 ){
           /* BANK支店の場合 */
           if( strcmp( data[i]->flg_is_bank, FLG_ON ) == 0 ){
               if( strcmp( data[i]->accnt_type, "2011" ) == 0 
                   && strcmp( data[i]->shikumi_yokin, "0" ) == 0 ){
                   strcpy(data[i]->accnt_type, "2030");
                   data[i]->sort_kamoku = 2;
               }
               else if( strcmp( data[i]->accnt_type, "2012" ) == 0 ){
                   strcpy(data[i]->accnt_type, "2030");
                   data[i]->sort_kamoku = 2;
               }
               else if( strcmp( data[i]->accnt_type, "2021" ) == 0 ){
                   strcpy(data[i]->accnt_type, "2030");
                   data[i]->sort_kamoku = 2;
               }
               else if( strcmp( data[i]->accnt_type, "2098" ) == 0 ){
                   strcpy(data[i]->accnt_type, "2030");
                   data[i]->sort_kamoku = 2;
               }
               else if( strcmp( data[i]->accnt_type, "2000" ) == 0 
                   && strcmp( data[i]->shikumi_yokin, "0" ) == 0 ){
                   strcpy(data[i]->accnt_type, "2030");
                   data[i]->sort_kamoku = 2;
               }

               /* 登録対象外の場合 */ 
               else {
				   /* %06 DELETE START */
                   /* %04 ADD START */
                   /* 登録対象外の場合はメッセージを出力する */
                   //sprintf( g_szDtlMsg, "【翌営業日連絡】登録対象外の科目IDです。店：%s、科目ID：%s、口座番号：%s"
                   //    , data[i]->branch_id, data[i]->accnt_type, data[i]->accnt_no);
                   //send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
                   /* %04 ADD END */
				   /* %06 DELETE END */
                   /* 対象外フラグを立てる */
                   strcpy(data[i]->flg_not_ins, FLG_ON);
               }
           }
           
           /* BANK支店以外の場合 */
           else {
               if( strcmp( data[i]->accnt_type, "2011" ) == 0 
                   && strcmp( data[i]->shikumi_yokin, "0" ) == 0 
                   && strcmp( data[i]->tsusho_kbn_id, "1" ) == 0 ){
                   strcpy(data[i]->accnt_type, "2030");
                   data[i]->sort_kamoku = 2;
               }
               else if( strcmp( data[i]->accnt_type, "2012" ) == 0 
                   && strcmp( data[i]->tsusho_kbn_id, "1" ) == 0 ){
                   strcpy(data[i]->accnt_type, "2030");
                   data[i]->sort_kamoku = 2;
               }
               else if( strcmp( data[i]->accnt_type, "2021" ) == 0 
                   && strcmp( data[i]->tsusho_kbn_id, "1" ) == 0 ){
                   strcpy(data[i]->accnt_type, "2030");
                   data[i]->sort_kamoku = 2;
               }
               else if( strcmp( data[i]->accnt_type, "2098" ) == 0 
                   && strcmp( data[i]->tsusho_kbn_id, "1" ) == 0 ){
                   strcpy(data[i]->accnt_type, "2030");
                   data[i]->sort_kamoku = 2;
               }
               else if( strcmp( data[i]->accnt_type, "2000" ) == 0 
                   && strcmp( data[i]->shikumi_yokin, "0" ) == 0 
                   && strcmp( data[i]->tsusho_kbn_id, "1" ) == 0 ){
                   strcpy(data[i]->accnt_type, "2030");
                   data[i]->sort_kamoku = 2;
               }

               /* 登録対象外の場合 */ 
               else {
				   /* %06 DELETE START */
                   /* %04 ADD START */
                   /* 登録対象外の場合はメッセージを出力する */
                   //sprintf( g_szDtlMsg, "【翌営業日連絡】登録対象外の科目IDです。店：%s、科目ID：%s、口座番号：%s"
                   //    , data[i]->branch_id, data[i]->accnt_type, data[i]->accnt_no);
                   //send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
                   /* %04 ADD END */
				   /* %06 DELETE END */
                   /* 対象外フラグを立てる */
                   strcpy(data[i]->flg_not_ins, FLG_ON);
               }
           }
       }
       else if( strncmp(h_ZentenFlg, FLG_ON, 1) != 0 && strcmp( data[i]->flg_mousikomiten, FLG_ON ) != 0 ) {

           if( strcmp( data[i]->accnt_type, "2011" ) == 0 
               && strcmp( data[i]->shikumi_yokin, "0" ) == 0 ){
               strcpy(data[i]->accnt_type, "2030");
               data[i]->sort_kamoku = 2;
           }
           else if( strcmp( data[i]->accnt_type, "2012" ) == 0 ){
               strcpy(data[i]->accnt_type, "2030");
               data[i]->sort_kamoku = 2;
           }
           else if( strcmp( data[i]->accnt_type, "2021" ) == 0 ){
               strcpy(data[i]->accnt_type, "2030");
               data[i]->sort_kamoku = 2;
           }
           else if( strcmp( data[i]->accnt_type, "2098" ) == 0 ){
               strcpy(data[i]->accnt_type, "2030");
               data[i]->sort_kamoku = 2;
           }
           else if( strcmp( data[i]->accnt_type, "2000" ) == 0 
               && strcmp( data[i]->shikumi_yokin, "0" ) == 0 ){
               strcpy(data[i]->accnt_type, "2030");
               data[i]->sort_kamoku = 2;
           }

           /* 登録対象外の場合 */ 
           else {
               /* %06 DELETE START */
               /* %04 ADD START */
               /* 登録対象外の場合はメッセージを出力する */
               //sprintf( g_szDtlMsg, "【翌営業日連絡】登録対象外の科目IDです。店：%s、科目ID：%s、口座番号：%s"
               //    , data[i]->branch_id, data[i]->accnt_type, data[i]->accnt_no);
               //send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
               /* %04 ADD END */
			   /* %06 DELETE END */
               /* 対象外フラグを立てる */
               strcpy(data[i]->flg_not_ins, FLG_ON);
           }
       }

       /* 登録対象外の場合 */ 
       else {
		   /* %06 DELETE START */
           /* %04 ADD START */
           /* 登録対象外の場合はメッセージを出力する */
           //sprintf( g_szDtlMsg, "【翌営業日連絡】登録対象外の科目IDです。店：%s、科目ID：%s、口座番号：%s"
           //    , data[i]->branch_id, data[i]->accnt_type, data[i]->accnt_no);
           //send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
           /* %04 ADD END */
		   /* %06 DELETE END */
           /* 対象外フラグを立てる */
           strcpy(data[i]->flg_not_ins, FLG_ON);
       }
       
    }
}

/**
 * 文字列の先頭と末尾にある空白を削除する
 * @param[in] s  対象文字列
 * @return 削除した空白の数を返す
 */
static int Trim(char *str) {
    int i = 0;
    int count = 0;

    /* 空ポインタの場合 */
    if ( str == NULL ) { 
        return -1;
    }

    /* 文字列長を取得する */
    i = strlen(str);

    /* 末尾から順に空白でない位置を探す */
    while ( --i >= 0 && str[i] == ' ' ) count++;

    /* 終端ナル文字を付加する */
    str[i+1] = '\0';

    /* 先頭から順に空白でない位置を探す */
    i = 0;
    while ( str[i] != '\0' && str[i] == ' ' ) i++;
    strcpy(str, &str[i]);

    return i + count;
}


/* --------------- ソート用の関数 ------------------- */
int compare( const void *p, const void *q ){
    int cmp = 0;
    
    /* 投信フラグで比較 */
    cmp = compareFlgToshin( p, q );
    if( cmp != 0){
        return cmp;
    }
    
    /* 申込店フラグで比較 */
    cmp = compareFlgMousikomiten( p, q );
    if(cmp != 0){
        return cmp;
    }
    
    /* 科目IDで比較 */
    cmp = compareKamoku( p, q );
    if(cmp != 0){
        return cmp;
    }
    
    /* 日付で比較 */
    cmp = compareStartDate( p, q );
    if(cmp != 0){
        return cmp;
    }
    
    /* 口座番号で比較 */
    return compareKozaNo( p, q );
}
int compareKozaNo( const void *p, const void *q ) {
    /* 口座番号を比較し大きければ正、小さければ負、同値であれば0を返す */
    int x = atoi( ((KOZA_DATA*)p)->accnt_no );
    int y = atoi( ((KOZA_DATA*)q)->accnt_no );
    
    return x - y;
}
int compareStartDate( const void *p, const void *q ) {
    /* 日付を比較し大きければ正、小さければ負、同値であれば0を返す */
    int x = atoi( ((KOZA_DATA*)p)->start_date );
    int y = atoi( ((KOZA_DATA*)q)->start_date );
  
    return x - y;
}
int compareKamoku( const void *p, const void *q ) {
    /* ソート順（科目）を比較し大きければ正、小さければ負、同値であれば0を返す */
    int comp = ((KOZA_DATA*)p)->sort_kamoku - ((KOZA_DATA*)q)->sort_kamoku;
    
    return comp;
}
int compareFlgMousikomiten( const void *p, const void *q ) {
    /* 申込店フラグを数値化して比較し大きければ正、小さければ負、同値であれば0を返す */
    int x = 0; 
    int y = 0; 
    if(strcmp( ((KOZA_DATA*)p)->flg_mousikomiten, FLG_ON ) == 0){
        x = 1;
    }
    if(strcmp( ((KOZA_DATA*)q)->flg_mousikomiten, FLG_ON ) == 0){
        y = 1;
    }
    
    return y - x ;
}
int compareFlgToshin( const void *p, const void *q ) {
    /* 投信フラグを比較し大きければ正、小さければ負、同値であれば0を返す */
    int x = atoi( ((KOZA_DATA*)p)->flg_toshin );
    int y = atoi( ((KOZA_DATA*)q)->flg_toshin );
    
    return x - y;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*          int chkBeforeIns( KOZA_DATA *data, char *h_ContractorID          */
/*                           , char *g_szDtlMsg )                            */
/* Made by:                                                                  */
/* Description : 口座登録処理前の各種チェックを行う                          */
/* Arguments:                                                                */
/*   Name               Type/Length  I/O    Content                          */
/* -------------------  -----------  ---  ------------------------------     */
/* data                 KOZA_DATA*   I/O  構造体ポインタ                     */
/* g_szDtlMsg           char*        I/O  事象詳細文字列                     */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 挿入エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int chkBeforeIns( KOZA_DATA *data, char *h_ContractorID, char *g_szDtlMsg )
{

    int rc;
    int max_koza_count = MAX_KOZA_COUNT;

    memset( h_AccntNo,                0x00, sizeof(h_AccntNo) );
    memset( h_AccntType,              0x00, sizeof(h_AccntType) );
    memset( h_BranchId,               0x00, sizeof(h_BranchId) );
    memset( h_TsukaRyakusyo,          0x00, sizeof(h_TsukaRyakusyo) );
    
    /* 利用口座の存在チェック */
    h_TB_COUNT = 0;      /* テーブルカウント */
    strcpy(h_AccntNo, data->accnt_no);                 /* 口座番号 */
    strcpy(h_AccntType, data->accnt_type);             /* 科目ID   */
    strcpy(h_BranchId, data->branch_id);               /* 店番     */
    strcpy(h_TsukaRyakusyo, data->tsuka_ryakusyo);     /* 通貨ID   */
    
    G_POSITION = __LINE__;

    EXEC SQL SELECT COUNT(*) INTO :h_TB_COUNT
    FROM TFB_テレバン契約口座
    WHERE 店番 = :h_BranchId
        AND 口座番号 = :h_AccntNo
        AND 科目ID = :h_AccntType
        AND 通貨ID = :h_TsukaRyakusyo
        /* %04 ADD START */
        AND 契約者番号 = :h_ContractorID
        AND CIFNO  = :h_CIFNO
        AND 口座種類ID = '00' 
        /* %04 ADD END */
    ; 
   
    if( sqlca.sqlcode != 0 ) {
        sprintf( g_szDtlMsg,
                "TFB_テレバン契約口座テーブルの検索に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err ( m$sql_statment, sqlca.sqlcode, "SELECT TFB_テレバン契約口座", NULL, NULL, G_STATION);
        return(ERROR);
    }
    else if (h_TB_COUNT >= 1){
        return(ERROR);
    }
    
    /* 投信口座の場合 */
    if( strcmp( data->accnt_type, "9000" ) == 0 ){
        
        /* 既に投信口座が登録されているかチェック */
        h_TB_COUNT = 0;      /* テーブルカウント */
        
        G_POSITION = __LINE__;
        EXEC SQL SELECT COUNT(*) INTO :h_TB_COUNT
        FROM TFB_テレバン契約口座
        WHERE 契約者番号 = :h_ContractorID
            AND 投信口座区分 = '1'
        ; 
   
        if( sqlca.sqlcode != 0 ) {
            sprintf( g_szDtlMsg,
                    "TFB_テレバン契約口座テーブルの検索に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                           sqlca.sqlcode, h_ContractorID, h_CIFNO);
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
            send_err ( m$sql_statment, sqlca.sqlcode, "SELECT TFB_テレバン契約口座", NULL, NULL, G_STATION);
            return(ERROR);
        }
        else if (h_TB_COUNT >= 1){
            sprintf( g_szDtlMsg,
                    "【翌営業日連絡】投信口座は既に設定済です。口座番号:%s、CIFNO:%s",
                           h_AccntNo, h_CIFNO);
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
            return(ERROR);
        }
        
        /* 普通預金が利用口座に登録済かチェック */
        if ( (rc = chkToshinKozaState( data, g_szDtlMsg )) != NORMAL ){
            return(ERROR);
        }
        
        /* 振込先預金を新規登録する場合は、最大登録件数が少なくなる */
        if( data->flg_no_furikomisaki == 1 ){
            max_koza_count--;
        
        }
    }
    
    /* 利用口座の最大登録件数チェック */
    h_TB_COUNT = 0;
    
    G_POSITION = __LINE__;
    EXEC SQL SELECT COUNT(*) INTO :h_TB_COUNT
    FROM TFB_テレバン契約口座
    WHERE 契約者番号 = :h_ContractorID
    ;
    if( sqlca.sqlcode != 0 ) {
        sprintf( g_szDtlMsg,
                "TFB_テレバン契約口座テーブルの検索に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID, h_CIFNO);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err ( m$sql_statment, sqlca.sqlcode, "SELECT TFB_テレバン契約口座", NULL, NULL, G_STATION);
        return(ERROR);
    }
    else if (h_TB_COUNT >= max_koza_count){
        sprintf( g_szDtlMsg,
               "【翌営業日連絡】利用口座の最大登録件数を超過しました。口座番号:%s、CIFNO:%s ",
               h_AccntNo, h_CIFNO);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }
    
    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*          int chkToshinKozaState( KOZA_DATA *data, char *g_szDtlMsg )      */
/* Made by:                                                                  */
/* Description : 投信口座のチェックを行う                                    */
/* Arguments:                                                                */
/*   Name               Type/Length  I/O    Content                          */
/* -------------------  -----------  ---  ------------------------------     */
/* data                 KOZA_DATA*   I/O  構造体ポインタ                     */
/* g_szDtlMsg           char*        I/O  事象詳細文字列                     */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 挿入エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int chkToshinKozaState( KOZA_DATA *data, char *g_szDtlMsg )
{
    /*
    **  TF_個別明細投信口座テーブルから情報を取得する。
    */
    
    memset( h_AccntNo,                   0x00, sizeof(h_AccntNo) );
    memset( h_AccntType,                 0x00, sizeof(h_AccntType) );
    memset( h_AccntTypeTsn,              0x00, sizeof(h_AccntTypeTsn) );
    memset( h_FurikomiShitenID,          0x00, sizeof(h_FurikomiShitenID) );
    memset( h_AccntNoTsn,                0x00, sizeof(h_AccntNoTsn) );
    
    strcpy(h_AccntNo, data->accnt_no);                /* 口座番号       */
    strcpy(h_AccntType, KAMOKU_FUTSU);                /* 科目ID         */
    strcpy(h_AccntTypeTsn, KAMOKU_FUTSU_TOSHIN);      /* 科目ID（投信） */
    
    G_POSITION = __LINE__;
    EXEC SQL SELECT 振込支店ID, 振込口座
        INTO                
            :h_FurikomiShitenID :h_ind_FurikomiShitenID
            , :h_AccntNoTsn :h_ind_AccntNoTsn
        FROM                
            TF_個別明細投信口座        
        WHERE
            CIFNO =  :h_CIFNO
    ;
        
    if( sqlca.sqlcode != 0 ) {
        sprintf( g_szDtlMsg,
                "TF_個別明細投信口座テーブルの検索に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s、科目ID：%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO, h_AccntTypeTsn);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err ( m$sql_statment, sqlca.sqlcode, "SELECT TF_個別明細投信口座", NULL, NULL, G_STATION);
        return(ERROR);
    }
    
    /*
    **  投信口座に紐づける普通預金口座の存在チェック
    */
    h_TB_COUNT = 0;      /* テーブルカウント */
    
    G_POSITION = __LINE__;
    EXEC SQL SELECT COUNT(*) INTO :h_TB_COUNT
    FROM TFB_テレバン契約口座
    WHERE CIFNO =  :h_CIFNO
        AND 店番 = :h_FurikomiShitenID
        AND 口座番号 = :h_AccntNoTsn
        AND 科目ID = :h_AccntType
    ; 
    
    if( sqlca.sqlcode != 0 ) {
        sprintf( g_szDtlMsg,
                "TFB_テレバン契約口座テーブルの検索に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err ( m$sql_statment, sqlca.sqlcode, "SELECT TFB_テレバン契約口座", NULL, NULL, G_STATION);
        return(ERROR);
    }
    
    if( h_TB_COUNT == 0 ) {
        data->flg_no_furikomisaki = 1;
    }    
    
    return(NOMAL);
}

/*****************************************************************************/
/* Function Name:                                                            */
/*          int insKoza( KOZA_DATA *data, char *h_ContractorID               */
/*                       , char *g_szDtlMsg )                                */
/* Made by:                                                                  */
/* Description : TFB_テレバン契約口座登録処理                                */
/* Arguments:                                                                */
/*   Name               Type/Length  I/O    Content                          */
/* -------------------  -----------  ---  ------------------------------     */
/* data                 KOZA_DATA*   I/O  構造体配列                         */
/* g_szDtlMsg           char*        I/O  事象詳細文字列                     */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 挿入エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int insKoza( KOZA_DATA *data, char *h_ContractorID, char *g_szDtlMsg )
{

    /* TFB_テレバン契約口座登録処理 */
    int rc;
    int len;
    
    memset( h_ins_ContractorID,         0x00, sizeof(h_ins_ContractorID) );
    memset( h_ins_BranchId,             0x00, sizeof(h_ins_BranchId) );
    memset( h_ins_CIFNO,                0x00, sizeof(h_ins_CIFNO) );
    memset( h_ins_AccntType,            0x00, sizeof(h_ins_AccntType) );
    memset( h_ins_AccntNo,              0x00, sizeof(h_ins_AccntNo) );
    memset( h_ins_TsukaId,              0x00, sizeof(h_ins_TsukaId) );
    
    strcpy(h_ins_ContractorID, h_ContractorID);
    strcpy(h_ins_BranchId, data->branch_id);
    strcpy(h_ins_CIFNO, h_CIFNO);
    strcpy(h_ins_AccntType, data->accnt_type);
    strcpy(h_ins_AccntNo, data->accnt_no);
    strcpy(h_ins_TsukaId, data->tsuka_ryakusyo);
    
    /*  データINSERT    */
    G_POSITION = __LINE__;
    EXEC SQL INSERT INTO TFB_テレバン契約口座
    (   契約者番号,
        口座登録番号,
        店番,
        CIFNO,
        科目ID,
        口座種類ID,
        口座番号,
        口座口番号,
        通貨ID,
        代表口座区分,
        投信口座区分,
        設定日付,
        解除日付,
        登録日,
        登録者,
        最終更新日,
        最終更新者

    ) VALUES (
        :h_ins_ContractorID,
        NULL,
        :h_ins_BranchId,
        :h_ins_CIFNO,
        :h_ins_AccntType,
        '00',
        :h_ins_AccntNo,
        NULL,
        :h_ins_TsukaId,
        '0',
        '0',
        TO_CHAR(SYSDATE,'YYYYMMDD'),
        NULL,
        SYSDATE,
        'SPV',
        SYSDATE,
        'SPV'
    );
    
    if ( sqlca.sqlcode < 0 ){
        sprintf( g_szDtlMsg,
                 "TFB_テレバン契約口座のINSERTに失敗しました。(sqlca.sqlcode=%d)",
                 sqlca.sqlcode );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err ( m$sql_statment, sqlca.sqlcode, "INSERT TFB_テレバン契約口座", NULL, NULL, G_STATION);
        return ERROR;
    }     
    
    /* 投信口座登録の場合は普通預金口座の投信口座区分を更新する */
    if ( strcmp( h_ins_AccntType, "9000" ) == 0 ){
        
        if( (rc = updFurikomiSaki( data, g_szDtlMsg )) != NORMAL ){
            return ERROR;
        }
    }
    
    /* %02 ADD START */
    /* TFB_テレバン契約属性が未更新の場合は更新する */
    if( strcmp( keiyakuZokuseiUpdFlg, FLG_ON ) != 0 ){
        if( (rc = updKeiyakuZokusei( g_szDtlMsg )) == NORMAL ){
            strcpy(keiyakuZokuseiUpdFlg, FLG_ON);
        } else {
            return ERROR;
        }
    }
    /* %02 ADD END */
    
    return NOMAL;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*          int updFurikomiSaki( KOZA_DATA *data, char *g_szDtlMsg )         */
/* Made by:                                                                  */
/* Description : 投信口座区分の更新を行う                                    */
/* Arguments:                                                                */
/*   Name               Type/Length  I/O    Content                          */
/* -------------------  -----------  ---  ------------------------------     */
/* data                 KOZA_DATA*   I/O  構造体配列                         */
/* g_szDtlMsg           char*        I/O  事象詳細文字列                     */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 挿入エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int updFurikomiSaki( KOZA_DATA *data, char *g_szDtlMsg )
{
    /*
    **  TF_個別明細投信口座テーブルから情報を取得する。
    */
    
    memset( h_AccntNo,                   0x00, sizeof(h_AccntNo) );
    memset( h_AccntType,                 0x00, sizeof(h_AccntType) );
    memset( h_AccntTypeTsn,              0x00, sizeof(h_AccntTypeTsn) );
    memset( h_FurikomiShitenID,          0x00, sizeof(h_FurikomiShitenID) );
    memset( h_AccntNoTsn,                0x00, sizeof(h_AccntNoTsn) );
    memset( h_ins_ContractorID,          0x00, sizeof(h_ins_ContractorID) );
    memset( h_ins_CIFNO,                 0x00, sizeof(h_ins_CIFNO) );
    
    strcpy(h_AccntNo, data->accnt_no);                /* 口座番号       */
    strcpy(h_AccntType, KAMOKU_FUTSU);                /* 科目ID         */
    strcpy(h_AccntTypeTsn, KAMOKU_FUTSU_TOSHIN);      /* 科目ID（投信） */
    strcpy(h_ins_ContractorID, h_ContractorID);
    strcpy(h_ins_CIFNO, h_CIFNO);
    
    G_POSITION = __LINE__;
    EXEC SQL SELECT 振込支店ID, 振込口座
        INTO                
            :h_FurikomiShitenID :h_ind_FurikomiShitenID
            , :h_AccntNoTsn :h_ind_AccntNoTsn
        FROM                
            TF_個別明細投信口座        
        WHERE
            CIFNO =  :h_CIFNO
    ;
        
    if( sqlca.sqlcode != 0 ) {
        sprintf( g_szDtlMsg,
                "TF_個別明細投信口座テーブルの検索に失敗しました。(sqlca.sqlcode=%d) 契約者番号:%s、CIFNO:%s",
                       sqlca.sqlcode, h_ContractorID,h_CIFNO);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err ( m$sql_statment, sqlca.sqlcode, "SELECT TF_個別明細投信口座", NULL, NULL, G_STATION);
        return(ERROR);
    }
    
    if( data->flg_no_furikomisaki == 1 ){
        /*  データINSERT    */
        G_POSITION = __LINE__;
        EXEC SQL INSERT INTO TFB_テレバン契約口座
        (   契約者番号,
            口座登録番号,
            店番,
            CIFNO,
            科目ID,
            口座種類ID,
            口座番号,
            口座口番号,
            通貨ID,
            代表口座区分,
            投信口座区分,
            設定日付,
            解除日付,
            登録日,
            登録者,
            最終更新日,
            最終更新者

        ) VALUES (
            :h_ins_ContractorID,
            NULL,
            :h_FurikomiShitenID,
            :h_ins_CIFNO,
            :h_AccntType,
            '00',
            :h_AccntNoTsn,
            NULL,
            'JPY',
            '0',
            '1',
            TO_CHAR(SYSDATE,'YYYYMMDD'),
            NULL,
            SYSDATE,
            'SPV',
            SYSDATE,
            'SPV'
        );
        
        if ( sqlca.sqlcode < 0 ){
            sprintf( g_szDtlMsg,
                     "TFB_テレバン契約口座のINSERTに失敗しました。(sqlca.sqlcode=%d)",
                     sqlca.sqlcode );
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
            send_err ( m$sql_statment, sqlca.sqlcode, "INSERT TFB_テレバン契約口座", NULL, NULL, G_STATION);
            return ERROR;
        }
    }else{
        /*  データUPDATE    */
        G_POSITION = __LINE__;
        EXEC SQL UPDATE TFB_テレバン契約口座 
            SET 投信口座区分 = '1'
            WHERE CIFNO =  :h_CIFNO
                AND 店番 = :h_FurikomiShitenID
                AND 口座番号 = :h_AccntNoTsn
                AND 科目ID = :h_AccntType
        ;

        if ( sqlca.sqlcode < 0 ){
            sprintf( g_szDtlMsg,
                     "TFB_テレバン契約口座のUPDATEに失敗しました。(sqlca.sqlcode=%d)",
                     sqlca.sqlcode );
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
            send_err ( m$sql_statment, sqlca.sqlcode, "UPDATE TFB_テレバン契約口座", NULL, NULL, G_STATION);
            return ERROR;
        }
    }
    
    return(NOMAL);
}

/* %02 ADD START */
/*****************************************************************************/
/* Function Name:                                                            */
/*          int updKeiyakuZokusei( char *g_szDtlMsg )                        */
/* Made by:                                                                  */
/* Description : TFB_テレバン契約属性テーブルの更新を行う                    */
/* Arguments:                                                                */
/*   Name               Type/Length  I/O    Content                          */
/* -------------------  -----------  ---  ------------------------------     */
/* g_szDtlMsg           char*        I/O  事象詳細文字列                     */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 挿入エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int updKeiyakuZokusei( char *g_szDtlMsg )
{
    /*
    **  TFB_テレバン契約属性テーブルの更新を行う。
    */
    /*  データUPDATE    */
    G_POSITION = __LINE__;
    EXEC SQL UPDATE TFB_テレバン契約属性 
        SET 承認日 = SYSDATE
            ,承認者 = 'SPV'
            ,処理区分 = '1'
            ,最終更新日 = SYSDATE
            ,最終更新者 = 'SPV'
         WHERE 契約者番号 = :h_ContractorID
        ;

    if ( sqlca.sqlcode < 0 ){
        sprintf( g_szDtlMsg,
                 "TFB_テレバン契約属性のUPDATEに失敗しました。(sqlca.sqlcode=%d)",
                 sqlca.sqlcode );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err ( m$sql_statment, sqlca.sqlcode, "UPDATE TFB_テレバン契約属性", NULL, NULL, G_STATION);
        return ERROR;
    }
    return(NOMAL);
}
/* %02 ADD END */

/*****************************************************************************/
/* Function Name:                                                            */
/*          int chkDateOfBirth( char *start_date )                           */
/* Made by:                                                                  */
/* Description : 生年月日と口座開設年月日から年齢を算出する                  */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* start_date      char*        I/O  口座開設年月日                          */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    TRUE       : 1                                                         */
/*    FALSE      : 0                                                         */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int chkDateOfBirth( char *start_date )
{
    ///* 生年月日と当バッチ処理日から年齢を算出する */
    /* 生年月日と口座開設年月日から年齢を算出する */
    int age = 0;
    //int time_now = 0;
    //time_t timer = time(NULL);
    //struct tm *date = localtime(&timer); 
    //time_now = ( date->tm_year + 1900 ) * 10000 
    //    + ( date->tm_mon + 1 ) * 100 
    //    + date->tm_mday
    //    ; 
    //age = ( time_now - atoi(h_DateOfBirth) ) / 10000;
    age = ( atoi(start_date) - atoi(h_DateOfBirth) ) / 10000;
    /* %07 MOD START */
    //if(age < 20){
    if(age < 18){
    /* %07 MOD END */
        return FALSE;
    }
    return TRUE;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*     memoryFree( int count_all )                                           */
/* Made by:                                                                  */
/* Description:ＤＢのコミット                                                */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*  count_all      int          O    事象詳細文字列                          */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL : 正常                                                          */
/*    ERROR  : コミットエラー（システムエラー）                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int memoryFree( KOZA_DATA *data_1, KOZA_DATA **data_2, int count_all )
{
    /* メモリ開放 */
    if(data_2 != NULL){
        free(data_2);
    }
    data_2 = NULL;
    
    if(data_1 != NULL){
        free(data_1);
    }
    data_1 = NULL;
            
    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*     commit( void )                                                        */
/* Made by:                                                                  */
/* Description:ＤＢのコミット                                                */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*  g_szDtlMsg      *char         O    事象詳細文字列                        */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL : 正常                                                          */
/*    ERROR  : コミットエラー（システムエラー）                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int commit( VOID )
{

    /* ＤＢのコミット */
    G_POSITION = __LINE__;
    EXEC SQL COMMIT;
    if (sqlca.sqlcode < 0) {
        sprintf(g_szDtlMsg,
                "ＤＢのコミットに失敗しました。(CODE=%ld)",
                sqlca.sqlcode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return ERROR;
    }


    return NORMAL;
}



/*****************************************************************************/
/* Function Name:                                                            */
/*     rollback( void )                                                      */
/* Made by:                                                                  */
/* Description:ＤＢのロールバック                                            */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL : 正常                                                          */
/*    ERROR  : ロールバックエラー（システムエラー）                          */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int rollback( )
{
    
    /* ＤＢのロールバック */
    G_POSITION = __LINE__;
    EXEC SQL ROLLBACK WORK;
    if (sqlca.sqlcode < 0) {
        sprintf(g_szDtlMsg,
                "ＤＢのロールバックに失敗しました。(CODE=%ld)",
                sqlca.sqlcode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return ERROR;
    }

    return NORMAL;
}

