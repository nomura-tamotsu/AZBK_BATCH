/*==========================================================================*/
/* Copyright　Information Services International-Dentsu, Ltd.   　          */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : BANK・R−CC                                           */
/*                                                                          */
/* PROGRAM NAME     : 不要データ削除                                        */
/*                                                                          */
/* MODULE NAME      : RemoveOldData                                         */
/*                                                                          */
/* FUNCTION         : 保存期間が過ぎた各種データを削除する                  */
/*                                                                          */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POint      : Main Module.                                          */
/*                                                                          */
/* INPUT            : NONE                                                  */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 09/05/21 | K.Miyahara  | First Edition.                            */
/*==========================================================================*/
/*--------------------------------------------------------------------------*/
/* Standard include specification                                           */
/*--------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <errno.h>

/*--------------------------------------------------------------------------*/
/* User defined include specification                                       */
/*--------------------------------------------------------------------------*/
#include "common.h"
#include "msg.h"
#include "batchcommon.h"

EXEC SQL INCLUDE mbproc.h;
EXEC SQL INCLUDE TM_RetentionPeriod.h;

/*--------------------------------------------------------------------------*/
/*                           DEFINE STATEMENTS                              */
/*--------------------------------------------------------------------------*/


/*--------------------------------------------------------------------------*/
/*                           EXTERNAL DECLARES                              */
/*--------------------------------------------------------------------------*/
char    process_name[43];
char    g_szDtlMsg[256];                            /* 事象詳細文字列       */


EXEC SQL BEGIN DECLARE SECTION;
    char        sqlcmd[2048];               /* 動的SQL文                    */
    char        sqlcmd2[2048];              /* 動的SQL文2                   */
    int         month_term;                 /* 保存期間(符号付き)           */
    varchar     delete_date[9];             /* 削除基準日                   */
EXEC SQL END DECLARE SECTION;

/*--------------------------------------------------------------------------*/
/*                          STRUCT DECLARATIONS                             */
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*                           SUBROUTNE DEFINITION                           */
/*--------------------------------------------------------------------------*/
extern int send_err();
extern int db_connect();
extern void errhandler();


/****************************************************************************/
/*                                                                          */
/*                            PROCEDURE DIVISION                            */
/*                                                                          */
/****************************************************************************/

/*--------------------------------------------------------------------------*/
/*                              MAIN ROUTINE                                */
/*--------------------------------------------------------------------------*/
main()
{

/*--------------------------------------------------------------------------*/
/*                      LOCAL VARIABLE DECLARATIONS                         */
/*--------------------------------------------------------------------------*/
    int     return_code;                             /* リターンコード      */
    int     exit_code;                       /* 終了コード                  */
    int     found;                          /* データ取得フラグ             */
    int     total_count;                    /* 処理テーブルカウンター       */
    char    work1[128];     /* 文字列ワーク領域1 */

/*==========================================================================*/
/*      INITIALIZATION                                                      */
/*==========================================================================*/

	/*-----------------------------*/
	/* Print process start message */
	/*-----------------------------*/
    strcpy( G_STATION, "RemoveOldData" );

	memset(process_name,0x00,sizeof(process_name));
	strcpy(process_name,"不要データ削除");

	send_err( m$start_process, NORMAL, process_name, "", "", G_STATION );

    /*-----------------------------*/
    /* Setup error handler routine */
    /*-----------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler() ;

	/*-----------------------------*/
	/* Connect to database         */
	/*-----------------------------*/
    G_POSITION = __LINE__;
    return_code = db_connect();
    if ( return_code != NORMAL ) {
        send_err( m$db_connect, return_code, NULL, NULL, NULL, G_STATION );
        exit_code = ERROR ;
        goto ENDPROC ;
    }

    /*
    **  変数の初期化
    */
    exit_code = NORMAL ;
    found = 0 ;
    total_count = 0 ;

    /*======================================================================*/
    /*                      メ　イ　ン　処　理                              */
    /*======================================================================*/
    /*----------------------------------------------------------------------**
    **  TM_保存期間の取得処理
    **----------------------------------------------------------------------*/

    memset( sqlcmd, 0x00, sizeof(sqlcmd) );

    /* 動的SQL-SQL文の作成 */
    strcpy( sqlcmd, "SELECT " );
    strcat( sqlcmd,     " テーブル名, " );
    strcat( sqlcmd,     " 保存期間, " );
    strcat( sqlcmd,     " 保存期間基準カラム名 " );

    strcat( sqlcmd, "FROM " );
    strcat( sqlcmd,     " TM_保存期間 " );


    /* 動的SQL-SQL文の解析 */
    G_POSITION = __LINE__;
	EXEC SQL PREPARE sql_hzn FROM :sqlcmd ;
    if ( sqlca.sqlcode < 0 ) {
		sprintf( g_szDtlMsg,
				"カーソル(cur_hzn)SQL文の解析・エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err ( m$sql_statment, 0, "PREPARE sql_hzn", NULL, NULL, G_STATION );
        exit_code = ERROR ;
        goto ENDPROG_NG ;
    }

    /* 動的SQL-カーソル登録 */
    G_POSITION = __LINE__;
	EXEC SQL DECLARE cur_hzn CURSOR FOR sql_hzn ;
    if ( sqlca.sqlcode < 0 ) {
		sprintf( g_szDtlMsg,
				"カーソル(cur_hzn)登録・エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err ( m$sql_statment, 0, "DECLARE cur_hzn", NULL, NULL, G_STATION );
        exit_code = ERROR ;
        goto ENDPROG_NG ;
    }

    /* 動的SQL-カーソルのオープン */
    G_POSITION = __LINE__;
	EXEC SQL OPEN cur_hzn ;
    if ( sqlca.sqlcode < 0 ) {
		sprintf( g_szDtlMsg,
				"カーソル(cur_hzn)オープン・エラー(sqlca.sqlcode=%d)",sqlca.sqlcode);
		send_err ( m$emb_error,sqlca.sqlcode, g_szDtlMsg, NULL, NULL, G_STATION);
        send_err ( m$sql_statment, 0, "OPEN cur_hzn", NULL, NULL, G_STATION );
        exit_code = ERROR ;
        goto ENDPROG_NG ;
    }

    while( 1 ) {
        /* 取得変数の初期化 */
        memset( TMRP_table_name.arr, 0x00, sizeof( TMRP_table_name.arr ) );
        TMRP_retention_period = 0;
        memset( TMRP_retention_period_baseline_column_name.arr, 0x00,
             sizeof( TMRP_retention_period_baseline_column_name.arr ) );

        /* TM_保存期間・フェッチデータ取得 */
        G_POSITION = __LINE__ ;
		EXEC SQL FETCH cur_hzn
            INTO
                :TMRP_table_name,                           /* TM_保存期間.テーブル名 */
                :TMRP_retention_period,                     /* TM_保存期間.保存期間 */
                :TMRP_retention_period_baseline_column_name /* TM_保存期間.保存期間基準カラム名 */
            ;

        if ( sqlca.sqlcode < 0 ) {
			send_err ( m$emb_error, sqlca.sqlcode, "TM_保存期間の取得でエラーが発生しました", NULL, NULL, G_STATION);
            send_err ( m$sql_statment, 0, "FETCH cur_hzn", NULL, NULL, G_STATION );
            EXEC SQL CLOSE cur_hzn ;
            exit_code = ERROR ;
            goto ENDPROG_NG ;
        }

        /* TM_保存期間にデータが存在しない場合は、その旨をメッセージ出力 */
        if ( sqlca.sqlcode == ORA_NOF ) {
            if ( found == 0 ) {
                send_err( m$MBB1001W, 0, "TM_保存期間", NULL, NULL, G_STATION );
                EXEC SQL CLOSE cur_hzn ;
                exit_code = ERROR ;
                goto ENDPROG_NG ;
            }
            break ;
        }

        /* データ取得フラグをONにする。 */
        found = 1 ;


        /*----------------------------------------------*/
        /* 保存期間より保存切れ基準日を算出する         */
        /*----------------------------------------------*/
        memset( delete_date.arr, 0x00, sizeof( delete_date.arr ) );
        month_term = 0;
        month_term = TMRP_retention_period * -1 ;

        G_POSITION = __LINE__;
        EXEC SQL SELECT TO_CHAR( ADD_MONTHS( SYSDATE, :month_term ), 'YYYYMMDD' )
                   INTO :delete_date
                   FROM DUAL;
        if ( sqlca.sqlcode < 0 ) {
			sprintf( g_szDtlMsg,
                 "保存期間より保存切れ基準日を算出に失敗しました。(sqlca.sqlcode=%d)",sqlca.sqlcode );
			send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
			send_err ( m$sql_statment, sqlca.sqlcode, "SELECT :month_term", NULL, NULL, G_STATION);

            exit_code = ERROR;
            goto ENDPROG_NG ;
        }

        /*------------------------------------------------------------------**
        **  取得テーブルの保存期限切れレコードの削除処理
        **------------------------------------------------------------------*/
        memset( sqlcmd2, 0x00, sizeof( sqlcmd2 ) );

        /*
        **  動的SQL-レコード削除SQLの作成
        */
        strcpy( sqlcmd2, "DELETE FROM " );
        strcat( sqlcmd2,    TMRP_table_name.arr );
        strcat( sqlcmd2, " WHERE " );

        /*
        **  保存期間基準の条件設定
        */
        strcat( sqlcmd2,    TMRP_retention_period_baseline_column_name.arr );
        strcat( sqlcmd2,    " < TO_DATE('" );
        strcat( sqlcmd2,    delete_date.arr );
        strcat( sqlcmd2,    "', 'YYYYMMDD') " );



        /*
        **  動的SQL-SQL文実行
        */
        G_POSITION = __LINE__;
		EXEC SQL EXECUTE IMMEDIATE :sqlcmd2 ;

        if ( sqlca.sqlcode < 0 ) {
			sprintf( g_szDtlMsg,
                 "保存期限切れレコードの削除処理に失敗しました。(sqlca.sqlcode=%d)",sqlca.sqlcode );
			send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
			send_err ( m$sql_statment, sqlca.sqlcode, sqlcmd2, NULL, NULL, G_STATION);
            EXEC SQL CLOSE cur_hzn ;
            exit_code = ERROR ;
            goto ENDPROG_NG ;
        }

        /*
        **  削除レコード件数をメッセージログに出力
        */
        memset( work1, 0x00, sizeof(work1) );
        sprintf(work1,  "%d"    ,sqlca.sqlerrd[2]);
        strcat(work1,   "件のデータを" );
        strcat(work1,   TMRP_table_name.arr);
        strcat(work1,   "から削除しました。");
        send_err (m$message1, 0, work1, NULL, NULL, G_STATION);

        /* 処理テーブル件数のカウント */
        total_count = total_count + 1 ;
    }

    /*
    **  オープン中のカーソルのクローズ
    */
    G_POSITION = __LINE__;
	EXEC SQL CLOSE cur_hzn ;
    if ( sqlca.sqlcode < 0 ) {
        exit_code = ERROR ;
        goto ENDPROG_NG ;
    }

    /*
    **  処理結果メッセージの出力
    */
    if ( total_count > 0 ) {
        memset( work1, 0x00, sizeof( work1 ) );
        sprintf( work1, "%d個のテーブルについて古いデータを削除しました。", total_count );
        send_err (m$message1, 0, work1, NULL, NULL, G_STATION);
    }

    /*======================================================================**
    **      終  了  処  理
    **======================================================================*/
    /*
    **  正常終了
    */
    /* コネクト開放処理 */
    EXEC SQL COMMIT;

    goto ENDPROC ;

    /*
    **  異常終了
    */
ENDPROG_NG:
    /* コネクト開放処理 */
    EXEC SQL ROLLBACK WORK;


    goto ENDPROC ;

ENDPROC:
    if ( exit_code == NORMAL ) {
        send_err( m$stop_process, NORMAL, process_name, "", "", G_STATION );
    } 
	else {
        send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
        exit_code = ERROR;
    }
    exit( exit_code );
}
