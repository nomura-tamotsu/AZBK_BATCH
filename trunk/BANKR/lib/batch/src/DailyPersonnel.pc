/*==========================================================================*/
/* Copyright　Information Services International-Dentsu, Ltd.   　          */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : BANK・R−CC                                           */
/*                                                                          */
/* PROGRAM NAME     : ユーザマスタ登録・更新処理                            */
/*                                                                          */
/* MODULE NAME      : DailyPersonnel                                        */
/*                                                                          */
/* FUNCTION         : ユーザマスタ登録・更新処理を行う                      */
/*                                                                          */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POint      : Main Module.                                          */
/*                                                                          */
/* INPUT            : argv[1]・・人事情報ファイル（フルパス）               */
/*                  : argv[2]・・処理結果ファイル名(ﾌﾙﾊﾟｽ)                  */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 14/04/16 | ISID        | First Edition.                            */
/* %01 | 14/06/02 | ISID        | 仕様変更 センターID4桁対応:先頭に0を付加  */
/* %02 | 14/08/29 | ISID        | 仕様変更 パスワードをBANK・R用に変更      */
/*==========================================================================*/
/*---------------------------------------------------------------------------*/
/* Standard include specification                                            */
/*---------------------------------------------------------------------------*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <errno.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <time.h>

/*---------------------------------------------------------------------------*/
/* User defined include specification                                        */
/*---------------------------------------------------------------------------*/
#include "msg.h"
#include "common.h"
#include "batchcommon.h"
#include "apl_common.h"

EXEC SQL INCLUDE mbproc.h;

/*---------------------------------------------------------------------------*/
/* Internal macro definition                                                 */
/*---------------------------------------------------------------------------*/

typedef struct _RECV_FILE_DATA {
    char    record_id               [  1];      /* 処理区分 */
    char    user_id                 [  7];      /* ユーザID */
    char    user_name               [ 24];      /* ユーザ名 */
    char    user_ryakusho           [ 10];      /* ユーザ略称 */
    char    soshiki_ten             [  3];      /* 所属組織コード−店 */
    char    soshiki_bu              [  2];      /* 所属組織コード−部 */
    char    soshiki_ka              [  2];      /* 所属組織コード−課 */
    char    start_date              [  8];      /* ユーザ有効期間開始日 */
    char    end_date                [  8];      /* ユーザ有効期間終了日 */
    char    yobi                    [ 62];      /* 予備 */
    char    lf                      [  1];      /* 改行コード */
} RECV_FILE_DATA;

typedef struct _COUNT {
    int  iRecNum;                              /* 処理レコード件数           */
    int  iOkNum ;                              /* 正常終了レコード件数       */
    int  iOkNumW;                              /* (未commit分)               */
    int  iInsNum;                              /* 正常(うち登録レコード件数) */
    int  iInsNumW;                             /* (未commit分)               */
    int  iUpdNum;                              /* 正常(うち登録レコード件数) */
    int  iUpdNumW;                             /* (未commit分)               */
    int  iDelNum;                              /* 正常(うち削除レコード件数) */
    int  iDelNumW;                             /* (未commit分)               */
    int  iNgNum ;                              /* 異常終了レコード件数       */
} COUNT;

/*---------------------------------------------------------------------------*/
/* User Local defined  specification                                         */
/*---------------------------------------------------------------------------*/
#define L_WRITE_END                     1
#define L_WRITE_LOG                     0
#define USER_U_INSERT                   1      /* ＤＢ更新種別 INSERT        */
#define USER_U_UPDATE                   2      /* ＤＢ更新種別 UPDATE        */

/*---------------------------------------------------------------------------*/
/* Global variable specification                                             */
/*---------------------------------------------------------------------------*/
/* 設定ファイル項目（ホスト変数以外）*/
char g_szRecvFile       [AP_CONFIG_LINE];            /* 差分更新ファイル     */
char g_szLogFile        [AP_CONFIG_LINE];            /* 処理結果ファイル     */

FILE *g_pfRecvFile;
FILE *g_pfLogFile;
long g_iCommitSU;                                    /* 分割コミット件数保持 */

char g_RecordID[2];                                  /* 処理区分             */
int  g_UpdateType;                                   /* ＤＢ更新種別         */

char g_szDtlMsg           [AP_C_NOTE_LEN_H];         /* 事象詳細文字列       */

char    process_name[43];
char    g_work[1024];

int file_open_flag1  = 0;		/* ファイルオープンフラグ(データファイル用) */
int file_open_flag2  = 0;		/* ファイルオープンフラグ(処理結果ファイル用)  */

/*---------------------------------------------------------------------------*/
/* Host Variable                                                             */
/*---------------------------------------------------------------------------*/
EXEC SQL INCLUDE SQLCA;
EXEC SQL BEGIN DECLARE SECTION;
    /* ＤＢ接続情報 */
    char sqlcmd[2048];

/* TM_ユーザテーブル  */
    char  h_UserID[9];                               /* ユーザID             */
    short hi_UserID;
    char  h_UserName[25];                            /* ユーザ名             */
    short hi_UserName;
    char  h_UserRyakusho[11];                        /* ユーザ略称           */
    short hi_UserRyakusho;
    char  h_CenterID[5];                             /* センタID             */
    short hi_CenterID;
    long  h_PasswdTerm;                              /* パスワード有効期間   */
    short hi_PasswdTerm;
    char  h_StartDate[11];                           /* 開始日               */
    short hi_StartDate;
    char  h_EndDate[11];                             /* 終了日               */
    short hi_EndDate;
    char  h_Ten[4];                                  /* 店                   */
    short hi_Ten;
    char  h_Bu[3];                                   /* 部                   */
    short hi_Bu;
    char  h_Ka[3];                                   /* 課                   */
    short hi_Ka;
    char  h_ChangeName[9];                           /* 登録者               */

    long h_DATA_COUNT;

EXEC SQL END DECLARE SECTION;

/*---------------------------------------------------------------------------*/
/* Internal function prototype                                               */
/*---------------------------------------------------------------------------*/
extern int send_err();
extern void errhandler();
extern int db_connect();
void rtrim();
void dump();

static void initialize( int ac, char *av[] );
static int  checkFilles( RECV_FILE_DATA *pData, char *g_szDtlMsg );
static int  checkData( char *pcheck_data, int data_size, char *pmsg,
                       char *pchange_data, char *g_szDtlMsg );
static int  insertTables( char *g_szDtlMsg );
static int  updateTables( char *g_szDtlMsg );
static void setUpdateText( int type, char *psqlcmd, short idata, char *pitem, char *pdata );
static int  putAcctLogFile(int tp,RECV_FILE_DATA *pData,COUNT *dCount,int rc, char *g_szDtlMsg );
static int  commit( void );
static int  rollback( void );
static void finalize( int rc, int iRecNum, int iOkNum );


/*****************************************************************************/
/* Function Name:                                                            */
/*   int main( int argc, char *argv[] )                                      */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*      メイン処理                                                           */
/*                                                                           */
/* Arguments:                                                                */
/* Type     Name              I/O    Content                                 */
/* -------- ----------------- --- ------------------------------------------ */
/*    int    argc              I  引数の数                                   */
/*    char  *argv[]                                                          */
/*                    argv[1]  I  人事情報ファイル(ﾌﾙﾊﾟｽ)                    */
/*                    argv[2]  I  処理結果ファイル名(ﾌﾙﾊﾟｽ)                  */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
int main( int argc, char *argv[] )
{
	int     exit_code = NORMAL;
	int		rc = NORMAL;
	unsigned int RecvSt;


    RECV_FILE_DATA    dData;                         /* データ・レコード     */
    COUNT             dCount; 
    long              iCommitCnt;                  /* 分割コミット用カウンタ */
    
	int               rc_fin;

	/*-----------------------------*/
    /* Print process start message */
    /*-----------------------------*/

    strcpy( G_STATION, "DailyPersonnel" );
	
	memset(process_name,0x00,sizeof(process_name));
    strcpy(process_name,"日次人事情報データ取込処理");

    send_err( m$start_process, NORMAL, process_name, "", "", G_STATION );


	memset( &dCount, 0x00, sizeof( dCount ) );
    iCommitCnt = 0;


    /*-------------------------------------------------------*/
    /* Setup error handler routine                           */
    /*-------------------------------------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

    G_POSITION = __LINE__;
    rc = db_connect() ;
    if ( rc != NORMAL ) {
        send_err( m$db_connect, rc, "", "", "", G_STATION );
        rc = ERROR ;
        goto ENDPROC ;
    }


    /* ---------- */
    /* 初期化処理 */
    /* ---------- */
    initialize( argc, argv );



    while( 1 ) {
        memset( g_szDtlMsg, 0x00, sizeof( g_szDtlMsg ) );

        /* -------------------------- */
        /* 人事情報ファイルからの読込 */
        /* -------------------------- */
		RecvSt = (unsigned int)fread( (char *) &dData, sizeof( RECV_FILE_DATA ), 1, g_pfRecvFile );

		if (RecvSt != 1) {
			if (feof( g_pfRecvFile ) != 0) {
				rc = NORMAL;
				break;
			}
			else{
				sprintf(g_szDtlMsg,"人事情報ファイル(%s)の読込に失敗しました。",g_szRecvFile);
				send_err ( m$file_read, -1, g_szDtlMsg, NULL, NULL, G_STATION);

				rc = ERROR;
				break;
			}
		}
		else{
			rc = NORMAL;
		}

        dCount.iRecNum++;

        /* ------------------------------ */
        /* 人事情報ファイルからのチェック */
        /* ------------------------------ */
        if ( (rc = checkFilles( &dData, g_szDtlMsg )) != NORMAL ){
            goto WriteFile;
        }
        /* -------------------- */
        /* ＤＢ更新種別：INSERT */
        /* -------------------- */
        if ( g_UpdateType == USER_U_INSERT ){
            if ( ( rc = insertTables(g_szDtlMsg) ) != NORMAL ){
                goto WriteFile;
            }
            dCount.iOkNumW++;
        }
        /* -------------------- */
        /* ＤＢ更新種別：UPDATE */
        /* -------------------- */
        else if ( g_UpdateType == USER_U_UPDATE ) {
            if ( ( rc = updateTables(g_szDtlMsg) ) != NORMAL ){
                goto WriteFile;
            }
            dCount.iOkNumW++;
        }
        if ( atoi(g_RecordID) == AP_C_SYORI_NEW ){
            dCount.iInsNumW++;
        }
        else if ( atoi(g_RecordID) == AP_C_SYORI_UPDATE ) {
            dCount.iUpdNumW++;
        }
        else if ( atoi(g_RecordID) == AP_C_SYORI_DELETE ) {
            dCount.iDelNumW++;
        }

        iCommitCnt++;                      /* 人事情報ファイルの処理件数 */

#if 0
        /* 指定件数に到達したらＤＢのコミット */
		/*
        if (iCommitCnt == g_iCommitSU) {
            dCount.iOkNum = dCount.iOkNum + dCount.iOkNumW;
            dCount.iInsNum = dCount.iInsNum + dCount.iInsNumW;
            dCount.iUpdNum = dCount.iUpdNum + dCount.iUpdNumW;
            dCount.iDelNum = dCount.iDelNum + dCount.iDelNumW;
            iCommitCnt = 0;
            dCount.iOkNumW = 0;
            dCount.iInsNumW = 0;
            dCount.iUpdNumW = 0;
            dCount.iDelNumW = 0;

            if ((rc = commit(g_szDtlMsg)) != NORMAL ){
                goto WriteFile;
            }
        }
		*/
#endif

WriteFile:
        if ( rc == ERROR ) {
            dCount.iOkNumW = 0;
            dCount.iInsNumW = 0;
            dCount.iUpdNumW = 0;
            dCount.iDelNumW = 0;
            rollback();
            iCommitCnt = 0;
			dCount.iNgNum++;
        }

        /* ログ出力 */
        putAcctLogFile(L_WRITE_LOG, &dData, &dCount, rc, g_szDtlMsg );
        if (rc == ERROR ) {
            break;
        }

    } /* while loop end */


    if( rc == NORMAL && dCount.iRecNum == 0 ){
		sprintf ( g_szDtlMsg, "人事情報ファイル(%s)は０件ファイルです。", g_szRecvFile );
		send_err (m$message1, NORMAL, g_szDtlMsg, NULL, NULL, G_STATION);
    }

    if ( rc != NORMAL ) {
        rollback();
    }
    else{
        /* ＤＢのコミット */
        if( iCommitCnt > 0 ){
            dCount.iOkNum  = dCount.iOkNum  + iCommitCnt;
            dCount.iInsNum = dCount.iInsNum + dCount.iInsNumW;
            dCount.iUpdNum = dCount.iUpdNum + dCount.iUpdNumW;
            dCount.iDelNum = dCount.iDelNum + dCount.iDelNumW;
            rc = commit();
        }
    }

    rc_fin = putAcctLogFile(L_WRITE_END, &dData, &dCount, rc, g_szDtlMsg );
    if (rc == NORMAL){
        rc = rc_fin;
    }


ENDPROC:

	if ( rc == NORMAL ) {
        send_err( m$stop_process, NORMAL, process_name, "", "", G_STATION );
    } else {
        send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
    }

	finalize( rc, dCount.iRecNum, dCount.iOkNum );

}


/*****************************************************************************/
/* Function Name:                                                            */
/*   void initialize( int ac, char *av[] )                                   */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*      初期化処理                                                           */
/*                                                                           */
/* Arguments:                                                                */
/* Type     Name              I/O    Content                                 */
/* -------- ----------------- --- ------------------------------------------ */
/*    int    ac                I  引数の数                                   */
/*    char  *av[]     argv[1]  I  人事情報ファイル（フルパス）               */
/*                    argv[2]  I  処理結果ファイル名（フルパス）             */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*                                                                           */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static void initialize( int ac, char *av[] )
{	
	int exit_code=NORMAL;

    /* コミット件数の取得 */
    g_iCommitSU = 100;


    /* パスワード有効期間 */
    h_PasswdTerm = 90;
    hi_PasswdTerm = ORA_NOT_NULL;


    /* 起動パラメータを使用する */
    if ( ac == 3 ) {
        strcpy(g_szRecvFile,  av[1]); /* 人事情報ファイル                      */
        strcpy(g_szLogFile,   av[2]); /* 処理結果ファイル                      */
    }
    else {
		sprintf (g_szDtlMsg,"人事情報ファイル 処理結果ファイル");
		send_err (m$invalid_parameter, ERROR, g_szDtlMsg, NULL, NULL, G_STATION);
		exit_code = ERROR;
		goto initialize_end;
    }

    /* 差分更新ファイルのオープン */
    if(( g_pfRecvFile = fopen( g_szRecvFile, "r" )) == NULL ) {
		sprintf( g_szDtlMsg, "ファイル%sのオープンに失敗しました。", g_szRecvFile );
		send_err( m$file_open, errno, g_szDtlMsg, NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto initialize_end;
    }
	file_open_flag1 =1;

    /* 処理結果ファイルへのオープン */
    if (( g_pfLogFile = fopen( g_szLogFile, "w" )) == NULL ) {
		sprintf( g_szDtlMsg, "ファイル%sのオープンに失敗しました。", g_szLogFile );
		send_err( m$file_open, errno, g_szDtlMsg, NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto initialize_end;
    }
	file_open_flag2 =1;
	
initialize_end:

	if ( exit_code != NORMAL ) {
		send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
		exit ( exit_code );    
	}

}


/*****************************************************************************/
/* Function Name:                                                            */
/*   int checkFilles( RECV_FILE_DATA *pData,char *g_szDtlMsg )               */
/*                                                                           */
/* Description:                                                              */
/*   各種チェック                                                            */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  --------------------------------------- */
/* RECV_FILE_DATA  *pData        I   人事情報ファイル格納エリア              */
/* g_szDtlMsg       char*        I                                           */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*        NORMAL: 正常                                                       */
/*        ERROR : データ不正                                                 */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int checkFilles( RECV_FILE_DATA *pData, char *g_szDtlMsg )
{

    int rc = 0;

    memset( g_RecordID, 0x00, sizeof(g_RecordID) );

    /* --------------------------- */
    /* TM_ユーザのホスト変数初期化 */
    /* --------------------------- */
    /* ユーザID */
    memset( h_UserID, 0x00, sizeof(h_UserID) );
    hi_UserID=ORA_NULL;

    /* ユーザ名 */
    memset( h_UserName, 0x00, sizeof(h_UserName) );
    hi_UserName=ORA_NULL;
    
    /* ユーザ略称 */
    memset( h_UserRyakusho, 0x00, sizeof(h_UserRyakusho) );
    hi_UserRyakusho=ORA_NULL;
    
    /* センタID */
    memset( h_CenterID, 0x00, sizeof(h_CenterID) );
    hi_CenterID=ORA_NULL;
    
    /* 開始日 */
    memset( h_StartDate, 0x00, sizeof(h_StartDate) );
    hi_StartDate=ORA_NULL;
    
    /* 終了日 */
    memset( h_EndDate, 0x00, sizeof(h_EndDate) );
    hi_EndDate=ORA_NULL;

    /* 店 */
    memset( h_Ten, 0x00, sizeof(h_Ten) );
    hi_Ten=ORA_NULL;
    
    /* 部 */
    memset( h_Bu, 0x00, sizeof(h_Bu) );
    hi_Bu=ORA_NULL;
    
    /* 課 */
    memset( h_Ka, 0x00, sizeof(h_Ka) );
    hi_Ka=ORA_NULL;

    /* 登録者 */
    memset( h_ChangeName, 0x00, sizeof(h_ChangeName) );

    /* -------------------------- */
    /* 人事情報ファイルのチェック */
    /* ホスト変数へのデータセット */
    /* -------------------------- */

    /* 改行コード */
    if( pData->lf[0] != 0x0a ) {
        strcpy( g_szDtlMsg,
                "人事情報ファイルに改行コードの設定がありません。");
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }

    /* 登録者 */
    strcpy( h_ChangeName, "SPV" );

    /* 処理区分 */
    if( pData->record_id[0] == 0x00 || pData->record_id[0] == 0x20 ) {
        strcpy( g_szDtlMsg, "処理区分の設定がありません。");
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }
    else {
        memcpy( g_RecordID, pData->record_id, sizeof(pData->record_id) );
        if ( atoi(g_RecordID) < AP_C_SYORI_NEW ||
             atoi(g_RecordID) > AP_C_SYORI_DELETE ){
            sprintf( g_szDtlMsg,
                     "人事情報ファイルの処理区分(%s)が異常です。",
                     g_RecordID);
            send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
            return(ERROR);
        }
    }

    /* ユーザID */
    rc = checkData(pData->user_id, sizeof(pData->user_id),
                   "ユーザID", h_UserID, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        hi_UserID=ORA_NOT_NULL;
    }

    /* ユーザ有効期間終了日 */
    if( pData->end_date[0] == 0x00 || pData->end_date[0] == 0x20 ) {
        sprintf( g_szDtlMsg,
                 "[ユーザID=%s] ユーザ有効期間終了日 の設定がありません。",
                 h_UserID);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }
    else {
        memcpy( &h_EndDate[0], &pData->end_date[0], 4 );
        strcat( h_EndDate, "-" );
        memcpy( &h_EndDate[5], &pData->end_date[4], 2 );
        strcat( h_EndDate, "-" );
        memcpy( &h_EndDate[8], &pData->end_date[6], 2 );
        hi_EndDate=ORA_NOT_NULL;
    }

    /* TM_ユーザテーブル確認 */
    h_DATA_COUNT = 0;

	G_POSITION = __LINE__;
    EXEC SQL SELECT COUNT(*) INTO :h_DATA_COUNT FROM TM_ユーザ
        WHERE ユーザID = :h_UserID;
    if (sqlca.sqlcode != 0 && sqlca.sqlcode != ORA_NOF){
        sprintf( g_szDtlMsg,
                 "[ユーザID=%s]TM_ユーザテーブルの検索に失敗しました。(sqlca.sqlcode=%d)",
                  h_UserID, sqlca.sqlcode );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "SELECT COUNT(*) TM_ユーザ", NULL, NULL, G_STATION);
        return(ERROR);
    }

    if ( (atoi(g_RecordID) == AP_C_SYORI_UPDATE && h_DATA_COUNT == 0) ||
         (atoi(g_RecordID) == AP_C_SYORI_DELETE && h_DATA_COUNT == 0) ){
        sprintf( g_szDtlMsg,
                 "[ユーザID=%s]TM_ユーザテーブルに存在しないデータです。",
                  h_UserID);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }

    /* ＤＢ更新種別の設定 */
    if ( atoi(g_RecordID) == AP_C_SYORI_NEW ){
        if (h_DATA_COUNT > 0){
            g_UpdateType = USER_U_UPDATE;
        }
        else {
            g_UpdateType = USER_U_INSERT;
        }
    }
    else {
        g_UpdateType = USER_U_UPDATE;
    }

    /* 処理区分＝削除はここまで */
    if ( atoi(g_RecordID) == AP_C_SYORI_DELETE ){
        return(NORMAL);
    }

    /* ユーザ名 */
    rc = checkData(pData->user_name, sizeof(pData->user_name),
                   "ユーザ名", h_UserName, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        hi_UserName=ORA_NOT_NULL;
    }

    /* ユーザ略称 */
    rc = checkData(pData->user_ryakusho, sizeof(pData->user_ryakusho),
                   "ユーザ略称", h_UserRyakusho, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        hi_UserRyakusho=ORA_NOT_NULL;
    }

    /* 所属組織コード−店 */
    rc = checkData(pData->soshiki_ten, sizeof(pData->soshiki_ten),
                   "所属組織コード(店)", h_Ten, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        hi_Ten=ORA_NOT_NULL;
    }

    /* 所属組織コード−部 */
    rc = checkData(pData->soshiki_bu, sizeof(pData->soshiki_bu),
                   "所属組織コード(部)", h_Bu, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        hi_Bu=ORA_NOT_NULL;
    }

    /* 所属組織コード−課 */
    rc = checkData(pData->soshiki_ka, sizeof(pData->soshiki_ka),
                   "所属組織コード(課)", h_Ka, g_szDtlMsg);
    if (rc != NORMAL){
        return(ERROR);
    }
    else {
        hi_Ka=ORA_NOT_NULL;
    }

    /* センタID */
	/* %01 Change 4桁対応：先頭に固定で0を付加する*/
	h_CenterID[0] = '0';
    strcat( h_CenterID, h_Ten );
    hi_CenterID = ORA_NOT_NULL;

    /* ユーザ有効期間開始日 */
    if ( pData->start_date[0] != 0x00 && pData->start_date[0] != 0x20 ) {
        memcpy( &h_StartDate[0], &pData->start_date[0], 4 );
        strcat( h_StartDate, "-" );
        memcpy( &h_StartDate[5], &pData->start_date[4], 2 );
        strcat( h_StartDate, "-" );
        memcpy( &h_StartDate[8], &pData->start_date[6], 2 );
        hi_StartDate=ORA_NOT_NULL;
    }
    else {
        sprintf( g_szDtlMsg,
                 "[ユーザID=%s] ユーザ有効期間開始日 の設定がありません。",
                 h_UserID );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }

    return(NORMAL);

}

/*****************************************************************************/
/* Function Name:                                                            */
/*   int checkData( char *pcheck_data, int data_size, char *pmsg,            */
/*                  char *change_data )                                      */
/*                                                                           */
/* Description:                                                              */
/*   各種チェック                                                            */
/*                                                                           */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* char            *pchack_data  I   チェック対象データ                      */
/* int             data_size     I   チェック対象データサイズ                */
/* char            *pmsg         I   メッセージ文字列                        */
/* char            *pchange_data O   チェック後データ                        */
/* g_szDtlMsg      char*         I/O  事象詳細文字列                         */
/*                                                                           */
/* Files:                                                                    */
/*   None                                                                    */
/*                                                                           */
/* Tables:                                                                   */
/*   None                                                                    */
/*                                                                           */
/* Return Code:                                                              */
/*        NORMAL: 正常                                                       */
/*        ERROR : データ不正                                                 */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int checkData( char *pcheck_data, int data_size, char *pmsg,
                      char *pchange_data, char *g_szDtlMsg )
{

    if( pcheck_data[0] == 0x00 || pcheck_data[0] == 0x20 ) {
        sprintf( g_szDtlMsg,
                 "[ユーザID=%s] %s の設定がありません。",
                 h_UserID, pmsg );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return(ERROR);
    }
    else {
        memcpy( pchange_data, pcheck_data, data_size);
        rtrim( pchange_data );
    }

    return(NORMAL);
}


/*****************************************************************************/
/* Function Name:                                                            */
/*          int insertTables( char *g_szDtlMsg )                             */
/* Made by:                                                                  */
/* Description : テーブルの登録                                              */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* g_szDtlMsg       char*       I/O  事象詳細文字列                          */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 挿入エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int insertTables( char *g_szDtlMsg )
{


    /* ----------------------- */
    /* TM_ユーザテーブルの登録 */
    /* ----------------------- */
	G_POSITION = __LINE__;
    EXEC SQL INSERT INTO TM_ユーザ
       (   ユーザID,
           ユーザ名,
           ユーザ略称,
           パスワード,
           権限区分,
           業務区分,
           TM可能フラグ,
           センタID,
           パスワード有効期間,
           開始日,
           終了日,
           店,
           部,
           課,
           登録日,
           登録者
        )  VALUES (
           :h_UserID :hi_UserID,
           :h_UserName :hi_UserName,
           :h_UserRyakusho :hi_UserRyakusho,
           'cbcfba6f228e3117b67e24dde3ec0209', /* %02 */
           '5',
           '2',
           '0',
           :h_CenterID :hi_CenterID,
           :h_PasswdTerm :hi_PasswdTerm,
           TO_DATE(:h_StartDate :hi_StartDate,'YYYY-MM-DD'),
           TO_DATE(:h_EndDate :hi_EndDate,'YYYY-MM-DD'),
           :h_Ten :hi_Ten,
           :h_Bu :hi_Bu,
           :h_Ka :hi_Ka,
           SYSDATE,
           :h_ChangeName
       );

    /* エラーチェック */
    if (sqlca.sqlcode != 0){
        sprintf( g_szDtlMsg,
                 "TM_ユーザテーブルの登録に失敗しました。(sqlca.sqlcode=%d)",
                 sqlca.sqlcode );
		send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "INSERT TM_ユーザ", NULL, NULL, G_STATION);
        return ERROR;
    }

    return NORMAL;
}


/*****************************************************************************/
/* Function Name:                                                            */
/*          int updateTables( g_szDtlMsg )                                   */
/* Made by:                                                                  */
/* Description : テーブルの更新                                              */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* g_szDtlMsg       char*       I/O  事象詳細文字列                          */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL       : 正常終了                                                */
/*    ERROR        : 更新エラー                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int updateTables( char *g_szDtlMsg )
{

    memset( sqlcmd, 0x00, sizeof(sqlcmd) );

    /* TM_ユーザテーブルの更新 */
    strcpy( sqlcmd, "UPDATE TM_ユーザ SET ");

    setUpdateText( 1, sqlcmd, hi_UserName, "ユーザ名", h_UserName);
    setUpdateText( 1, sqlcmd, hi_UserRyakusho, "ユーザ略称", h_UserRyakusho);
    setUpdateText( 1, sqlcmd, hi_CenterID, "センタID", h_CenterID);
    setUpdateText( 2, sqlcmd, hi_StartDate, "開始日", h_StartDate);
    setUpdateText( 2, sqlcmd, hi_EndDate, "終了日", h_EndDate);
    setUpdateText( 1, sqlcmd, hi_Ten, "店", h_Ten);
    setUpdateText( 1, sqlcmd, hi_Bu, "部", h_Bu);
    setUpdateText( 1, sqlcmd, hi_Ka, "課", h_Ka);

    strcat( sqlcmd, "登録日=SYSDATE," );
    strcat( sqlcmd, "登録者='" );
    strcat( sqlcmd, h_ChangeName );
    strcat( sqlcmd, "' " );

    strcat( sqlcmd, "WHERE ユーザID='" );
    strcat( sqlcmd, h_UserID );
    strcat( sqlcmd, "'" );

	G_POSITION = __LINE__;
    EXEC SQL EXECUTE IMMEDIATE :sqlcmd ;
    if( sqlca.sqlcode != 0 )
    {
        sprintf( g_szDtlMsg, "TM_ユーザテーブル更新エラー(sqlca.sqlcode=%d)", sqlca.sqlcode );
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, "UPDATE TM_ユーザ", NULL, NULL, G_STATION);
        return(ERROR);
    }

    return NORMAL;
}
/*****************************************************************************/
/* Function Name:                                                            */
/*          int setUpdateText( char *psqlcmd, short idata, char *pitem,      */
/*                             char *pdata )                                 */
/* Made by:                                                                  */
/* Description : UPDATE文の作成                                              */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* type            int           I    処理区分                               */
/* psqlcmd         char*        I/O   SQL文                                  */
/* idata           short         I    標識変数                               */
/* pitem           char*         I    カラム名                               */
/* pdata           char*         I    更新データ                             */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static void setUpdateText( int type, char *psqlcmd, short idata, char *pitem, char *pdata )
{

    /* 文字列 */
    if (type == 1){
        if (idata == 0){
            strcat( psqlcmd, pitem );
            strcat( psqlcmd, "='" );
            strcat( psqlcmd, pdata );
            strcat( psqlcmd, "', " );
        }
    }
    else if (type == 2){
        if (idata == 0){
            strcat( psqlcmd, pitem );
            strcat( psqlcmd, "=TO_DATE('" );
            strcat( psqlcmd, pdata );
            strcat( psqlcmd, "','YYYY-MM-DD'), " );
        }
    }

}

/*****************************************************************************/
/* Function Name:                                                            */
/*     putAcctLogFile(int tp, RECV_FILE_DATA *pData, COUNT *dCount, int rc,  */
/*                                                        char *g_szDtlMsg ) */
/* Made by:                                                                  */
/* Description : ログファイル出力                                            */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* tp                int         I    ログタイプ識別                         */
/* RECV_FILE_DATA    *pData      I    更新対象レコード情報を格納している     */
/* COUNT             *dCount     I    処理件数を格納している                 */
/* rc                int         I    処理結果を格納している                 */
/* g_szDtlMsg        char*      I/O   事象詳細文字列                         */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL: 正常                                                           */
/*    ERROR : ファイルアクセスエラー                                         */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int putAcctLogFile(int tp, RECV_FILE_DATA *pData, COUNT *dCount, int rc,
                          char *g_szDtlMsg )
{
    AP_D_BTLOG log;
    char    szTime[EMB_C_DTIME_LEN + 1];
    time_t  t = time( NULL );

    /* バッファ初期化 */
    memset( &log, ' ', sizeof(log));
    log.szDelimit[0] = 0x0a;
    log.szDelimit1[0] = 0x0a;

    if (tp == L_WRITE_END){
        sprintf( log.szNote, 
                 "[ RECORD COUNT:%d <OK>:%d (INS:%d UPD:%d DEL:%d ) <NG>:%d ]",
                 dCount->iRecNum,                    /* 処理件数             */
                 dCount->iOkNum,                     /* 正常終了             */
                 dCount->iInsNum,                    /* 正常終了（新規登録） */
                 dCount->iUpdNum,                    /* 正常終了（更新）     */
                 dCount->iDelNum,                    /* 正常終了（削除）     */
                 dCount->iNgNum );					 /* ERROR終了            */

        /* 処理結果ファイルへの書き込み */
        if ( fwrite( &log, sizeof(AP_D_BTLOG) - sizeof(log.szNote1) - sizeof(log.szDelimit1),
                     1, g_pfLogFile ) != 1 ) {
            send_err ( m$file_write, errno, g_szLogFile, log , NULL, G_STATION);
            return ERROR;
        }

		sprintf ( g_szDtlMsg,
				"[ RECORD COUNT:%d <OK>:%d (INS:%d UPD:%d DEL:%d ) <NG>:%d ]",
                 dCount->iRecNum,                    /* 処理件数             */
                 dCount->iOkNum,                     /* 正常終了             */
                 dCount->iInsNum,                    /* 正常終了（新規登録） */
                 dCount->iUpdNum,                    /* 正常終了（更新）     */
                 dCount->iDelNum,                    /* 正常終了（削除）     */
                 dCount->iNgNum );					 /* ERROR終了            */

		send_err (  m$message1, NORMAL, g_szDtlMsg, NULL , NULL, G_STATION);


    }else{
        /* 現状NORMAL正常時は処理しない。（以下に処理だけは残しておく）*/
        if ( rc == NORMAL ) return NORMAL;

        /* リターンコード編集 */
        switch( rc ) {
            case NORMAL:
                memcpy( log.szRtInfo, "NORMAL",       6); /* 正常終了                  */
                break;
            case ERROR:
                memcpy( log.szRtInfo, "ERROR",        5); /* 既にデータあり            */
                break;
            default:
                memcpy( log.szRtInfo, "NONE",         4); /* その他                    */
                break;
        }

        if (rc != NORMAL){
            memcpy( log.szRtType, " NG ", 4); /* エラー表示    */
        }
        else{
            memcpy( log.szRtType, " OK ", 4); /* 正常終了表示  */
        }
        /* 日時 */
        strftime( szTime, EMB_C_DTIME_LEN + 1, "%Y-%m-%d %H:%M:%S", localtime( &t ));
        memcpy( log.szDateTime,szTime, EMB_C_DTIME_LEN );

        /* 備考(人事情報ファイルの処理データ表示） */
        sprintf( log.szNote, "[ DATA ]%.*s,%.*s",
             sizeof(pData->record_id), pData->record_id,
             sizeof(pData->user_id), pData->user_id
        );

        /* 事象発生詳細レコード番号、事象詳細文字列 */
        sprintf( log.szNote1, "(%d) %.*s", dCount->iRecNum,
                                           (unsigned int)strlen(g_szDtlMsg), g_szDtlMsg );

        /* 処理結果ログファイルへの書き込み */
        if ( fwrite( &log, sizeof(AP_D_BTLOG), 1, g_pfLogFile ) != 1 ){
            send_err ( m$file_write, errno, g_szLogFile, log , NULL, G_STATION);
            return ERROR;
        }
    }

    return NORMAL;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*     commit( void )                                                        */
/* Made by:                                                                  */
/* Description:ＤＢのコミット                                                */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*  g_szDtlMsg      *char         O    事象詳細文字列                        */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL : 正常                                                          */
/*    ERROR  : コミットエラー（システムエラー）                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int commit( VOID )
{

    /* ＤＢのコミット */
    EXEC SQL COMMIT;
    if (sqlca.sqlcode < 0) {
        sprintf(g_szDtlMsg,
                "ＤＢのコミットに失敗しました。(CODE=%ld)",
                sqlca.sqlcode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return ERROR;
    }


    return NORMAL;
}



/*****************************************************************************/
/* Function Name:                                                            */
/*     rollback( void )                                                      */
/* Made by:                                                                  */
/* Description:ＤＢのロールバック                                            */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*    NORMAL : 正常                                                          */
/*    ERROR  : ロールバックエラー（システムエラー）                          */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int rollback( )
{
    
	/* ＤＢのロールバック */
    EXEC SQL ROLLBACK WORK;
    if (sqlca.sqlcode < 0) {
        sprintf(g_szDtlMsg,
                "ＤＢのロールバックに失敗しました。(CODE=%ld)",
                sqlca.sqlcode);
        send_err ( m$emb_error, -1, g_szDtlMsg, NULL, NULL, G_STATION);
        return ERROR;
    }

    return NORMAL;
}

/*****************************************************************************/
/* Function Name:                                                            */
/*     finalize( int rc, int iRecNum, int iOkNum )                           */
/* Made by:                                                                  */
/* Description:終了処理                                                      */
/* Arguments:                                                                */
/*   Name          Type/Length  I/O    Content                               */
/* --------------  -----------  ---  -----------------------------------     */
/* rc              int           i   リターンコード                          */
/* iRecNum         int           i   入力件数                                */
/* iOkNum          int           i   成功件数                                */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static void finalize( int rc, int iRecNum, int iOkNum )
{

    /* ファイルのクローズ */
	if ( file_open_flag1 == 1 ) {
		fclose( g_pfRecvFile );
	}
	if ( file_open_flag2 == 1 ) {
		fclose( g_pfLogFile );
	}

    /* ＤＢ接続解除 */
/*
    EXEC SQL CONNECT RESET;
    if ( sqlca.sqlcode != 0 ){
        send_err( LOG_C_TYPERR, 
            "ＤＢ接続の解除が失敗しました。(sqlca.sqlcode=%d)", sqlca.sqlcode );
    }

    send_err( LOG_C_TYPINF,
                       "プロセス(user_u)を終了します。(終了コード=%d 処理件数=%d/%d)",
                       rc, iOkNum, iRecNum );
*/

    exit( rc );
}


void dump(i_buf,size,name)
char *i_buf;
int size;
char *name;
{
    char o_buf[1024];

    memset(o_buf,0x00,sizeof(o_buf));
    memcpy(o_buf,i_buf,size);

    printf("%s=[%s]\n",name,o_buf);

}