/*==========================================================================*/
/* Copyright　Information Services International-Dentsu, Ltd.   　          */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : BANK・R−CC                                           */
/*                                                                          */
/* PROGRAM NAME     : 契約者利用口座確認処理                                */
/*                                                                          */
/* MODULE NAME      : CheckContractAccount                                  */
/*                                                                          */
/* FUNCTION         : 契約者の利用口座チェックを行う                        */
/*                                                                          */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POint      : Main Module.                                          */
/*                                                                          */
/* INPUT            : NONE                                                  */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 14/05/15 | ISID        | First Edition.                            */
/* %01 | 14/07/28 | ISID        | 処理区分：2追加契約口座の場合             */
/*     |          |             |     ・登録する科目IDを4桁に変更           */
/*     |          |             |     ・6桁の科目IDをホスト科目IDに登録     */
/* %02 | 14/08/06 | ISID        | 解約チェックの場合：                      */
/*     |          |             |   条件にTB申込店を追加(AND)               */
/* %03 | 15/02/03 | 土居 康一郎 | あおぞら1.0次 対応                        */
/* %04 | 15/02/03 | 土居 康一郎 | DC定期 科目間違い修正 2093→2098          */
/* %05 | 15/02/04 | 土居 康一郎 | 定期の枝番号の桁数修正 5桁→7桁           */
/* %06 | 15/02/04 | 土居 康一郎 | 契約口座存在チェックにて検索キーをCIFから */
/*     |          |             | 口座番号に変更（１０次ではCIF≠口座番号） */
/* %07 | 15/03/24 | 土居 康一郎 | ITa_019 流動性預金科目誤り修正 1211→1221 */
/* %08 | 15/04/02 | 土居 康一郎 | ITa_040 投信検索時、キーに口座番号追加    */
/* %09 | 15/07/30 | 東   淳史   | ITb_015 定期・仕組の対象科目を2000を追加  */
/*==========================================================================*/
/*****************************************************************************/
/*---------------------------------------------------------------------------*/
/* Standard include specification                                            */
/*---------------------------------------------------------------------------*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <errno.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <time.h>

/*---------------------------------------------------------------------------*/
/* User defined include specification                                        */
/*---------------------------------------------------------------------------*/
#include "msg.h"
#include "common.h"
#include "batchcommon.h"
#include "apl_common.h"

EXEC SQL INCLUDE mbproc.h;

char    g_szDtlMsg[AP_C_NOTE_LEN_H];	            /* 事象詳細文字列       */

char    process_name[43];
char    g_work[1024];


/*--------------------------------------------------------------------------*/
/*	#2						  DEFINE STATEMENTS 							*/
/*--------------------------------------------------------------------------*/
/* KOUZA_T 科目ID */
#define LOADING_ACCNT_TYPE_TK         "2030"        /* 定期                 */
#define LOADING_ACCNT_TYPE_SI         "2039"        /* 仕組                 */
#define LOADING_ACCNT_TYPE_FT         "2050"        /* 普通                 */
#define LOADING_ACCNT_TYPE_CT         "2060"        /* 貯蓄                 */
#define LOADING_ACCNT_TYPE_TZ         "2070"        /* 当座                 */
/* %03 DELETE START */
//#define LOADING_ACCNT_TYPE_RI         "8501"        /* リッシン             */
//#define LOADING_ACCNT_TYPE_WR         "8504"        /* ワリシン             */
//#define LOADING_ACCNT_TYPE_WI         "8507"        /* ワイド               */
//#define LOADING_ACCNT_TYPE_AS         "8509"        /* あおぞらSP           */
/* %03 DELETE END */
#define LOADING_ACCNT_TYPE_TO         "9000"        /* 投信                 */
#define LOADING_ACCNT_TYPE_GF         "2750"        /* 外貨普通             */
#define LOADING_ACCNT_TYPE_GT         "2730"        /* 外貨定期             */

/* 利用口座確認処理種別 */
#define LOADING_PR_TYPE_DEL              "1"        /* 削除契約口座チェック */
#define LOADING_PR_TYPE_ADD              "2"        /* 追加契約口座チェック */
#define LOADING_PR_TYPE_CAN              "3"        /* 解約契約者チェック   */


/*--------------------------------------------------------------------------*/
/*	#3						  EXTERNAL DECLARES 							*/
/*--------------------------------------------------------------------------*/
EXEC SQL BEGIN DECLARE SECTION;

#if 0
	long	record_cnt;
	long	record_cnt2;
	struct { short len; char arr[8]; } customer_no;
	struct { short len; char arr[6]; } branch_id;
	struct { short len; char arr[5]; } attribute_id;
	struct { short len; char arr[33]; } attribute_name;
	struct { short len; char arr[129]; } before_alteration;
	struct { short len; char arr[129]; } after_alteration;
	struct { short len; char arr[129]; } after_alteration4;
	short	ind_ba;
	short	ind_aa;
	short	ind_aa4;
	struct { short len; char arr[1]; } update_flag;
	short	ind_uf;
	struct { short len; char arr[80]; } kanji_name;
	short	ind_kn;
	struct { short len; char arr[40]; } kana_name;
	short	ind_kn2;
	struct { short len; char arr[101]; } address_1;
	short	ind_a1;
	struct { short len; char arr[16]; } tel_no;
	short	ind_tn;
	struct { short len; char arr[9]; } birthday;
	short	ind_bd;
	struct { short len; char arr[2]; } sex_distinct;
	short	ind_sd;
	struct { short len; char arr[31]; } place_employ;
	short	ind_pe;
	struct { short len; char arr[16]; } employ_tel;
	short	ind_et;
#endif

	char	sqltext[1024];

    /* KEIYAKU_T */
    char  h_EigyotenID[6];                           /* 営業店ID             */
    short hi_EigyotenID;
    char  h_UserID[11];                              /* 契約者ID @           */
    short hi_UserID;
/* %03 Edit START  */
//    char  h_CIFNO[9];                                /* 顧客番号             */
    char  h_CIFNO[11];                                /* 顧客番号             */
/* %03 Edit End  */
    short hi_CIFNO;

    /* KOUZA_T */
    char  h_BranchNo[4];                             /* 取扱店               */
    short hi_BranchNo;
    char  h_AccntType[7];                            /* 科目ID               */
    short hi_AccntType;
    char  h_AccntNo[11];                             /* 口座番号             */
    short hi_AccntNo;
/* %03 Edit START  */
//    char  h_AccntSubNo[11];                          /* 口番号               */
//    short hi_AccntSubNo;
/* %03 Edit End  */
    char  h_AccntFlg[2];                             /* 代表口座フラグ       */
    short hi_AccntFlg;

    char h_ShoriType[2];                             /* 処理区分             */
    short hi_ShoriType;

    char  h_AccntType_wk[6];                         /* 科目ID               */
    short hi_AccntType_wk;
/* %03 Edit START  */
//    char  h_AccntSubNo_wk[6];                        /* 口番号               */
//    short hi_AccntSubNo_wk;
    char  h_ShikumiFlag[2];                        /* 口番号               */
    short hi_ShikumiFlag;
/* %03 Edit End  */

    long  h_Count;

	char  h_Host_AccntType[7];                       /* ホスト科目ID  %01 Add  */
    short hi_Host_AccntType;		


EXEC SQL END DECLARE SECTION;

/*--------------------------------------------------------------------------*/
/*	#4						 STRUCT DECLARATIONS							*/
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*	#5						 SUBROUTNE DEFINITION							*/
/*--------------------------------------------------------------------------*/
extern int send_err();
extern void errhandler();
extern int db_connect();
void rtrim();

static int checkAdditionAccount();
static int AddAccountTeiki();
static int AddAccountRyudo();
/* %03 Edit START  */
// static int AddAccountSaiken();
/* %03 Edit End  */
static int AddAccountGaika();
static int AddAccountToshin();

static int updateAccntCheck();
static int checkDelAccount();
static int checkCancelContract();


/*****************************************************************************/
/* Function Name:															 */
/*	 int main(int argc, char *argv[])										 */
/*																			 */
/* Made by: 																 */
/* Description: 															 */
/*			メイン処理														 */
/*						契約者の利用口座チェックを行う                       */
/*																			 */
/* Arguments:																 */
/*	 Name		   Type/Length	I/O    Content								 */
/* --------------  -----------	---  -----------------------------------	 */
/*																			 */
/* Files :																	 */
/*	  None																	 */
/* Tables:																	 */
/*	  None																	 */
/* Return Code: 															 */
/*																			 */
/*****************************************************************************/
/* Process Description: 													 */
/*																			 */
/* Considerations:															 */
/*																			 */
/* Control Flow:															 */
/*																			 */
/*****************************************************************************/
main(int argc, char *argv[])
{
/*--------------------------------------------------------------------------*/
/*	#6					  LOCAL VARIABLE DECLARATIONS						*/
/*--------------------------------------------------------------------------*/
	int 	rc;
	int		exit_code;					/* 終了コード */
	int		db_connect_flag;			/* ＤＢ接続フラグ */


/*--------------------------------------------------------------------------*/
/*								MAIN ROUTINE								*/
/*--------------------------------------------------------------------------*/

/*==========================================================================*/
/*		INITIALIZATION														*/
/*==========================================================================*/
	rc = NORMAL;
	exit_code = NORMAL;
	db_connect_flag = 0;
	memset ( g_szDtlMsg, '\0', sizeof( g_szDtlMsg ));


	/*-----------------------------*/
    /* Print process start message */
    /*-----------------------------*/
    strcpy( G_STATION, "CheckContractAccount" );
	
	memset(process_name,0x00,sizeof(process_name));
    strcpy(process_name,"契約者利用口座確認処理");

    send_err( m$start_process, NORMAL, process_name, "", "", G_STATION );

    /*-------------------------------------------------------*/
    /* Setup error handler routine                           */
    /*-------------------------------------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

    G_POSITION = __LINE__;
    rc = db_connect() ;
    if ( rc != NORMAL ) {
        send_err( m$db_connect, rc, "", "", "", G_STATION );
        exit_code = ERROR ;
        goto ENDPROC ;
    }

	db_connect_flag = 1;

	/* ワークテーブルクリア */
	G_POSITION = __LINE__;
    EXEC SQL TRUNCATE TABLE TX_利用口座確認;

	if ( sqlca.sqlcode < 0 ){
		send_err ( m$sql_statment, sqlca.sqlcode, "TRUNCATE  TX_利用口座確認", NULL, NULL, G_STATION);
		exit_code = ERROR ;
        goto ENDPROC ;
    }

	/* ------------------------------ */
	/* 未登録テレバン契約口座チェック */
	/* ------------------------------ */
	rc = checkAdditionAccount();
	if( rc != NORMAL ){
		exit_code = ERROR ;
        goto ENDPROC ;
	}

	/* %01 Add */
	memset ( h_Host_AccntType, 0x0, sizeof(h_Host_AccntType));
	hi_Host_AccntType = ORA_NULL;

	/* ------------------------------ */
	/* 契約口座存在チェック           */
	/*   (削除契約口座チェック )      */
	/* ------------------------------ */

	rc = checkDelAccount();
	if( rc != NORMAL ){
		exit_code = ERROR ;
		goto ENDPROC ;
	}

	/* ------------------------------ */
	/* 解約すべき契約者チェック       */
	/*  (解約契約者チェック )         */
	/* ------------------------------ */
    rc = checkCancelContract();
    if( rc != NORMAL ){
		exit_code = ERROR ;
        goto ENDPROC ;
    }



	    
	/*======================================================================**
    **              終了処理
    **======================================================================*/
ENDPROC:
	/* ＤＢ切断 */
	if( db_connect_flag == 1){
		if( exit_code == NORMAL ){
			EXEC SQL COMMIT WORK RELEASE;
		}
		else{
			EXEC SQL ROLLBACK WORK RELEASE;
		}
	}


	/* 終了メッセージ出力 */
	if ( exit_code == NORMAL ){
		send_err( m$stop_process, NORMAL, process_name, "", "", G_STATION );  
	}
	else {
		send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
	}

	exit( exit_code );

}


/*****************************************************************************/
/* Function Name:                                                            */
/*   int checkAdditionAccount()                                              */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*      追加契約口座チェック                                                 */
/*                                                                           */
/* Arguments:                                                                */
/* Type     Name              I/O    Content                                 */
/* -------- ----------------- --- ------------------------------------------ */
/*                                                                           */
/*                                                                           */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*        NORMAL         : 正常                                              */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int checkAdditionAccount()
{

    int  rc = NORMAL;


    memset( h_ShoriType, 0x00, sizeof(h_ShoriType) );
    strcpy( h_ShoriType, LOADING_PR_TYPE_ADD );

	/* 追加契約口座チェック（定期預金） */
	rc = AddAccountTeiki();
	if( rc != NORMAL ){
		return( rc );
	}

	/* 追加契約口座チェック（流動性預金） */
	rc = AddAccountRyudo();
	if( rc != NORMAL ){
		return( rc );
	}

/* %03 Edit START  */
//	/* 追加契約口座チェック（債券） */
//	rc = AddAccountSaiken();
//    if( rc != NORMAL ){
//        return( rc );
//    }
/* %03 Edit End  */


	/* 追加契約口座チェック（外貨預金） */
	rc = AddAccountGaika();
    if( rc != NORMAL ){
        return( rc );
    }


	/* 追加契約口座チェック（投信） */
	rc = AddAccountToshin();
	if( rc != NORMAL ){
		return( rc );
	}

	return( rc );

}


/*****************************************************************************/
/* Function Name:                                                            */
/*   int AddAccountTeiki()                                                   */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*      追加契約口座（定期預金）                                             */
/*                                                                           */
/* Arguments:                                                                */
/* Type     Name              I/O    Content                                 */
/* -------- ----------------- --- ------------------------------------------ */
/*                                                                           */
/*                                                                           */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*        NORMAL   : 正常                                                    */
/*        ERROR    : エラー                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int AddAccountTeiki()
{

    int rc = NORMAL;

	G_POSITION = __LINE__;
/* %03 Edit START */
//	EXEC SQL DECLARE CUR_TEI CURSOR FOR
//        SELECT DISTINCT 店番, CIFNO, 科目ID, 口座番号, 口座口番号
//          FROM TF_個別明細固定性預金
//         WHERE 科目ID IN ('203300', '203500', '203900')
//           AND 枝番号 = '00000'
//       ;
	EXEC SQL DECLARE CUR_TEI CURSOR FOR
        SELECT DISTINCT 店番, CIFNO, 科目ID, 口座番号, 仕組預金
          FROM TF_個別明細固定性預金
/* %09 Edit START */
//         WHERE 科目ID IN ('2011', '2012', '2021', '2098')
         WHERE 科目ID IN ('2000', '2011', '2012', '2021', '2098')
/* %09 Edit End */
           AND 枝番号 = '0000000'
       ;

/* %03 Edit En */
	if( sqlca.sqlcode < 0 ){
		send_err ( m$sql_statment, sqlca.sqlcode, "DECLARE(CUR_TEI) エラー", NULL, NULL, G_STATION);
		return( ERROR );
	}
    
	G_POSITION = __LINE__;
	EXEC SQL OPEN CUR_TEI;
	if( sqlca.sqlcode < 0 ){
		send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_TEI)オープン・エラー", NULL, NULL, G_STATION);
		return( ERROR );
	}


    while ( 1 ) {
        memset( h_BranchNo,   0x00, sizeof(h_BranchNo) );
        hi_BranchNo   = ORA_NULL;
        memset( h_CIFNO,      0x00, sizeof(h_CIFNO) );
        hi_CIFNO      = ORA_NULL;
        memset( h_AccntType,  0x00, sizeof(h_AccntType) );
        hi_AccntType  = ORA_NULL;
        memset( h_AccntNo,    0x00, sizeof(h_AccntNo) );
        hi_AccntNo    = ORA_NULL;
/* %03 Edit START  */
//        memset( h_AccntSubNo, 0x00, sizeof(h_AccntSubNo) );
//        hi_AccntSubNo = ORA_NULL;
        memset( h_ShikumiFlag,     0x00, sizeof(h_ShikumiFlag) );
        hi_ShikumiFlag     = ORA_NULL;
/* %03 Edit En */
        memset( h_EigyotenID, 0x00, sizeof(h_EigyotenID) );
        hi_EigyotenID = ORA_NULL;
        memset( h_UserID,     0x00, sizeof(h_UserID) );
        hi_UserID     = ORA_NULL;
		/* %01 Add */
		memset( h_Host_AccntType,  0x00, sizeof(h_Host_AccntType) );
		hi_Host_AccntType  = ORA_NULL;

		G_POSITION = __LINE__;
/* %03 Edit START  */
//		EXEC SQL FETCH CUR_TEI
//                INTO
//                    :h_BranchNo :hi_BranchNo,
//                    :h_CIFNO :hi_CIFNO,
//                    :h_AccntType :hi_AccntType,
//                    :h_AccntNo :hi_AccntNo,
//                    :h_AccntSubNo :hi_AccntSubNo
//				;
		EXEC SQL FETCH CUR_TEI
                INTO
                    :h_BranchNo :hi_BranchNo,
                    :h_CIFNO :hi_CIFNO,
                    :h_AccntType :hi_AccntType,
                    :h_AccntNo :hi_AccntNo,
                    :h_ShikumiFlag :hi_ShikumiFlag
				;
/* %03 Edit End */
		if (sqlca.sqlcode == ORA_NOF){
			break;
		}
		else if( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_TEI) FETCHエラー", NULL, NULL, G_STATION);
			rc = ERROR;
			break;
		}

		G_POSITION = __LINE__;
		EXEC SQL SELECT TB申込店,契約者番号
				INTO :h_EigyotenID :hi_EigyotenID,
					 :h_UserID :hi_UserID
				FROM TFB_テレバン契約属性
				WHERE CIFNO = :h_CIFNO
					AND 契約解除日 IS NULL
				;
		if( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "TFB_テレバン契約属性検索エラー", NULL, NULL, G_STATION);
			rc = ERROR;
			break;
		}


        /* 契約者が存在し、かつ申込店と同一取扱店の口座の場合 */
        if( hi_UserID != ORA_NULL &&
            strncmp( h_BranchNo, h_EigyotenID, 3) == 0 ){

/* %03 Edit START  */
			/* 科目ID変換 */
            memset( h_AccntType_wk, 0x00, sizeof(h_AccntType_wk) );
//            if( strncmp( h_AccntType, "203300", 6 ) == 0 ||
//                strncmp( h_AccntType, "203500", 6 ) == 0 ){
//                strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_TK );
//            } else if( strncmp( h_AccntType, "203900", 6 ) == 0 ){
//                strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_SI );
//            }

/* %09 Edit START */
//            if( ( strncmp( h_AccntType, "2011", 4 ) == 0 &&
//                  strncmp( h_ShikumiFlag, "0", 1 ) == 0) ||
//                strncmp( h_AccntType, "2012", 4 ) == 0 ||
//                strncmp( h_AccntType, "2021", 4 ) == 0 ||
//                strncmp( h_AccntType, "2098", 4 ) == 0 ){
//                strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_TK );
//            } else if( strncmp( h_AccntType, "2011", 4 ) == 0 &&
//                strncmp( h_ShikumiFlag, "1", 1 ) == 0){
//                strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_SI );
//            }
            if( ( strncmp( h_AccntType, "2011", 4 ) == 0 &&
                  strncmp( h_ShikumiFlag, "0", 1 ) == 0) ||
                strncmp( h_AccntType, "2012", 4 ) == 0 ||
                strncmp( h_AccntType, "2021", 4 ) == 0 ||
                strncmp( h_AccntType, "2098", 4 ) == 0 ||
                ( strncmp( h_AccntType, "2000", 4 ) == 0 &&
                  strncmp( h_ShikumiFlag, "0", 1 ) == 0)){
                strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_TK );
            } else if( ( strncmp( h_AccntType, "2011", 4 ) == 0 &&
                strncmp( h_ShikumiFlag, "1", 1 ) == 0) ||
                ( strncmp( h_AccntType, "2000", 4 ) == 0 &&
                strncmp( h_ShikumiFlag, "1", 1 ) == 0)){
                strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_SI );
            }
/* %09 Edit End */

//            /* 口番号変換 */
//			rtrim ( h_AccntSubNo ); /* Add */
//            memset( h_AccntSubNo_wk, 0x00, sizeof(h_AccntSubNo_wk) );
//            strcpy( h_AccntSubNo_wk, &h_AccntSubNo[2] );

			G_POSITION = __LINE__;
//			EXEC SQL SELECT COUNT(*)
//					INTO :h_Count
//					FROM TFB_テレバン契約口座
//					WHERE 契約者番号 = :h_UserID
//						AND 店番 = :h_BranchNo
//						AND 科目ID = :h_AccntType_wk
//						AND 口座番号 = :h_AccntNo
//						AND 口座口番号 = :h_AccntSubNo_wk
//					;
			EXEC SQL SELECT COUNT(*)
					INTO :h_Count
					FROM TFB_テレバン契約口座
					WHERE 契約者番号 = :h_UserID
						AND 店番 = :h_BranchNo
						AND 科目ID = :h_AccntType_wk
						AND 口座番号 = :h_AccntNo
					;
/* %03 Edit End */
			if( sqlca.sqlcode < 0 ){
				send_err ( m$sql_statment, sqlca.sqlcode, "TFB_テレバン契約口座検索エラー", NULL, NULL, G_STATION);
				rc = ERROR;
				break;
			}

            if ( h_Count == 0 ){
                /* TX_利用口座確認更新 */
                rc = updateAccntCheck();
                if( rc != NORMAL ){
                    break;
                }
            }
        }
    }

	G_POSITION = __LINE__;
	EXEC SQL CLOSE CUR_TEI;

    return( rc );

}


/*****************************************************************************/
/* Function Name:                                                            */
/*   int AddAccountRyudo()                                                   */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*      追加契約口座（流動性預金）                                           */
/*                                                                           */
/* Arguments:                                                                */
/* Type     Name              I/O    Content                                 */
/* -------- ----------------- --- ------------------------------------------ */
/*                                                                           */
/*                                                                           */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*        NORMAL   : 正常                                                    */
/*        ERROR    : エラー                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int AddAccountRyudo()
{

    int rc = NORMAL;

	G_POSITION = __LINE__;
/* %03 Edit START  */
//    EXEC SQL DECLARE CUR_RYU CURSOR FOR
//        SELECT DISTINCT 店番, CIFNO, 科目ID, 口座番号, 口座口番号
//          FROM TF_個別明細流動性預金
//         WHERE 科目ID = '205110'
//       ;
    EXEC SQL DECLARE CUR_RYU CURSOR FOR
        SELECT DISTINCT 店番, CIFNO, 科目ID, 口座番号
          FROM TF_個別明細流動性預金
         WHERE 科目ID = '1221'
       ;             /* %07 ITa_019 Edit 1211→1221 */
/* %03 Edit End */
	if( sqlca.sqlcode < 0 ){
		send_err ( m$sql_statment, sqlca.sqlcode, "DECLARE(CUR_RYU) エラー", NULL, NULL, G_STATION);
		return( ERROR );
	}
    
	G_POSITION = __LINE__;
    EXEC SQL OPEN CUR_RYU;
    if( sqlca.sqlcode < 0 ){
		send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_RYU)オープン・エラー", NULL, NULL, G_STATION);
		EXEC SQL CLOSE CUR_RYU;
		return( ERROR );
	}

    while ( 1 ) {
        memset( h_BranchNo,   0x00, sizeof(h_BranchNo) );
        hi_BranchNo   = ORA_NULL;
        memset( h_CIFNO,      0x00, sizeof(h_CIFNO) );
        hi_CIFNO      = ORA_NULL;
        memset( h_AccntType,  0x00, sizeof(h_AccntType) );
        hi_AccntType  = ORA_NULL;
        memset( h_AccntNo,    0x00, sizeof(h_AccntNo) );
        hi_AccntNo    = ORA_NULL;
/* %03 Edit START  */
//        memset( h_AccntSubNo, 0x00, sizeof(h_AccntSubNo) );
//        hi_AccntSubNo = ORA_NULL;
/* %03 Edit END  */
        memset( h_EigyotenID, 0x00, sizeof(h_EigyotenID) );
        hi_EigyotenID = ORA_NULL;
        memset( h_UserID,     0x00, sizeof(h_UserID) );
        hi_UserID     = ORA_NULL;
		/* %01 Add */
		memset( h_Host_AccntType,  0x00, sizeof(h_Host_AccntType) );
		hi_Host_AccntType  = ORA_NULL;

		G_POSITION = __LINE__;
/* %03 Edit START  */
//		EXEC SQL FETCH CUR_RYU
//                INTO
//                    :h_BranchNo :hi_BranchNo,
//                    :h_CIFNO :hi_CIFNO,
//                    :h_AccntType :hi_AccntType,
//                    :h_AccntNo :hi_AccntNo,
//                    :h_AccntSubNo :hi_AccntSubNo
//                ;
		EXEC SQL FETCH CUR_RYU
                INTO
                    :h_BranchNo :hi_BranchNo,
                    :h_CIFNO :hi_CIFNO,
                    :h_AccntType :hi_AccntType,
                    :h_AccntNo :hi_AccntNo
                ;
/* %03 Edit END  */
        if ( sqlca.sqlcode == ORA_NOF ){
            break;
        }
        else if ( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_RYU) FETCHエラー", NULL, NULL, G_STATION);
			rc = ERROR;
			break;
        }

		G_POSITION = __LINE__;
		EXEC SQL SELECT TB申込店,契約者番号
				INTO :h_EigyotenID :hi_EigyotenID,
					 :h_UserID :hi_UserID
				FROM TFB_テレバン契約属性
				WHERE CIFNO = :h_CIFNO
					AND 契約解除日 IS NULL
				;
		if ( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "TFB_テレバン契約属性検索エラー(流動性)", NULL, NULL, G_STATION);
			rc = ERROR;
			break;
		}

        /* 契約者が存在し、かつ申込店と同一取扱店の口座の場合 */
        if( hi_UserID != ORA_NULL &&
            strncmp( h_BranchNo, h_EigyotenID, 3) == 0 ){

            /* 科目ID変換 */
            memset( h_AccntType_wk, 0x00, sizeof(h_AccntType_wk) );
            strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_FT );

/* %03 Edit START  */
//            /* 口番号変換 */
//			rtrim ( h_AccntSubNo ); /* Add */
//            memset( h_AccntSubNo_wk, 0x00, sizeof(h_AccntSubNo_wk) );
//            strcpy( h_AccntSubNo_wk, &h_AccntSubNo[2] );

			G_POSITION = __LINE__;
//			EXEC SQL SELECT COUNT(*)
//					INTO :h_Count
//					FROM TFB_テレバン契約口座
//					WHERE 契約者番号 = :h_UserID
//						AND 店番 = :h_BranchNo
//						AND 科目ID = :h_AccntType_wk
//						AND 口座番号 = :h_AccntNo
//						AND 口座口番号 = :h_AccntSubNo_wk
//					;
			EXEC SQL SELECT COUNT(*)
					INTO :h_Count
					FROM TFB_テレバン契約口座
					WHERE 契約者番号 = :h_UserID
						AND 店番 = :h_BranchNo
						AND 科目ID = :h_AccntType_wk
						AND 口座番号 = :h_AccntNo
					;
/* %03 Edit END  */
			if ( sqlca.sqlcode < 0 ){
				send_err ( m$sql_statment, sqlca.sqlcode, "TFB_テレバン契約口座検索エラー(流動性)", NULL, NULL, G_STATION);
				rc = ERROR;
				break;
			}


            if ( h_Count == 0 ){
                /* TX_利用口座確認更新 */
                rc = updateAccntCheck();
                if( rc != NORMAL ){
                    break;
                }
            }
        }
    }

	G_POSITION = __LINE__;
	EXEC SQL CLOSE CUR_RYU;

	return( rc );

}


/* %03 DELETE START  */
/*****************************************************************************/
/* Function Name:                                                            */
/*   int AddAccountSaiken()                                                  */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*      追加契約口座（債券）                                                 */
/*                                                                           */
/* Arguments:                                                                */
/* Type     Name              I/O    Content                                 */
/* -------- ----------------- --- ------------------------------------------ */
/*                                                                           */
/*                                                                           */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*        NORMAL   : 正常                                                    */
/*        ERROR    : エラー                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
//static int AddAccountSaiken()
//{
//
//    int rc = NORMAL;
//    int accnt_type;
//
//
//	G_POSITION = __LINE__;
//	EXEC SQL DECLARE CUR_SAI CURSOR FOR
//        SELECT DISTINCT 店番, CIFNO, 科目ID, 口座番号, 口座口番号
//          FROM TF_個別明細債券
//         WHERE TO_NUMBER(科目ID,'999999') >= 850100 AND TO_NUMBER(科目ID,'999999') <= 850999
//           AND 回号 = '00000'
//       ;
//	if( sqlca.sqlcode < 0 ){
//		send_err ( m$sql_statment, sqlca.sqlcode, "DECLARE(CUR_SAI) エラー", NULL, NULL, G_STATION);
//		return( ERROR );
//	}
//    
//	EXEC SQL OPEN CUR_SAI;
//	if( sqlca.sqlcode < 0 ){
//		send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_SAI)オープン・エラー", NULL, NULL, G_STATION);
//		EXEC SQL CLOSE CUR_SAI;
//		return( ERROR );
//	}
//
//    while( 1 ) {
//        memset( h_BranchNo,   0x00, sizeof(h_BranchNo) );
//        hi_BranchNo   = ORA_NULL;
//        memset( h_CIFNO,      0x00, sizeof(h_CIFNO) );
//        hi_CIFNO      = ORA_NULL;
//        memset( h_AccntType,  0x00, sizeof(h_AccntType) );
//        hi_AccntType  = ORA_NULL;
//        memset( h_AccntNo,    0x00, sizeof(h_AccntNo) );
//        hi_AccntNo    = ORA_NULL;
//        memset( h_AccntSubNo, 0x00, sizeof(h_AccntSubNo) );
//        hi_AccntSubNo = ORA_NULL;
//        memset( h_EigyotenID, 0x00, sizeof(h_EigyotenID) );
//        hi_EigyotenID = ORA_NULL;
//        memset( h_UserID,     0x00, sizeof(h_UserID) );
//        hi_UserID     = ORA_NULL;
//		/* %01 Add */
//		memset( h_Host_AccntType,  0x00, sizeof(h_Host_AccntType) );
//		hi_Host_AccntType  = ORA_NULL;
//
//		G_POSITION = __LINE__;
//		EXEC SQL FETCH CUR_SAI
//                INTO
//                    :h_BranchNo :hi_BranchNo,
//                    :h_CIFNO :hi_CIFNO,
//                    :h_AccntType :hi_AccntType,
//                    :h_AccntNo :hi_AccntNo,
//                    :h_AccntSubNo :hi_AccntSubNo
//                ;
//		if ( sqlca.sqlcode == ORA_NOF ){
//			break;
//		}
//		else if ( sqlca.sqlcode < 0 ){
//			send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_SAI) FETCHエラー", NULL, NULL, G_STATION);
//			rc = ERROR;
//			break;
//		}
//
//		G_POSITION = __LINE__;
//		EXEC SQL SELECT TB申込店,契約者番号
//				INTO :h_EigyotenID :hi_EigyotenID,
//					 :h_UserID :hi_UserID
//				FROM TFB_テレバン契約属性
//				WHERE CIFNO = :h_CIFNO
//					AND 契約解除日 IS NULL
//				;
//		if ( sqlca.sqlcode < 0 ){
//			send_err ( m$sql_statment, sqlca.sqlcode, "TFB_テレバン契約属性検索エラー(債券)", NULL, NULL, G_STATION);
//			rc = ERROR;
//			break;
//		}
//
//
//        /* 契約者が存在し、かつ申込店と同一取扱店の口座の場合 */
//        if( hi_UserID != ORA_NULL &&
//            strncmp( h_BranchNo, h_EigyotenID, 3) == 0 ){
//
//            /* 科目ID変換 */
//            memset( h_AccntType_wk, 0x00, sizeof(h_AccntType_wk) );
//            accnt_type = atoi(h_AccntType);
//            if( accnt_type >= 850100 && accnt_type <= 850399 ){
//                strcpy(h_AccntType_wk, LOADING_ACCNT_TYPE_RI );
//            }
//            else if( accnt_type >= 850400 && accnt_type <= 850699 &&
//                     accnt_type != 850410 && accnt_type != 850510 && accnt_type != 850610 ){
//                strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_WR );
//            }
//            else if( accnt_type == 850410 || accnt_type == 850510 || accnt_type == 850610 ){
//                strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_AS );
//            }
//            else if( accnt_type >= 850700 && accnt_type <= 850999 ){
//                strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_WI );
//            }
//
//            /* 口番号変換 */
//			rtrim ( h_AccntSubNo ); /* Add */
//			memset( h_AccntSubNo_wk, 0x00, sizeof(h_AccntSubNo_wk) );
//			strcpy( h_AccntSubNo_wk, &h_AccntSubNo[2] );
//
//			G_POSITION = __LINE__;
//			EXEC SQL SELECT COUNT(*)
//					INTO :h_Count
//					FROM TFB_テレバン契約口座
//					WHERE 契約者番号 = :h_UserID
//						AND 店番 = :h_BranchNo
//						AND 科目ID = :h_AccntType_wk
//						AND 口座番号 = :h_AccntNo
//						AND 口座口番号 = :h_AccntSubNo_wk
//					;
//			if ( sqlca.sqlcode < 0 ){
//				send_err ( m$sql_statment, sqlca.sqlcode, "TFB_テレバン契約口座検索エラー(債券)", NULL, NULL, G_STATION);
//				rc = ERROR;
//				break;
//			}
//
//            if ( h_Count == 0 ){
//                /* TX_利用口座確認更新 */
//                rc = updateAccntCheck();
//                if( rc != NORMAL ){
//                    break;
//                }
//            }
//
//        }
//    }
//
//	G_POSITION = __LINE__;
//    EXEC SQL CLOSE CUR_SAI;
//
//    return( rc );
//
//}
/* %03 DELETE End  */


/*****************************************************************************/
/* Function Name:                                                            */
/*   int AddAccountGaika()                                                   */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*      追加契約口座（外貨預金）                                             */
/*                                                                           */
/* Arguments:                                                                */
/* Type     Name              I/O    Content                                 */
/* -------- ----------------- --- ------------------------------------------ */
/*                                                                           */
/*                                                                           */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*        NORMAL   : 正常                                                    */
/*        ERROR    : エラー                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int AddAccountGaika()
{

    int rc = NORMAL;

	G_POSITION = __LINE__;
/* %03 Edit START  */
//	EXEC SQL DECLARE CUR_GAI CURSOR FOR
//		SELECT DISTINCT 店番, CIFNO, 科目ID, 口座番号, 口座口番号
//			FROM TF_個別明細外貨預金
//		WHERE 科目ID IN ('275111', '273100', '273111', '273112')
//			AND 枝番号 = '00000'
//		;
	EXEC SQL DECLARE CUR_GAI CURSOR FOR
		SELECT DISTINCT 店番, CIFNO, 科目ID, 口座番号
			FROM TF_個別明細外貨預金
		WHERE 科目ID IN ('702', '711')
			AND 枝番号 = '00000'
		;
/* %03 Edit End  */
	if( sqlca.sqlcode < 0 ){
		send_err ( m$sql_statment, sqlca.sqlcode, "DECLARE(CUR_GAI) エラー", NULL, NULL, G_STATION);
		return( ERROR );
	}

	G_POSITION = __LINE__;
	EXEC SQL OPEN CUR_GAI;
	if( sqlca.sqlcode < 0 ){
		send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_GAI)オープン・エラー", NULL, NULL, G_STATION);
		EXEC SQL CLOSE CUR_GAI;
		return( ERROR );
	}

    while ( 1 ) {
        memset( h_BranchNo,   0x00, sizeof(h_BranchNo) );
        hi_BranchNo   = ORA_NULL;
        memset( h_CIFNO,      0x00, sizeof(h_CIFNO) );
        hi_CIFNO      = ORA_NULL;
        memset( h_AccntType,  0x00, sizeof(h_AccntType) );
        hi_AccntType  = ORA_NULL;
        memset( h_AccntNo,    0x00, sizeof(h_AccntNo) );
        hi_AccntNo    = ORA_NULL;
/* %03 Edit START  */
//        memset( h_AccntSubNo, 0x00, sizeof(h_AccntSubNo) );
//        hi_AccntSubNo = ORA_NULL;
/* %03 Edit End  */
        memset( h_EigyotenID, 0x00, sizeof(h_EigyotenID) );
        hi_EigyotenID = ORA_NULL;
        memset( h_UserID,     0x00, sizeof(h_UserID) );
        hi_UserID     = ORA_NULL;
		/* %01 Add */
		memset( h_Host_AccntType,  0x00, sizeof(h_Host_AccntType) );
		hi_Host_AccntType  = ORA_NULL;

		G_POSITION = __LINE__;
/* %03 Edit START  */
//		EXEC SQL FETCH CUR_GAI
//				INTO
//					:h_BranchNo :hi_BranchNo,
//					:h_CIFNO :hi_CIFNO,
//					:h_AccntType :hi_AccntType,
//					:h_AccntNo :hi_AccntNo,
//					:h_AccntSubNo :hi_AccntSubNo
//				;
		EXEC SQL FETCH CUR_GAI
				INTO
					:h_BranchNo :hi_BranchNo,
					:h_CIFNO :hi_CIFNO,
					:h_AccntType :hi_AccntType,
					:h_AccntNo :hi_AccntNo
				;
/* %03 Edit End  */
		if ( sqlca.sqlcode == ORA_NOF ){
			break;
		}
		else if (sqlca.sqlcode < 0){
			send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_GAI) FETCHエラー", NULL, NULL, G_STATION);
			rc = ERROR;
			break;
		}

		G_POSITION = __LINE__;
		EXEC SQL SELECT TB申込店,契約者番号
				INTO :h_EigyotenID :hi_EigyotenID,
					 :h_UserID :hi_UserID
				FROM TFB_テレバン契約属性
				WHERE CIFNO = :h_CIFNO
					AND 契約解除日 IS NULL
				;
		if ( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "TFB_テレバン契約属性検索エラー(外貨預金)", NULL, NULL, G_STATION);
			rc = ERROR;
			break;
		}


        /* 契約者が存在し、かつ申込店と同一取扱店の口座の場合 */
        if( hi_UserID != ORA_NULL &&
            strncmp( h_BranchNo, h_EigyotenID, 3) == 0 ){


            /* 科目ID変換 */
            memset( h_AccntType_wk, 0x00, sizeof(h_AccntType_wk) );
/* %03 Edit START  */
//            if( strncmp( h_AccntType, "275111", 6 ) == 0 ){
//                strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_GF );
//            }
//            else if( strncmp( h_AccntType, "273100", 6 ) == 0 ||
//                     strncmp( h_AccntType, "273111", 6 ) == 0 ||
//                     strncmp( h_AccntType, "273112", 6 ) == 0 ){
//                strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_GT );
//            }
            if( strncmp( h_AccntType, "702", 3 ) == 0 ){
                strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_GF );
            }
            else if( strncmp( h_AccntType, "711", 3 ) == 0 ){
                strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_GT );
            }

            /* 口番号変換 */
//			rtrim ( h_AccntSubNo ); /* Add */
//            memset( h_AccntSubNo_wk, 0x00, sizeof(h_AccntSubNo_wk) );
//            strcpy( h_AccntSubNo_wk, &h_AccntSubNo[2] );

			G_POSITION = __LINE__;
//			EXEC SQL SELECT COUNT(*)
//					INTO :h_Count
//					FROM TFB_テレバン契約口座
//					WHERE 契約者番号 = :h_UserID
//						AND 店番 = :h_BranchNo
//						AND 科目ID = :h_AccntType_wk
//						AND 口座番号 = :h_AccntNo
//						AND 口座口番号 = :h_AccntSubNo_wk
//					;
			EXEC SQL SELECT COUNT(*)
					INTO :h_Count
					FROM TFB_テレバン契約口座
					WHERE 契約者番号 = :h_UserID
						AND 店番 = :h_BranchNo
						AND 科目ID = :h_AccntType_wk
						AND 口座番号 = :h_AccntNo
					;
/* %03 Edit End  */
			if ( sqlca.sqlcode < 0 ){
				send_err ( m$sql_statment, sqlca.sqlcode, "TFB_テレバン契約口座検索エラー(外貨預金)", NULL, NULL, G_STATION);
				rc = ERROR;
				break;
			}

            if (h_Count == 0){
                /* TX_利用口座確認更新 */
                rc = updateAccntCheck();
                if( rc != NORMAL ){
                    break;
                }
            }
        }
    }

	G_POSITION = __LINE__;
    EXEC SQL CLOSE CUR_GAI;

    return( rc );

}


/*****************************************************************************/
/* Function Name:                                                            */
/*   int AddAccountToshin()                                                  */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*      追加契約口座（投信）                                                 */
/*                                                                           */
/* Arguments:                                                                */
/* Type     Name              I/O    Content                                 */
/* -------- ----------------- --- ------------------------------------------ */
/*                                                                           */
/*                                                                           */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*        NORMAL   : 正常                                                    */
/*        ERROR    : エラー                                                  */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int AddAccountToshin()
{

    int rc = NORMAL;


	G_POSITION = __LINE__;
	EXEC SQL DECLARE CUR_TOU CURSOR FOR
		SELECT 店番, CIFNO, 口座番号
			FROM TF_個別明細投信口座
		;
	if( sqlca.sqlcode < 0 ){
		send_err ( m$sql_statment, sqlca.sqlcode, "DECLARE(CUR_TOU エラー", NULL, NULL, G_STATION);
		return( ERROR );
	}

	G_POSITION = __LINE__;
	EXEC SQL OPEN CUR_TOU;
	if( sqlca.sqlcode < 0 ){
		send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_TOU)オープン・エラー", NULL, NULL, G_STATION);
		EXEC SQL CLOSE CUR_TOU;
		return( ERROR );
	}

    while ( 1 ) {
        memset( h_BranchNo,   0x00, sizeof(h_BranchNo) );
        hi_BranchNo   = ORA_NULL;
        memset( h_CIFNO,      0x00, sizeof(h_CIFNO) );
        hi_CIFNO      = ORA_NULL;
        memset( h_AccntType,  0x00, sizeof(h_AccntType) );
        hi_AccntType  = ORA_NULL;
        memset( h_AccntNo,    0x00, sizeof(h_AccntNo) );
        hi_AccntNo    = ORA_NULL;
/* %03 Edit START  */
//        memset( h_AccntSubNo, 0x00, sizeof(h_AccntSubNo) );
//        hi_AccntSubNo = ORA_NULL;
/* %03 Edit End  */
        memset( h_EigyotenID, 0x00, sizeof(h_EigyotenID) );
        hi_EigyotenID = ORA_NULL;
        memset( h_UserID,     0x00, sizeof(h_UserID) );
        hi_UserID     = ORA_NULL;
		/* %01 Add */
		memset( h_Host_AccntType,  0x00, sizeof(h_Host_AccntType) );
		hi_Host_AccntType  = ORA_NULL;


		G_POSITION = __LINE__;
		EXEC SQL FETCH CUR_TOU
			INTO
				:h_BranchNo :hi_BranchNo,
				:h_CIFNO :hi_CIFNO,
				:h_AccntNo :hi_AccntNo
			;
		if ( sqlca.sqlcode == ORA_NOF ){
			break;
		}
        else if ( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_TOU) FETCHエラー", NULL, NULL, G_STATION);
            rc = ERROR;
            break;
        }

		G_POSITION = __LINE__;
		EXEC SQL SELECT TB申込店,契約者番号
				INTO :h_EigyotenID :hi_EigyotenID,
					 :h_UserID :hi_UserID
				FROM TFB_テレバン契約属性
				WHERE CIFNO = :h_CIFNO
					AND 契約解除日 IS NULL
				;
		if ( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "TFB_テレバン契約属性検索エラー(投信)", NULL, NULL, G_STATION);
			rc = ERROR;
			break;
		}


        /* 契約者が存在し、かつ申込店と同一取扱店の口座の場合 */
        if( hi_UserID != ORA_NULL &&
            strncmp( h_BranchNo, h_EigyotenID, 3) == 0 ){

            /* 科目ID設定 */
            strcpy( h_AccntType, "900000" );
            hi_AccntType = ORA_NOT_NULL;
            memset( h_AccntType_wk, 0x00, sizeof(h_AccntType_wk) );
            strcpy( h_AccntType_wk, LOADING_ACCNT_TYPE_TO );

			G_POSITION = __LINE__;
			EXEC SQL SELECT COUNT(*)
					INTO :h_Count
					FROM TFB_テレバン契約口座
					WHERE 契約者番号 = :h_UserID
						AND 店番 = :h_BranchNo
						AND 科目ID = :h_AccntType_wk
/* %08 Add Start */
						AND 口座番号 = :h_AccntNo
/* %08 Add End   */
					;
			if ( sqlca.sqlcode < 0 ){
				send_err ( m$sql_statment, sqlca.sqlcode, "TFB_テレバン契約口座検索エラー(投信)", NULL, NULL, G_STATION);
				rc = ERROR;
				break;
			}

            if ( h_Count == 0 ){
                /* TX_利用口座確認更新 */
                rc = updateAccntCheck();
                if( rc != NORMAL ){
                    break;
                }
            }
        }
    }

	G_POSITION = __LINE__;
    EXEC SQL CLOSE CUR_TOU;

    return( rc );

}


/*****************************************************************************/
/* Function Name:                                                            */
/*   int updateAccntCheck()                                                  */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*      契約口座確認結果更新                                                 */
/*                                                                           */
/* Arguments:                                                                */
/* Type     Name              I/O    Content                                 */
/* -------- ----------------- --- ------------------------------------------ */
/*                                                                           */
/*                                                                           */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*        NORMAL   : 正常　　                                                */
/*        ERROR    : 異常                                                    */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int updateAccntCheck()
{

	/*printf("契約者番号=[%s] 科目ID=[%s]\n",h_UserID,h_AccntType);*/

	/* 各項目のRTRIM */
/* %03 Edit START  */
//	rtrim ( h_AccntSubNo );
/* %03 Edit End */
	rtrim ( h_EigyotenID );
	rtrim ( h_CIFNO );


	/* %01 Add Start */
	if ( !memcmp ( h_ShoriType, LOADING_PR_TYPE_ADD, 1 ) ) {

		/* 6桁の科目IDをホスト科目IDにコピー */
		memcpy (h_Host_AccntType,h_AccntType,strlen(h_AccntType));
		hi_Host_AccntType = hi_AccntType;
		/*printf("h_AccntType_wk=[%s] ",h_AccntType_wk);*/

		/*　科目IDのバッファをクリア */
		memset( h_AccntType,  0x00, sizeof(h_AccntType) );
		hi_AccntType  = ORA_NULL;

		/* 科目IDに4桁の科目IDをコピー */
		memcpy (h_AccntType,h_AccntType_wk,strlen(h_AccntType_wk));
		hi_AccntType = hi_AccntType_wk;
		/*printf("h_AccntType=[%s]\n",h_AccntType);*/

	}
	/* %01 Add End */
	

	G_POSITION = __LINE__;
/* %03 Edit START  */
//	EXEC SQL INSERT INTO TX_利用口座確認
//        (
//            店番,
//            CIFNO,
//            契約者番号,
//            取扱店,
//            科目ID,
//            口座番号,
//            口座口番号,
//            代表口座フラグ,
//            処理区分,
//			ホスト科目ID, /* %01 Add */
//            登録日,
//            登録者
//        ) VALUES (
//            :h_EigyotenID :hi_EigyotenID,
//            :h_CIFNO :hi_CIFNO,
//            :h_UserID :hi_UserID,
//            :h_BranchNo :hi_BranchNo,
//            :h_AccntType :hi_AccntType,
//            :h_AccntNo :hi_AccntNo,
//            :h_AccntSubNo :hi_AccntSubNo,
//            :h_AccntFlg :hi_AccntFlg,
//            :h_ShoriType,
//			:h_Host_AccntType :hi_Host_AccntType, /* %01 Add */
//            SYSDATE,
//            'SPV'
//        );
	EXEC SQL INSERT INTO TX_利用口座確認
        (
            店番,
            CIFNO,
            契約者番号,
            取扱店,
            科目ID,
            口座番号,
            代表口座フラグ,
            処理区分,
			ホスト科目ID, /* %01 Add */
            登録日,
            登録者
        ) VALUES (
            :h_EigyotenID :hi_EigyotenID,
            :h_CIFNO :hi_CIFNO,
            :h_UserID :hi_UserID,
            :h_BranchNo :hi_BranchNo,
            :h_AccntType :hi_AccntType,
            :h_AccntNo :hi_AccntNo,
            :h_AccntFlg :hi_AccntFlg,
            :h_ShoriType,
			:h_Host_AccntType :hi_Host_AccntType, /* %01 Add */
            SYSDATE,
            'SPV'
        );
    if (sqlca.sqlcode != 0){
/* %03 Edit START  */
//		sprintf ( g_work ,"CIFNO=[%s] 契約者番号=[%s] 科目ID=[%s] 口座番号=[%s] 口座口番号=[%s]\n",
//						h_CIFNO ,h_UserID,h_AccntType,h_AccntNo,h_AccntSubNo);
		sprintf ( g_work ,"CIFNO=[%s] 契約者番号=[%s] 科目ID=[%s] 口座番号=[%s]\n",
						h_CIFNO ,h_UserID,h_AccntType,h_AccntNo);
/* %03 Edit End  */
		send_err ( m$emb_error, -1, g_work, NULL, NULL, G_STATION);
		send_err ( m$sql_statment, sqlca.sqlcode, 
					"TX_利用口座確認テーブルの登録に失敗しました。",NULL, NULL, G_STATION);
        return( ERROR );
    }
	
	return( NORMAL );

}


/*****************************************************************************/
/* Function Name:                                                            */
/*   int checkDelAccount()                                                   */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*      削除契約口座チェック                                                 */
/*                                                                           */
/* Arguments:                                                                */
/* Type     Name              I/O    Content                                 */
/* -------- ----------------- --- ------------------------------------------ */
/*                                                                           */
/*                                                                           */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*        NORMAL   : 正常　　                                                */
/*        ERROR    : 異常                                                    */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int checkDelAccount()
{

    int  rc = NORMAL;


    memset( h_ShoriType, 0x00, sizeof(h_ShoriType) );
    strcpy( h_ShoriType, LOADING_PR_TYPE_DEL );

	/*
	G_POSITION = __LINE__;
    EXEC SQL DECLARE CUR_KOU CURSOR FOR
            SELECT KEI.EIGYOTEN_ID,
                   KEI.USERID,
                   KEI.CIF,
                   KOU.BRANCH_NO,
                   KOU.ACCNT_TYPE,
                   KOU.ACCNT_NO,
                   KOU.ACCNT_SUB_NO,
                   KOU.ACCNT_FLG
              FROM KEIYAKU_T KEI, KOUZA_T KOU
             WHERE KEI.USERID = KOU.USERID
               AND KEI.KAIJYO_DATE IS NULL
               AND KOU.TB_ACCNT_KBN = '0'
			   ;
   */

	/* 今回は、本人口座の情報がないため、 KOU.TB_ACCNT_KBN = '0'の条件は削除 */
	G_POSITION = __LINE__;
/* %03 Edit START  */
//    EXEC SQL DECLARE CUR_KOU CURSOR FOR
//            SELECT KEI.TB申込店,
//                   KEI.契約者番号,
//                   KEI.CIFNO,
//                   KOU.店番,
//                   KOU.科目ID,
//                   KOU.口座番号,
//                   KOU.口座口番号,
//                   KOU.代表口座区分
//              FROM TFB_テレバン契約属性 KEI, 
//				   TFB_テレバン契約口座 KOU
//             WHERE KEI.契約者番号 = KOU.契約者番号
//               AND KEI.契約解除日 IS NULL
//           ;
    EXEC SQL DECLARE CUR_KOU CURSOR FOR
            SELECT KEI.TB申込店,
                   KEI.契約者番号,
                   KEI.CIFNO,
                   KOU.店番,
                   KOU.科目ID,
                   KOU.口座番号,
                   KOU.代表口座区分
              FROM TFB_テレバン契約属性 KEI, 
				   TFB_テレバン契約口座 KOU
             WHERE KEI.契約者番号 = KOU.契約者番号
               AND KEI.契約解除日 IS NULL
           ;
/* %03 Edit End  */
	if( sqlca.sqlcode < 0 ){
		send_err ( m$sql_statment, sqlca.sqlcode, "DECLARE(CUR_KOU) エラー", NULL, NULL, G_STATION);
		return( ERROR );
	}

	G_POSITION = __LINE__;
    EXEC SQL OPEN CUR_KOU;
	if( sqlca.sqlcode < 0 ){
		send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_KOU)オープン・エラー", NULL, NULL, G_STATION);
		EXEC SQL CLOSE CUR_KOU;
		return( ERROR );
	}

    while ( 1 ) {
        memset( h_EigyotenID, 0x00, sizeof(h_EigyotenID) );
        hi_EigyotenID = ORA_NULL;
        memset( h_UserID, 0x00, sizeof(h_UserID) );
        hi_UserID = ORA_NULL;
        memset( h_CIFNO, 0x00, sizeof(h_CIFNO) );
        hi_CIFNO = ORA_NULL;
        memset( h_BranchNo, 0x00, sizeof(h_BranchNo) );
        hi_BranchNo = ORA_NULL;
        memset( h_AccntType, 0x00, sizeof(h_AccntType) );
        hi_AccntType = ORA_NULL;
        memset( h_AccntNo, 0x00, sizeof(h_AccntNo) );
        hi_AccntNo = ORA_NULL;
/* %03 Edit START  */
//        memset( h_AccntSubNo, 0x00, sizeof(h_AccntSubNo) );
//        hi_AccntSubNo = ORA_NULL;
/* %03 Edit End  */
        memset( h_AccntFlg, 0x00, sizeof(h_AccntFlg) );
        hi_AccntFlg = ORA_NULL;

		G_POSITION = __LINE__;
/* %03 Edit START  */
//        EXEC SQL FETCH CUR_KOU
//                INTO
//                    :h_EigyotenID :hi_EigyotenID,
//                    :h_UserID :hi_UserID,
//                    :h_CIFNO :hi_CIFNO,
//                    :h_BranchNo :hi_BranchNo,
//                    :h_AccntType :hi_AccntType,
//                    :h_AccntNo :hi_AccntNo,
//                    :h_AccntSubNo :hi_AccntSubNo,
//                    :h_AccntFlg :hi_AccntFlg
//                ;
        EXEC SQL FETCH CUR_KOU
                INTO
                    :h_EigyotenID :hi_EigyotenID,
                    :h_UserID :hi_UserID,
                    :h_CIFNO :hi_CIFNO,
                    :h_BranchNo :hi_BranchNo,
                    :h_AccntType :hi_AccntType,
                    :h_AccntNo :hi_AccntNo,
                    :h_AccntFlg :hi_AccntFlg
                ;
/* %03 Edit End  */
        if ( sqlca.sqlcode == ORA_NOF ){
            break;
        }
        else if( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_KOU) FETCHエラー", NULL, NULL, G_STATION);
			rc = ERROR;
			break;
		}

        memset( sqltext, 0x00, sizeof(sqltext) );

/* %03 Edit START  */
//        /* 定期預金・仕組預金 */
//        if( strncmp(h_AccntType, LOADING_ACCNT_TYPE_TK, 4) == 0 ||
//            strncmp(h_AccntType, LOADING_ACCNT_TYPE_SI, 4) == 0 ){
//            strcpy( sqltext, "SELECT COUNT(*) FROM TF_個別明細固定性預金" );
//            strcat( sqltext, " WHERE 店番='" );
//            strcat( sqltext, h_BranchNo);
//            strcat( sqltext, "' AND ");
//            strcat( sqltext, "CIFNO='");
//            strcat( sqltext, h_CIFNO);
//            /* 定期預金 */
//            if( strncmp(h_AccntType, LOADING_ACCNT_TYPE_TK, 4) == 0 ){
//                strcat( sqltext, "' AND 科目ID IN ('203300', '203500') " );
//            }
//            else {
//                strcat( sqltext, "' AND 科目ID='203900' " );
//            }
//        }
        /* 定期預金 */
        if( strncmp(h_AccntType, LOADING_ACCNT_TYPE_TK, 4) == 0 ){
            strcpy( sqltext, "SELECT COUNT(*) FROM TF_個別明細固定性預金" );
            strcat( sqltext, " WHERE 店番='" );
            strcat( sqltext, h_BranchNo);
            strcat( sqltext, "' AND ");
/* %06 Edit START  */
//            strcat( sqltext, "CIFNO='");
//            strcat( sqltext, h_CIFNO);
            strcat( sqltext, "口座番号='");
            strcat( sqltext, h_AccntNo);
/* %06 Edit End  */
/* %09 Edit START  */
//            strcat( sqltext, "' AND 科目ID IN ('2011','2012','2021','2098') " );
            strcat( sqltext, "' AND 科目ID IN ('2000','2011','2012','2021','2098') " );
/* %09 Edit End  */
            strcat( sqltext, " AND 仕組預金='0'" );
        }
        /* 仕組預金 */
        else if( strncmp(h_AccntType, LOADING_ACCNT_TYPE_SI, 4) == 0 ){
            strcpy( sqltext, "SELECT COUNT(*) FROM TF_個別明細固定性預金" );
            strcat( sqltext, " WHERE 店番='" );
            strcat( sqltext, h_BranchNo);
            strcat( sqltext, "' AND ");
/* %06 Edit START  */
//            strcat( sqltext, "CIFNO='");
//            strcat( sqltext, h_CIFNO);
            strcat( sqltext, "口座番号='");
            strcat( sqltext, h_AccntNo);
/* %06 Edit End  */
/* %09 Edit START  */
//            strcat( sqltext, "' AND 科目ID='2011'" );
            strcat( sqltext, "' AND 科目ID IN ('2000','2011') " );
/* %09 Edit End  */
            strcat( sqltext, " AND 仕組預金='1'" );
        }
/* %03 Edit End  */
        /* 普通 */
        else if( strncmp(h_AccntType, LOADING_ACCNT_TYPE_FT, 4) == 0 ){
            strcpy( sqltext, "SELECT COUNT(*) FROM TF_個別明細流動性預金" );
            strcat( sqltext, " WHERE 店番='" );
            strcat( sqltext, h_BranchNo);
            strcat( sqltext, "' AND ");
/* %06 Edit START  */
//            strcat( sqltext, "CIFNO='");
//            strcat( sqltext, h_CIFNO);
            strcat( sqltext, "口座番号='");
            strcat( sqltext, h_AccntNo);
/* %06 Edit End  */
/* %03 Edit START  */
//            strcat( sqltext, "' AND 科目ID='205110' " );
/* %07 ITa_019 Edit START 1211→1221 */
//            strcat( sqltext, "' AND 科目ID='1211' " );
            strcat( sqltext, "' AND 科目ID='1221' " );
/* %07 ITa_019 End */
/* %03 Edit End  */
        }
/* %03 Edit START  */
//        /* リッシン・ワリシン・ワイド・あおぞらSP */
//        else if( strncmp(h_AccntType, LOADING_ACCNT_TYPE_RI, 4) == 0 ||
//                 strncmp(h_AccntType, LOADING_ACCNT_TYPE_WR, 4) == 0 ||
//                 strncmp(h_AccntType, LOADING_ACCNT_TYPE_WI, 4) == 0 ||
//                 strncmp(h_AccntType, LOADING_ACCNT_TYPE_AS, 4) == 0 ){
//            strcpy( sqltext, "SELECT COUNT(*) FROM TF_個別明細債券" );
//            strcat( sqltext, " WHERE 店番='" );
//            strcat( sqltext, h_BranchNo);
//            strcat( sqltext, "' AND ");
//            strcat( sqltext, "CIFNO='");
//            strcat( sqltext, h_CIFNO);
//            /*  */
//            if( strncmp(h_AccntType, LOADING_ACCNT_TYPE_RI, 4) == 0 ){
//                strcat( sqltext, "' AND (TO_NUMBER(科目ID,'999999')>=850100 AND TO_NUMBER(科目ID,'999999')<=850399) " );
//            }
//            /* ワリシン */
//            else if( strncmp(h_AccntType, LOADING_ACCNT_TYPE_WR, 4) == 0 ){
//                strcat( sqltext, "' AND (TO_NUMBER(科目ID,'999999')>=850400 AND TO_NUMBER(科目ID,'999999')<=850699) " );
//                strcat( sqltext, " AND 科目ID!='850410' AND 科目ID!='850510' AND 科目ID!='850610' " );
//			}
//            /* あおぞらSP */
//            else if( strncmp(h_AccntType, LOADING_ACCNT_TYPE_AS, 4) == 0 ){
//                strcat( sqltext, "' AND (科目ID='850410' OR 科目ID='850510' OR 科目ID='850610') " );
//			}
//            /* ワイド */
//            else if( strncmp(h_AccntType, LOADING_ACCNT_TYPE_WI, 4) == 0 ){
//                strcat( sqltext, "' AND (TO_NUMBER(科目ID,'999999')>=850700 AND TO_NUMBER(科目ID,'999999')<=850999) " );
//			}
//        }
/* %03 Edit End  */
        /* 投信 */
        else if( strncmp(h_AccntType, LOADING_ACCNT_TYPE_TO, 4) == 0 ){
            strcpy( sqltext, "SELECT COUNT(*) FROM TF_個別明細投信口座" );
            strcat( sqltext, " WHERE 店番='" );
            strcat( sqltext, h_BranchNo);
            strcat( sqltext, "' AND ");
            strcat( sqltext, "CIFNO='");
            strcat( sqltext, h_CIFNO);
/* %08 Add Start */
            strcat( sqltext, "' AND ");
            strcat( sqltext, "口座番号='");
            strcat( sqltext, h_AccntNo);
/* %08 Add End   */
            strcat( sqltext, "' ");
		}
        /* 外貨預金 */
        else if( strncmp(h_AccntType, LOADING_ACCNT_TYPE_GF, 4) == 0 ||
                 strncmp(h_AccntType, LOADING_ACCNT_TYPE_GT, 4) == 0 ){
            strcpy( sqltext, "SELECT COUNT(*) FROM TF_個別明細外貨預金" );
            strcat( sqltext, " WHERE 店番='" );
            strcat( sqltext, h_BranchNo);
            strcat( sqltext, "' AND ");
/* %06 Edit START  */
//            strcat( sqltext, "CIFNO='");
//            strcat( sqltext, h_CIFNO);
            strcat( sqltext, "口座番号='");
            strcat( sqltext, h_AccntNo);
/* %06 Edit End  */
            /* 個人向け外貨普通預金 */
            if( strncmp(h_AccntType, LOADING_ACCNT_TYPE_GF, 4) == 0 ){
/* %03 Edit START  */
//                strcat( sqltext, "' AND 科目ID='275111' " );
                strcat( sqltext, "' AND 科目ID='702' " );
/* %03 Edit End  */
            }
            else if( strncmp(h_AccntType, LOADING_ACCNT_TYPE_GT, 4) == 0 ){
/* %03 Edit START  */
//                strcat( sqltext, "' AND 科目ID IN ('273100', '273111', '273112') " );
                strcat( sqltext, "' AND 科目ID='711' " );
/* %03 Edit End  */
			}
        }
        else {
            continue;
        }

        strcat( sqltext, "");

		G_POSITION = __LINE__;
        EXEC SQL PREPARE sql_meisai FROM :sqltext ;
        if( sqlca.sqlcode < 0 ) {
			send_err ( m$emb_error, -1, "動的SQLの作成に失敗しました。", NULL, NULL, G_STATION);
			send_err ( m$sql_statment, sqlca.sqlcode, sqltext, NULL, NULL, G_STATION);
			
			rc = ERROR;
			break;
        }

		G_POSITION = __LINE__;
        EXEC SQL DECLARE CUR_MEISAI CURSOR FOR sql_meisai;
        if( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "DECLARE(CUR_MEISAI) エラー", NULL, NULL, G_STATION);
            return( ERROR );
        }

		G_POSITION = __LINE__;
        EXEC SQL OPEN CUR_MEISAI;
        if( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_MEISAI)オープン・エラー", NULL, NULL, G_STATION);
            EXEC SQL CLOSE CUR_MEISAI;
            return( ERROR );
        }

        while( 1 ) {

			G_POSITION = __LINE__;
            EXEC SQL FETCH CUR_MEISAI INTO :h_Count ;
            if (sqlca.sqlcode == ORA_NOF){
                break;
            }
            else if (sqlca.sqlcode < 0){
				send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_MEISAI) FETCHエラー", NULL, NULL, G_STATION);
                rc = ERROR;
                break;
            }

            if( h_Count == 0 ){
                /* TX_利用口座確認更新 */
                rc = updateAccntCheck();
                if( rc != NORMAL ){
                    break;
                }
            }
        }

		G_POSITION = __LINE__;
        EXEC SQL CLOSE CUR_MEISAI;
        if( rc != NORMAL ){
            break;
        }
    }

	G_POSITION = __LINE__;
    EXEC SQL CLOSE CUR_KOU;

    return( rc );

}


/*****************************************************************************/
/* Function Name:                                                            */
/*   int checkCancelContract()                                               */
/*                                                                           */
/* Made by:                                                                  */
/* Description:                                                              */
/*      解約契約者チェック                                                   */
/*                                                                           */
/* Arguments:                                                                */
/* Type     Name              I/O    Content                                 */
/* -------- ----------------- --- ------------------------------------------ */
/*                                                                           */
/*                                                                           */
/*                                                                           */
/* Files :                                                                   */
/*    None                                                                   */
/* Tables:                                                                   */
/*    None                                                                   */
/* Return Code:                                                              */
/*        NORMAL   : 正常　　                                                */
/*        ERROR    : 異常                                                    */
/*                                                                           */
/*****************************************************************************/
/* Process Description:                                                      */
/*                                                                           */
/* Considerations:                                                           */
/*                                                                           */
/* Control Flow:                                                             */
/*                                                                           */
/*****************************************************************************/
static int checkCancelContract()
{

    int  rc = NORMAL;

    memset( h_ShoriType, 0x00, sizeof(h_ShoriType) );
    strcpy( h_ShoriType, LOADING_PR_TYPE_CAN );

	G_POSITION = __LINE__;
	EXEC SQL DECLARE CUR_KEI CURSOR FOR
			SELECT	TB申込店,
					契約者番号,
					CIFNO
				FROM TFB_テレバン契約属性
				WHERE 契約解除日 IS NULL
			;
	if( sqlca.sqlcode < 0 ){
		send_err ( m$sql_statment, sqlca.sqlcode, "DECLARE(CUR_KEI) エラー", NULL, NULL, G_STATION);
		return( ERROR );
	}

	G_POSITION = __LINE__;
	EXEC SQL OPEN CUR_KEI;
	if( sqlca.sqlcode < 0 ){
		send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_KEI)オープン・エラー", NULL, NULL, G_STATION);
		EXEC SQL CLOSE CUR_KEI;
		return( ERROR );
	}


    while ( 1 ) {
        memset( h_EigyotenID, 0x00, sizeof(h_EigyotenID) );
        hi_EigyotenID = ORA_NULL;
        memset( h_UserID,     0x00, sizeof(h_UserID) );
        hi_UserID     = ORA_NULL;
        memset( h_CIFNO,      0x00, sizeof(h_CIFNO) );
        hi_CIFNO      = ORA_NULL;
        memset( h_BranchNo,   0x00, sizeof(h_BranchNo) );
        hi_BranchNo   = ORA_NULL;
        memset( h_AccntType,  0x00, sizeof(h_AccntType) );
        hi_AccntType  = ORA_NULL;
        memset( h_AccntNo,    0x00, sizeof(h_AccntNo) );
        hi_AccntNo    = ORA_NULL;
/* %03 Edit START  */
//        memset( h_AccntSubNo, 0x00, sizeof(h_AccntSubNo) );
//        hi_AccntSubNo = ORA_NULL;
/* %03 Edit End  */
        memset( h_AccntFlg,   0x00, sizeof(h_AccntFlg) );
        hi_AccntFlg   = ORA_NULL;

		G_POSITION = __LINE__;
		EXEC SQL FETCH CUR_KEI
			INTO
				:h_EigyotenID :hi_EigyotenID,
				:h_UserID :hi_UserID,
				:h_CIFNO :hi_CIFNO
			;
		if ( sqlca.sqlcode == ORA_NOF ){
			break;
		}
		else if ( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "カーソル(CUR_KEI) FETCHエラー", NULL, NULL, G_STATION);
			rc = ERROR;
			break;
		}

		G_POSITION = __LINE__;
		EXEC SQL SELECT COUNT(*) INTO :h_Count
			FROM TF_個別明細固定性預金
			WHERE CIFNO = :h_CIFNO
			AND   店番  = :h_EigyotenID	/* %02 Add */
				;
		if ( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "TF_個別明細固定性預金テーブル検索エラー", NULL, NULL, G_STATION);
			rc = ERROR;
			break;
		}
		if ( h_Count > 0 ){
			continue;
		}

		G_POSITION = __LINE__;
		EXEC SQL SELECT COUNT(*) INTO :h_Count
			FROM TF_個別明細流動性預金
			WHERE 店番  = :h_EigyotenID	/* %02 Add */
			AND   CIFNO = :h_CIFNO
				;
		if ( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "TF_個別明細流動性預金テーブル検索エラー", NULL, NULL, G_STATION);
			rc = ERROR;
			break;
		}
		if ( h_Count > 0 ){
			continue;
		}

/* %03 Edit START 債券は不要 */
//		G_POSITION = __LINE__;
//		EXEC SQL SELECT COUNT(*) INTO :h_Count
//			FROM TF_個別明細債券
//			WHERE 店番  = :h_EigyotenID	/* %02 Add */
//			AND   CIFNO = :h_CIFNO
//				;
//		if ( sqlca.sqlcode < 0 ){
//			send_err ( m$sql_statment, sqlca.sqlcode, "TF_個別明細債券テーブル検索エラー", NULL, NULL, G_STATION);
//			rc = ERROR;
//			break;
//		}
//		if ( h_Count > 0 ){
//			continue;
//		}
/* %03 Edit Enf  */

		G_POSITION = __LINE__;
		EXEC SQL SELECT COUNT(*) INTO :h_Count
			FROM TF_個別明細外貨預金
			WHERE CIFNO = :h_CIFNO
			AND   店番  = :h_EigyotenID	/* %02 Add */
				;
		if ( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "TF_個別明細外貨預金テーブル検索エラー", NULL, NULL, G_STATION);
			rc = ERROR;
			break;
		}
		if ( h_Count > 0 ){
			continue;
		}

		G_POSITION = __LINE__;
		EXEC SQL SELECT COUNT(*) INTO :h_Count
			FROM TF_個別明細投信口座
			WHERE CIFNO = :h_CIFNO
			AND   店番  = :h_EigyotenID	/* %02 Add */
				;
		if ( sqlca.sqlcode < 0 ){
			send_err ( m$sql_statment, sqlca.sqlcode, "TF_個別明細投信口座テーブル検索エラー", NULL, NULL, G_STATION);
			rc = ERROR;
			break;
		}
		if ( h_Count > 0 ){
			continue;
		}

        /* TX_利用口座確認更新 */
        rc = updateAccntCheck();
        if( rc != NORMAL ){
            break;
        }

    }

    return( rc );

}