/*==========================================================================*/
/* Copyright　Information Services International-Dentsu, Ltd.   　          */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : BANK・R−CC                                           */
/*                                                                          */
/* PROGRAM NAME     : テーブルの調整−対象ファイル情報                      */
/*                                                                          */
/* MODULE NAME      : AdjustCampaignObject                                  */
/*                                                                          */
/* FUNCTION         : 対象ファイル情報のレコード件数調整を行う。            */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POint      : Main Module.                                          */
/*                                                                          */
/* INPUT            : argv[1]・・・データ区分                               */
/*                                  0:ホストデータ(省略時)                  */
/*                                  4:履歴                                  */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 09/06/24 | K.Miyahara  | First Edition.                            */
/*==========================================================================*/
/*---------------------------------------------------------------------------*/
/* Standard include specification                                            */
/*---------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

/*---------------------------------------------------------------------------*/
/* User defined include specification                                        */
/*---------------------------------------------------------------------------*/
#include "msg.h"
#include "common.h"
#include "batchcommon.h"

EXEC SQL INCLUDE mbproc.h;

/*--------------------------------------------------------------------------*/
/*                            DEFINE STATEMENTS                             */
/*--------------------------------------------------------------------------*/


/*--------------------------------------------------------------------------*/
/*                            EXTERNAL DECLARES                             */
/*--------------------------------------------------------------------------*/
EXEC SQL BEGIN DECLARE SECTION;
    varchar table_name[33];
    char    sqltext[2048];
    long    record_count;
    char    data_division[2];
	short	tb_cnt ;                /* レコードカウンター */
EXEC SQL END DECLARE SECTION;

char    process_name[43];
char    g_work[1024];

/*--------------------------------------------------------------------------*/
/*                           STRUCT DECLARATIONS                            */
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*                           SUBROUTNE DEFINITION                           */
/*--------------------------------------------------------------------------*/
extern int send_err();
extern int db_connect();
extern void errhandler();

int get_row_counts(char*);


/****************************************************************************/
/*                                                                          */
/*                            PROCEDURE DIVISION                            */
/*                                                                          */
/****************************************************************************/

/*--------------------------------------------------------------------------*/
/*                              MAIN ROUTINE                                */
/*--------------------------------------------------------------------------*/
main(argc, argv)
    int argc;
    char *argv[];
{
/*--------------------------------------------------------------------------*/  
/*                        LOCAL VARIABLE DECLARATIONS                       */
/*--------------------------------------------------------------------------*/
    int     rc;
    int     exitcode;
    int     cursor;
    int     found;


/*==========================================================================*/
/*      INITIALIZATION                                                      */
/*==========================================================================*/
    /*------------------------*/
    /* Initialize environment */
    /*------------------------*/
    exitcode = NORMAL;


    cursor = 0 ;

    /*-----------------------------*/
    /* Print process start message */
    /*-----------------------------*/
    strcpy( G_STATION, "AdjustCampaignObject" );

	memset(process_name,0x00,sizeof(process_name));
    strcpy(process_name,"テーブルの調整−対象ファイル情報");

    send_err( m$start_process, NORMAL, process_name, "", "", G_STATION );

    
	/*-----------------------------*/
	/* Check parameter             */
	/*-----------------------------*/
    if (argc > 1) {
        if (strlen(argv[1]) > 1) {
            send_err (m$invalid_parameter, -1, NULL, NULL, NULL, G_STATION);
            exitcode = ERROR;
            goto ENDPROC;
        } else {
            strcpy(data_division, argv[1]);
        }
    } else {
            strcpy(data_division, "0");
    }

    /*-----------------------------*/
    /* Setup error handler routine */
    /*-----------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

	/*-----------------------------*/
	/* Connect to database         */
	/*-----------------------------*/
    G_POSITION = __LINE__;
    rc = db_connect();
    if( rc != 0 ) {
        send_err( m$db_connect, rc, NULL, NULL, NULL, G_STATION );
        exitcode = ERROR;
        goto ENDPROC;
    }

    /*======================================================================*/
    /*                      メ　イ　ン　処　理                              */
    /*======================================================================*/

    /*--------------------*/
    /* レコード件数の作成 */
    /*--------------------*/
    G_POSITION = __LINE__;
    EXEC SQL DECLARE target_file_row CURSOR FOR
		SELECT 
			対象ファイル名
		FROM 
			TS_対象ファイル情報
		WHERE 
			対象ファイル名 IS NOT NULL AND 
			対象ファイル名 NOT LIKE 'SG%' AND 
			対象ファイル名 NOT LIKE 'GF%' AND 
			対象ファイル名 NOT LIKE 'EBM%' AND 
			データ区分 = :data_division AND 
			削除フラグ = '0';
    if( sqlca.sqlcode < 0 ){
        send_err( m$sql_statment, sqlca.sqlcode, "TS_対象ファイル情報のDECLARE宣言に失敗", NULL, NULL, G_STATION );
        exitcode = ERROR ;
        goto LOGOUT ;
    }
    G_POSITION = __LINE__;
    EXEC SQL OPEN target_file_row ;
    if( sqlca.sqlcode < 0 ){
        send_err( m$sql_statment, sqlca.sqlcode, "TS_対象ファイル情報のOPENに失敗", NULL, NULL, G_STATION );
        exitcode = ERROR ;
        goto LOGOUT ;
    }
    cursor = 1;
    found = 0 ;
    while(1) {
        G_POSITION = __LINE__;
        EXEC SQL FETCH target_file_row INTO :table_name;
        

        if( sqlca.sqlcode < 0 ){
            send_err( m$sql_statment, sqlca.sqlcode, "TS_対象ファイル情報の取得(FETCH)に失敗", NULL, NULL, G_STATION );
            exitcode = ERROR ;
            goto LOGOUT ;
        }
        if( sqlca.sqlcode == ORA_NOF ){
            if (found == 0) {
                send_err ( m$message1,0,"TS_対象ファイル情報に該当データがありません",NULL,NULL,G_STATION);
            }
            goto CLOSE ;
        }
        found = 1 ;
        table_name.arr[table_name.len] = '\0';
        
        rc = get_row_counts(table_name.arr) ;

		if ( rc != NORMAL ) {
            exitcode = ERROR ;
            goto LOGOUT ;
        }

        G_POSITION = __LINE__;
        EXEC SQL 
			UPDATE 
				TS_対象ファイル情報
			SET 
				レコード数 = :record_count
			WHERE 
				対象ファイル名 = :table_name 
			;
        if( sqlca.sqlcode < 0 ){
            send_err( m$sql_statment, sqlca.sqlcode, "TS_対象ファイル情報の更新に失敗", NULL, NULL, G_STATION );
            exitcode = ERROR ;
            goto LOGOUT ;
        }

        memset(g_work,0x00,sizeof(g_work));
        sprintf(g_work,"テーブル：%sの件数を%d件に更新しました",table_name.arr,record_count);
        send_err( m$message1,0,g_work,NULL,NULL,G_STATION);

    }

    /*--------------------------------------------------------------------------*/
    /*                              終了処理                                    */
    /*--------------------------------------------------------------------------*/
    
    /*
    **  終了処理(カーソルクローズ)
    */
CLOSE:
    if(( cursor == 1 ) && ( exitcode == NORMAL )){
        EXEC SQL CLOSE target_file_row;
    }

    /*
    **  終了処理(DBログアウト)
    */
LOGOUT:
    if ( exitcode == NORMAL ) {
        EXEC SQL COMMIT WORK RELEASE;
    }
    else {
        EXEC SQL ROLLBACK WORK RELEASE;
    }

    /*
    **  終了処理
    */
ENDPROC:
    if ( exitcode == NORMAL ){
		send_err( m$stop_process, NORMAL, process_name, "", "", G_STATION );  
    }
	else {
		send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );

	}

    exit(exitcode);
}


/*==========================================================================*/
/*                                                                          */
/*  関数名  ：  レコード件数取得モジュール                                  */
/*                                                                          */
/*  概要    ：  指定した対象ファイルのレコード件数を取得する                */
/*                                                                          */
/*==========================================================================*/
int get_row_counts(name)
char    *name;
{

	G_POSITION = __LINE__;
	EXEC SQL
		SELECT COUNT(*) 
			INTO	:tb_cnt
		FROM USER_TABLES
		WHERE 
			TABLE_NAME = :table_name ;

	if( sqlca.sqlcode < 0 ) {
		send_err( m$sql_statment, sqlca.sqlcode, "SELECT COUNT(*) FROM USER_TABLES",
				NULL, NULL, G_STATION );
		return( ERROR );
	}
            
	if ( tb_cnt == 0 ) {
		G_POSITION = __LINE__;
		EXEC SQL
			SELECT COUNT(*) 
				INTO	:tb_cnt
			FROM USER_VIEWS
			WHERE 
				VIEW_NAME = :table_name ;

		if( sqlca.sqlcode < 0 ) {
			send_err( m$sql_statment, sqlca.sqlcode, "SELECT COUNT(*) FROM USER_VIEWS",
					NULL, NULL, G_STATION );
			return( ERROR );
		}
		if ( tb_cnt == 0 ) {
			record_count = 0;
			return ( NORMAL );
		}

	}

    memset(sqltext,0x00,sizeof(sqltext));
    strcpy(sqltext,"SELECT COUNT(*) FROM ");
    strcat(sqltext,name);

    G_POSITION = __LINE__;
    EXEC SQL PREPARE sqlcommand FROM :sqltext;
    if( sqlca.sqlcode < 0 ){
		send_err( m$emb_error, sqlca.sqlcode, sqltext, NULL, NULL, G_STATION);
		send_err( m$sql_statment, sqlca.sqlcode, "対象のテーブル件数取得(PREPARE)に失敗", NULL, NULL, G_STATION );
		return ( ERROR );
    }


    G_POSITION = __LINE__;
    EXEC SQL DECLARE count_row CURSOR FOR sqlcommand;
    if( sqlca.sqlcode < 0 ){
		send_err( m$emb_error, sqlca.sqlcode, sqltext, NULL, NULL, G_STATION);
		send_err( m$sql_statment, sqlca.sqlcode, "対象のテーブル件数取得(DECLARE)に失敗", NULL, NULL, G_STATION );
		return ( ERROR );
    }

    G_POSITION = __LINE__;
    EXEC SQL OPEN count_row;
    if( sqlca.sqlcode < 0 ){
		send_err( m$emb_error, sqlca.sqlcode, sqltext, NULL, NULL, G_STATION);
		send_err( m$sql_statment, sqlca.sqlcode, "対象のテーブル件数取得(OPEN)に失敗", NULL, NULL, G_STATION );	
		return ( ERROR );
    }
    G_POSITION = __LINE__;
    EXEC SQL FETCH count_row INTO :record_count;
    if( sqlca.sqlcode < 0 ){
		send_err( m$emb_error, sqlca.sqlcode, sqltext, NULL, NULL, G_STATION);
		send_err( m$sql_statment, sqlca.sqlcode, "対象のテーブル件数取得(FETCH)に失敗", NULL, NULL, G_STATION );
		return ( ERROR );
    }

    if( sqlca.sqlcode == ORA_NOF ){
        send_err ( m$sql_statment,sqlca.sqlcode,name,NULL,NULL,G_STATION);
    }

    G_POSITION = __LINE__;
    EXEC SQL CLOSE count_row;
    if( sqlca.sqlcode < 0 ){
        send_err( m$sql_statment, sqlca.sqlcode, "対象のテーブル件数取得(CLOSE)に失敗", NULL, NULL, G_STATION );
		return ( ERROR );
    }

	return ( NORMAL );

}

