/*==========================================================================*/
/* Copyright　Information Services International-Dentsu, Ltd.   　          */
/*==========================================================================*/
/*                                                                          */
/* SYSTEM           : BANK・R−CC                                           */
/*                                                                          */
/* PROGRAM NAME     : キャンペーン効果分析データ削除                        */
/*                                                                          */
/* MODULE NAME      : DropEffectAnalysisData                                */
/*                                                                          */
/* FUNCTION         : 13ヶ月以前のキャンペーン効果分析テーブルを削除する    */
/*                                                                          */
/* CALLING MODULE   : Main Module.                                          */
/*                                                                          */
/* CALLED MODULE    : send_err, errhandler, db_connect                      */
/*                                                                          */
/* ENTRY POint      : Main Module.                                          */
/*                                                                          */
/* INPUT            : None                                                  */
/*                                                                          */
/* EXIT             : 正常終了       ・・・NORMAL(0)                        */
/*                    異常終了       ・・・ERROR (9)                        */
/*                                                                          */
/* Mod   yy/mm/dd   Coder           Comment                                 */
/*-----+----------+-------------+-------------------------------------------*/
/* %00 | 09/06/26 | K.Miyahara  | First Edition.                            */
/* %01 | 14/05/14 | ISID        | パッケージ障害対応                        */
/*     |          |             |   VIEW削除の途中でOracle障害などにより    */
/*     |          |             |   処理がABENDした場合の対応               */
/*==========================================================================*/
/*--------------------------------------------------------------------------*/
/* Standard include specification                                           */
/*--------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*---------------------------------------------------------------------------*/
/* User defined include specification                                        */
/*---------------------------------------------------------------------------*/
#include "msg.h"
#include "batchcommon.h"
#include "common.h"

EXEC SQL INCLUDE mbproc.h;

/*--------------------------------------------------------------------------*/
/*							DEFINE STATEMENTS								*/
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*							EXTERNAL DECLARES								*/
/*--------------------------------------------------------------------------*/
EXEC SQL BEGIN DECLARE SECTION;
	int		count;							/* カウンタ */
	char	sqlcmd[4096];					/* SQL文 */
	char	target_date[6+1];				/* 削除対象日付 */
EXEC SQL END DECLARE SECTION;

char    process_name[43];
char    g_work[1024];
/*--------------------------------------------------------------------------*/
/*							STRUCT DECLARATIONS								*/
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*							SUBROUTNE DEFINITION							*/
/*--------------------------------------------------------------------------*/
extern int send_err();
extern int db_connect();
extern void errhandler();

/****************************************************************************/
/*																			*/
/*							PROCEDURE DIVISION								*/
/*																			*/
/****************************************************************************/

/*--------------------------------------------------------------------------*/
/*                              MAIN ROUTINE                                */
/*--------------------------------------------------------------------------*/
main (argc, argv)
int     argc;
char    *argv[];
{
/*--------------------------------------------------------------------------*/
/*                      LOCAL VARIABLE DECLARATIONS                         */
/*--------------------------------------------------------------------------*/
	int		exit_code;					/* 終了コード */
	int		return_code;				/* リターンコード */
	int		db_connect_flag;			/* ＤＢ接続フラグ */
	int		i;							/* カウンター */

/*==========================================================================*/
/*      INITIALIZATION                                                      */
/*==========================================================================*/

	/*-----------------------------*/
	/* Initialize environment      */
	/*-----------------------------*/
	exit_code = NORMAL;
	return_code = 0;
	db_connect_flag = 0;
	i = 0;

	/*-----------------------------*/
	/* Print process start message */
	/*-----------------------------*/
    strcpy( G_STATION, "DropEffectAnalysisData" );

	memset(process_name,0x00,sizeof(process_name));
	strcpy(process_name,"キャンペーン効果分析データ削除");

	send_err( m$start_process, NORMAL, process_name, "", "", G_STATION );

	/*-----------------------------*/
	/* Check parameter             */
	/*-----------------------------*/

    /*-----------------------------*/
    /* Setup error handler routine */
    /*-----------------------------*/
    EXEC SQL WHENEVER SQLERROR DO errhandler();

	/*-----------------------------*/
	/* Connect to database         */
	/*-----------------------------*/
	G_POSITION = __LINE__;
	return_code = db_connect();
	if( return_code != 0 ) {
		send_err( m$db_connect, return_code, NULL, NULL, NULL, G_STATION );
		exit_code = ERROR;
		goto ENDPROC;
    }

	db_connect_flag = 1;

    /*======================================================================*/
    /*                      メ　イ　ン　処　理                              */
    /*======================================================================*/

	/*----------------------------------------------------------------------*/
	/* TA_効果分析1ヶ月前〜13ヶ月前のビュー削除                             */
	/*----------------------------------------------------------------------*/
	for( i = 1; i <= 13; i++ ){
		memset( sqlcmd, 0x00, sizeof(sqlcmd) );
		sprintf( sqlcmd, "SELECT COUNT(*) FROM USER_VIEWS WHERE VIEW_NAME='TA_効果分析%dヶ月前'", i );

		G_POSITION = __LINE__;
		EXEC SQL PREPARE sql1 FROM :sqlcmd ;
		if ( sqlca.sqlcode < 0 ) {
			send_err( m$sql_statment, sqlca.sqlcode, "PREPARE sql1", NULL, NULL, G_STATION );
			exit_code = ERROR ;
			goto ENDPROC ;
		}

		G_POSITION = __LINE__;
		EXEC SQL DECLARE cur1 CURSOR FOR sql1;
		if ( sqlca.sqlcode < 0 ) {
			send_err( m$sql_statment, sqlca.sqlcode, "DECLARE cur1", NULL, NULL, G_STATION );
			exit_code = ERROR ;
			goto ENDPROC ;
		}

		G_POSITION = __LINE__;
		EXEC SQL OPEN cur1;
		if ( sqlca.sqlcode < 0 ) {
			send_err( m$sql_statment, sqlca.sqlcode, "OPEN cur1", NULL, NULL, G_STATION );
			exit_code = ERROR ;
			goto ENDPROC ;
		}

		count = 0;
        G_POSITION = __LINE__;
		EXEC SQL FETCH cur1 INTO :count;
        if( sqlca.sqlcode < 0 ) {
        	send_err( m$sql_statment, sqlca.sqlcode, "FETCH cur1", NULL, NULL, G_STATION );
			EXEC SQL CLOSE cur1;
        	exit_code = ERROR ;
        	goto ENDPROC ;
        }

		EXEC SQL CLOSE cur1;
		/* 存在すればDROP */
		if( count > 0 ){
			memset( sqlcmd, 0x00, sizeof(sqlcmd) );
			sprintf( sqlcmd, "DROP VIEW TA_効果分析%dヶ月前", i );

			G_POSITION = __LINE__;
			EXEC SQL EXECUTE IMMEDIATE :sqlcmd;
			if( sqlca.sqlcode < 0 ){
				send_err( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION );
        		exit_code = ERROR ;
        		goto ENDPROC ;
			}
		}
		/* 存在しなければループ先頭へ %01 Change break→continueに変更 2014/05/14 */
		else{
			continue; 
		}
	}

	/*----------------------------------------------------------------------*/
	/* 14ヶ月前のTA_効果分析YYYYMMを削除                                    */
	/*----------------------------------------------------------------------*/
	/* 日付取得 */
	memset( target_date, 0x00, sizeof(target_date) );
	G_POSITION = __LINE__;
	EXEC SQL
		SELECT
			TO_CHAR( ADD_MONTHS( データ基準日, -14 ) , 'YYYYMM' )
		INTO
			:target_date
		FROM
			TX_ローディング情報
		WHERE
			テーブル名 = 'TF_顧客属性'
		;
    if( sqlca.sqlcode < 0 ) {
    	send_err( m$sql_statment, 0, "SELECT DATE from TX_ローディング情報", NULL, NULL, G_STATION );
    	exit_code = ERROR ;
    	goto ENDPROC ;
    }

	/* 存在チェック */
	memset( sqlcmd, 0x00, sizeof(sqlcmd) );
	strcpy( sqlcmd, "SELECT COUNT(*) " );
	strcat( sqlcmd, "FROM USER_TABLES " );
	strcat( sqlcmd, "WHERE TABLE_NAME = 'TA_効果分析" );
	strcat( sqlcmd, target_date );
	strcat( sqlcmd, "'" );

	G_POSITION = __LINE__;
	EXEC SQL PREPARE sql2 FROM :sqlcmd ;
	if ( sqlca.sqlcode < 0 ) {
		send_err( m$sql_statment, sqlca.sqlcode, "PREPARE sql2", NULL, NULL, G_STATION );
		exit_code = ERROR ;
		goto ENDPROC ;
	}

	G_POSITION = __LINE__;
	EXEC SQL DECLARE cur2 CURSOR FOR sql2;
	if ( sqlca.sqlcode < 0 ) {
		send_err( m$sql_statment, sqlca.sqlcode, "DECLARE cur2", NULL, NULL, G_STATION );
		exit_code = ERROR ;
		goto ENDPROC ;
	}

	G_POSITION = __LINE__;
	EXEC SQL OPEN cur2;
	if ( sqlca.sqlcode < 0 ) {
		send_err( m$sql_statment, sqlca.sqlcode, "OPEN cur2", NULL, NULL, G_STATION );
		exit_code = ERROR ;
		goto ENDPROC ;
	}

	count = 0;
    G_POSITION = __LINE__;
	EXEC SQL FETCH cur2 INTO :count;
    if( sqlca.sqlcode < 0 ) {
    	send_err( m$sql_statment, sqlca.sqlcode, "FETCH cur2", NULL, NULL, G_STATION );
		EXEC SQL CLOSE cur2;
    	exit_code = ERROR ;
    	goto ENDPROC ;
    }

	EXEC SQL CLOSE cur2;

	/* 存在している場合DROP */
	if( count > 0){
		memset( sqlcmd, 0x00, sizeof(sqlcmd) );
		strcpy( sqlcmd, "DROP TABLE TA_効果分析" );
		strcat( sqlcmd, target_date );

		G_POSITION = __LINE__;
		EXEC SQL EXECUTE IMMEDIATE :sqlcmd;
		if( sqlca.sqlcode < 0 ){
			send_err( m$sql_statment, sqlca.sqlcode, sqlcmd, NULL, NULL, G_STATION );
			exit_code = ERROR;						/* %01 BUG 対応 return_code→exit_code 修正 */
			goto ENDPROC;
		}
	}


    /*======================================================================**
    **              終了処理
    **======================================================================*/
ENDPROC:
	/* ＤＢ切断 */
	if( db_connect_flag == 1){
		if( exit_code == NORMAL ){
			EXEC SQL COMMIT WORK RELEASE;
		}
		else{
			EXEC SQL ROLLBACK WORK RELEASE;
		}
	}


	/* 終了メッセージ出力 */
	if ( exit_code == NORMAL ){
		send_err( m$stop_process, NORMAL, process_name, "", "", G_STATION );  
	}
	else {
		send_err( m$abend_process, ERROR, process_name, "", "", G_STATION );
	}

	exit(exit_code);

}
